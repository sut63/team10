/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersBill,
    ControllersBillFromJSON,
    ControllersBillToJSON,
    ControllersDoctorinfo,
    ControllersDoctorinfoFromJSON,
    ControllersDoctorinfoToJSON,
    ControllersHistorytaking,
    ControllersHistorytakingFromJSON,
    ControllersHistorytakingToJSON,
    ControllersPatientrecord,
    ControllersPatientrecordFromJSON,
    ControllersPatientrecordToJSON,
    ControllersPatientrights,
    ControllersPatientrightsFromJSON,
    ControllersPatientrightsToJSON,
    ControllersTreatment,
    ControllersTreatmentFromJSON,
    ControllersTreatmentToJSON,
    EntAbilitypatientrights,
    EntAbilitypatientrightsFromJSON,
    EntAbilitypatientrightsToJSON,
    EntBill,
    EntBillFromJSON,
    EntBillToJSON,
    EntDepartment,
    EntDepartmentFromJSON,
    EntDepartmentToJSON,
    EntDoctorinfo,
    EntDoctorinfoFromJSON,
    EntDoctorinfoToJSON,
    EntEducationlevel,
    EntEducationlevelFromJSON,
    EntEducationlevelToJSON,
    EntFinancier,
    EntFinancierFromJSON,
    EntFinancierToJSON,
    EntGender,
    EntGenderFromJSON,
    EntGenderToJSON,
    EntHistorytaking,
    EntHistorytakingFromJSON,
    EntHistorytakingToJSON,
    EntInsurance,
    EntInsuranceFromJSON,
    EntInsuranceToJSON,
    EntMedicalrecordstaff,
    EntMedicalrecordstaffFromJSON,
    EntMedicalrecordstaffToJSON,
    EntNurse,
    EntNurseFromJSON,
    EntNurseToJSON,
    EntOfficeroom,
    EntOfficeroomFromJSON,
    EntOfficeroomToJSON,
    EntPatientrecord,
    EntPatientrecordFromJSON,
    EntPatientrecordToJSON,
    EntPatientrights,
    EntPatientrightsFromJSON,
    EntPatientrightsToJSON,
    EntPatientrightstype,
    EntPatientrightstypeFromJSON,
    EntPatientrightstypeToJSON,
    EntPaytype,
    EntPaytypeFromJSON,
    EntPaytypeToJSON,
    EntPrename,
    EntPrenameFromJSON,
    EntPrenameToJSON,
    EntRegistrar,
    EntRegistrarFromJSON,
    EntRegistrarToJSON,
    EntSymptomseverity,
    EntSymptomseverityFromJSON,
    EntSymptomseverityToJSON,
    EntTreatment,
    EntTreatmentFromJSON,
    EntTreatmentToJSON,
    EntTypetreatment,
    EntTypetreatmentFromJSON,
    EntTypetreatmentToJSON,
    EntUnpaybill,
    EntUnpaybillFromJSON,
    EntUnpaybillToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
    EntUserstatus,
    EntUserstatusFromJSON,
    EntUserstatusToJSON,
} from '../models';

export interface CreateAbilitypatientrightsRequest {
    abilitypatientrights: EntAbilitypatientrights;
}

export interface CreateBillRequest {
    bill: ControllersBill;
}

export interface CreateDepartmentRequest {
    department: EntDepartment;
}

export interface CreateDoctorinfoRequest {
    doctorinfo: ControllersDoctorinfo;
}

export interface CreateEducationlevelRequest {
    educationlevel: EntEducationlevel;
}

export interface CreateHistorytakingRequest {
    historytaking: ControllersHistorytaking;
}

export interface CreateInsuranceRequest {
    insurance: EntInsurance;
}

export interface CreateNurseRequest {
    nurse: EntNurse;
}

export interface CreateOfficeroomRequest {
    officeroom: EntOfficeroom;
}

export interface CreatePatientrecordRequest {
    patientrecord: ControllersPatientrecord;
}

export interface CreatePatientrightsRequest {
    patientrights: ControllersPatientrights;
}

export interface CreatePatientrightstypeRequest {
    patientrightstype: EntPatientrightstype;
}

export interface CreatePrenameRequest {
    prename: EntPrename;
}

export interface CreateRegistrarRequest {
    registrar: EntRegistrar;
}

export interface CreateSymptomseverityRequest {
    symptomseverity: EntSymptomseverity;
}

export interface CreateTreatmentRequest {
    treatment: ControllersTreatment;
}

export interface CreateTypetreatmentRequest {
    typetreatment: EntTypetreatment;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface CreateUserstatusRequest {
    userstatus: EntUserstatus;
}

export interface DeleteAbilitypatientrightsRequest {
    id: number;
}

export interface DeleteBillRequest {
    id: number;
}

export interface DeleteDepartmentRequest {
    id: number;
}

export interface DeleteDoctorinfoRequest {
    id: number;
}

export interface DeleteEducationlevelRequest {
    id: number;
}

export interface DeleteNurseRequest {
    id: number;
}

export interface DeleteOfficeroomRequest {
    id: number;
}

export interface DeletePatientrightsRequest {
    id: number;
}

export interface DeletePatientrightstypeRequest {
    id: number;
}

export interface DeletePrenameRequest {
    id: number;
}

export interface DeleteRegistrarRequest {
    id: number;
}

export interface DeleteSymptomseverityRequest {
    id: number;
}

export interface DeleteTreatmentRequest {
    id: number;
}

export interface DeleteUnpaybillRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface DeleteUserstatusRequest {
    id: number;
}

export interface GetAbilitypatientrightsRequest {
    id: number;
}

export interface GetBillRequest {
    id: number;
}

export interface GetDepartmentRequest {
    id: number;
}

export interface GetDoctorinfoRequest {
    id: number;
}

export interface GetEducationlevelRequest {
    id: number;
}

export interface GetFinancierRequest {
    id: number;
}

export interface GetGenderRequest {
    id: number;
}

export interface GetHistorytakingRequest {
    id: number;
}

export interface GetInsuranceRequest {
    id: number;
}

export interface GetMedicalrecordstaffRequest {
    id: number;
}

export interface GetNurseRequest {
    id: number;
}

export interface GetOfficeroomRequest {
    id: number;
}

export interface GetPatientrecordRequest {
    id: number;
}

export interface GetPatientrightsRequest {
    id: number;
}

export interface GetPatientrightstypeRequest {
    id: number;
}

export interface GetPaytypeRequest {
    id: number;
}

export interface GetPrenameRequest {
    id: number;
}

export interface GetRegistrarRequest {
    id: number;
}

export interface GetSymptomseverityRequest {
    id: number;
}

export interface GetTreatmentRequest {
    id: number;
}

export interface GetTypetreatmentRequest {
    id: number;
}

export interface GetUnpaybillRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface GetUserstatusRequest {
    id: number;
}

export interface ListAbilitypatientrightsRequest {
    limit?: number;
    offset?: number;
}

export interface ListBillRequest {
    limit?: number;
    offset?: number;
}

export interface ListDepartmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListDoctorinfoRequest {
    limit?: number;
    offset?: number;
}

export interface ListEducationlevelRequest {
    limit?: number;
    offset?: number;
}

export interface ListGenderRequest {
    limit?: number;
    offset?: number;
}

export interface ListHistorytakingRequest {
    limit?: number;
    offset?: number;
}

export interface ListInsuranceRequest {
    limit?: number;
    offset?: number;
}

export interface ListMedicalrecordstaffRequest {
    limit?: number;
    offset?: number;
}

export interface ListNurseRequest {
    limit?: number;
    offset?: number;
}

export interface ListOfficeroomRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientrecordRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientrightsRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientrightstypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListPrenameRequest {
    limit?: number;
    offset?: number;
}

export interface ListRegistrarRequest {
    limit?: number;
    offset?: number;
}

export interface ListSymptomseverityRequest {
    limit?: number;
    offset?: number;
}

export interface ListTreatmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListTypetreatmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserstatusRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateAbilitypatientrightsRequest {
    id: number;
    abilitypatientrights: EntAbilitypatientrights;
}

export interface UpdateDepartmentRequest {
    id: number;
    department: EntDepartment;
}

export interface UpdateDoctorinfoRequest {
    id: number;
    doctorinfo: EntDoctorinfo;
}

export interface UpdateEducationlevelRequest {
    id: number;
    educationlevel: EntEducationlevel;
}

export interface UpdateInsuranceRequest {
    id: number;
    insurance: EntInsurance;
}

export interface UpdateNurseRequest {
    id: number;
    nurse: EntNurse;
}

export interface UpdateOfficeroomRequest {
    id: number;
    officeroom: EntOfficeroom;
}

export interface UpdatePatientrightsRequest {
    id: number;
    patientrights: EntPatientrights;
}

export interface UpdatePatientrightstypeRequest {
    id: number;
    patientrightstype: EntPatientrightstype;
}

export interface UpdatePrenameRequest {
    id: number;
    prename: EntPrename;
}

export interface UpdateRegistrarRequest {
    id: number;
    registrar: EntRegistrar;
}

export interface UpdateSymptomseverityRequest {
    id: number;
    symptomseverity: EntSymptomseverity;
}

export interface UpdateTypetreatmentRequest {
    id: number;
    typetreatment: EntTypetreatment;
}

export interface UpdateUnpaybillRequest {
    id: number;
    unpaybill: EntUnpaybill;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

export interface UpdateUserstatusRequest {
    id: number;
    userstatus: EntUserstatus;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create abilitypatientrights
     * Create abilitypatientrights
     */
    async createAbilitypatientrightsRaw(requestParameters: CreateAbilitypatientrightsRequest): Promise<runtime.ApiResponse<EntAbilitypatientrights>> {
        if (requestParameters.abilitypatientrights === null || requestParameters.abilitypatientrights === undefined) {
            throw new runtime.RequiredError('abilitypatientrights','Required parameter requestParameters.abilitypatientrights was null or undefined when calling createAbilitypatientrights.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/abilitypatientrightss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntAbilitypatientrightsToJSON(requestParameters.abilitypatientrights),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAbilitypatientrightsFromJSON(jsonValue));
    }

    /**
     * Create abilitypatientrights
     * Create abilitypatientrights
     */
    async createAbilitypatientrights(requestParameters: CreateAbilitypatientrightsRequest): Promise<EntAbilitypatientrights> {
        const response = await this.createAbilitypatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create bill
     * Create bill
     */
    async createBillRaw(requestParameters: CreateBillRequest): Promise<runtime.ApiResponse<EntBill>> {
        if (requestParameters.bill === null || requestParameters.bill === undefined) {
            throw new runtime.RequiredError('bill','Required parameter requestParameters.bill was null or undefined when calling createBill.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bills`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersBillToJSON(requestParameters.bill),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBillFromJSON(jsonValue));
    }

    /**
     * Create bill
     * Create bill
     */
    async createBill(requestParameters: CreateBillRequest): Promise<EntBill> {
        const response = await this.createBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create department
     * Create department
     */
    async createDepartmentRaw(requestParameters: CreateDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.department === null || requestParameters.department === undefined) {
            throw new runtime.RequiredError('department','Required parameter requestParameters.department was null or undefined when calling createDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/department`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDepartmentToJSON(requestParameters.department),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * Create department
     * Create department
     */
    async createDepartment(requestParameters: CreateDepartmentRequest): Promise<EntDepartment> {
        const response = await this.createDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create doctorinfo
     * Create doctorinfo
     */
    async createDoctorinfoRaw(requestParameters: CreateDoctorinfoRequest): Promise<runtime.ApiResponse<EntDoctorinfo>> {
        if (requestParameters.doctorinfo === null || requestParameters.doctorinfo === undefined) {
            throw new runtime.RequiredError('doctorinfo','Required parameter requestParameters.doctorinfo was null or undefined when calling createDoctorinfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/doctorinfos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersDoctorinfoToJSON(requestParameters.doctorinfo),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorinfoFromJSON(jsonValue));
    }

    /**
     * Create doctorinfo
     * Create doctorinfo
     */
    async createDoctorinfo(requestParameters: CreateDoctorinfoRequest): Promise<EntDoctorinfo> {
        const response = await this.createDoctorinfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create educationlevel
     * Create educationlevel
     */
    async createEducationlevelRaw(requestParameters: CreateEducationlevelRequest): Promise<runtime.ApiResponse<EntEducationlevel>> {
        if (requestParameters.educationlevel === null || requestParameters.educationlevel === undefined) {
            throw new runtime.RequiredError('educationlevel','Required parameter requestParameters.educationlevel was null or undefined when calling createEducationlevel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/educationlevels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntEducationlevelToJSON(requestParameters.educationlevel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEducationlevelFromJSON(jsonValue));
    }

    /**
     * Create educationlevel
     * Create educationlevel
     */
    async createEducationlevel(requestParameters: CreateEducationlevelRequest): Promise<EntEducationlevel> {
        const response = await this.createEducationlevelRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create historytaking
     * Create historytaking
     */
    async createHistorytakingRaw(requestParameters: CreateHistorytakingRequest): Promise<runtime.ApiResponse<EntHistorytaking>> {
        if (requestParameters.historytaking === null || requestParameters.historytaking === undefined) {
            throw new runtime.RequiredError('historytaking','Required parameter requestParameters.historytaking was null or undefined when calling createHistorytaking.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/historytaking`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersHistorytakingToJSON(requestParameters.historytaking),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntHistorytakingFromJSON(jsonValue));
    }

    /**
     * Create historytaking
     * Create historytaking
     */
    async createHistorytaking(requestParameters: CreateHistorytakingRequest): Promise<EntHistorytaking> {
        const response = await this.createHistorytakingRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Insurance
     * Create Insurance
     */
    async createInsuranceRaw(requestParameters: CreateInsuranceRequest): Promise<runtime.ApiResponse<EntInsurance>> {
        if (requestParameters.insurance === null || requestParameters.insurance === undefined) {
            throw new runtime.RequiredError('insurance','Required parameter requestParameters.insurance was null or undefined when calling createInsurance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Insurances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntInsuranceToJSON(requestParameters.insurance),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInsuranceFromJSON(jsonValue));
    }

    /**
     * Create Insurance
     * Create Insurance
     */
    async createInsurance(requestParameters: CreateInsuranceRequest): Promise<EntInsurance> {
        const response = await this.createInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create nurse
     * Create nurse
     */
    async createNurseRaw(requestParameters: CreateNurseRequest): Promise<runtime.ApiResponse<EntNurse>> {
        if (requestParameters.nurse === null || requestParameters.nurse === undefined) {
            throw new runtime.RequiredError('nurse','Required parameter requestParameters.nurse was null or undefined when calling createNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/nurse`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntNurseToJSON(requestParameters.nurse),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNurseFromJSON(jsonValue));
    }

    /**
     * Create nurse
     * Create nurse
     */
    async createNurse(requestParameters: CreateNurseRequest): Promise<EntNurse> {
        const response = await this.createNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create officeroom
     * Create officeroom
     */
    async createOfficeroomRaw(requestParameters: CreateOfficeroomRequest): Promise<runtime.ApiResponse<EntOfficeroom>> {
        if (requestParameters.officeroom === null || requestParameters.officeroom === undefined) {
            throw new runtime.RequiredError('officeroom','Required parameter requestParameters.officeroom was null or undefined when calling createOfficeroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/officerooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntOfficeroomToJSON(requestParameters.officeroom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOfficeroomFromJSON(jsonValue));
    }

    /**
     * Create officeroom
     * Create officeroom
     */
    async createOfficeroom(requestParameters: CreateOfficeroomRequest): Promise<EntOfficeroom> {
        const response = await this.createOfficeroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create patientrecord
     * Create patientrecord
     */
    async createPatientrecordRaw(requestParameters: CreatePatientrecordRequest): Promise<runtime.ApiResponse<EntPatientrecord>> {
        if (requestParameters.patientrecord === null || requestParameters.patientrecord === undefined) {
            throw new runtime.RequiredError('patientrecord','Required parameter requestParameters.patientrecord was null or undefined when calling createPatientrecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patientrecord`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPatientrecordToJSON(requestParameters.patientrecord),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientrecordFromJSON(jsonValue));
    }

    /**
     * Create patientrecord
     * Create patientrecord
     */
    async createPatientrecord(requestParameters: CreatePatientrecordRequest): Promise<EntPatientrecord> {
        const response = await this.createPatientrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Patientrights
     * Create Patientrights
     */
    async createPatientrightsRaw(requestParameters: CreatePatientrightsRequest): Promise<runtime.ApiResponse<ControllersPatientrights>> {
        if (requestParameters.patientrights === null || requestParameters.patientrights === undefined) {
            throw new runtime.RequiredError('patientrights','Required parameter requestParameters.patientrights was null or undefined when calling createPatientrights.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patientrightss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPatientrightsToJSON(requestParameters.patientrights),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersPatientrightsFromJSON(jsonValue));
    }

    /**
     * Create Patientrights
     * Create Patientrights
     */
    async createPatientrights(requestParameters: CreatePatientrightsRequest): Promise<ControllersPatientrights> {
        const response = await this.createPatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create patientrightstype
     * Create patientrightstype
     */
    async createPatientrightstypeRaw(requestParameters: CreatePatientrightstypeRequest): Promise<runtime.ApiResponse<EntPatientrightstype>> {
        if (requestParameters.patientrightstype === null || requestParameters.patientrightstype === undefined) {
            throw new runtime.RequiredError('patientrightstype','Required parameter requestParameters.patientrightstype was null or undefined when calling createPatientrightstype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patientrightstypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientrightstypeToJSON(requestParameters.patientrightstype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientrightstypeFromJSON(jsonValue));
    }

    /**
     * Create patientrightstype
     * Create patientrightstype
     */
    async createPatientrightstype(requestParameters: CreatePatientrightstypeRequest): Promise<EntPatientrightstype> {
        const response = await this.createPatientrightstypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create prename
     * Create prename
     */
    async createPrenameRaw(requestParameters: CreatePrenameRequest): Promise<runtime.ApiResponse<EntPrename>> {
        if (requestParameters.prename === null || requestParameters.prename === undefined) {
            throw new runtime.RequiredError('prename','Required parameter requestParameters.prename was null or undefined when calling createPrename.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Prenames`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPrenameToJSON(requestParameters.prename),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrenameFromJSON(jsonValue));
    }

    /**
     * Create prename
     * Create prename
     */
    async createPrename(requestParameters: CreatePrenameRequest): Promise<EntPrename> {
        const response = await this.createPrenameRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create registrar
     * Create registrar
     */
    async createRegistrarRaw(requestParameters: CreateRegistrarRequest): Promise<runtime.ApiResponse<EntRegistrar>> {
        if (requestParameters.registrar === null || requestParameters.registrar === undefined) {
            throw new runtime.RequiredError('registrar','Required parameter requestParameters.registrar was null or undefined when calling createRegistrar.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/registrars`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRegistrarToJSON(requestParameters.registrar),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRegistrarFromJSON(jsonValue));
    }

    /**
     * Create registrar
     * Create registrar
     */
    async createRegistrar(requestParameters: CreateRegistrarRequest): Promise<EntRegistrar> {
        const response = await this.createRegistrarRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create symptomseverity
     * Create symptomseverity
     */
    async createSymptomseverityRaw(requestParameters: CreateSymptomseverityRequest): Promise<runtime.ApiResponse<EntSymptomseverity>> {
        if (requestParameters.symptomseverity === null || requestParameters.symptomseverity === undefined) {
            throw new runtime.RequiredError('symptomseverity','Required parameter requestParameters.symptomseverity was null or undefined when calling createSymptomseverity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/symptomseverity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSymptomseverityToJSON(requestParameters.symptomseverity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSymptomseverityFromJSON(jsonValue));
    }

    /**
     * Create symptomseverity
     * Create symptomseverity
     */
    async createSymptomseverity(requestParameters: CreateSymptomseverityRequest): Promise<EntSymptomseverity> {
        const response = await this.createSymptomseverityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Treatment
     * Create Treatment
     */
    async createTreatmentRaw(requestParameters: CreateTreatmentRequest): Promise<runtime.ApiResponse<EntTreatment>> {
        if (requestParameters.treatment === null || requestParameters.treatment === undefined) {
            throw new runtime.RequiredError('treatment','Required parameter requestParameters.treatment was null or undefined when calling createTreatment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Treatments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersTreatmentToJSON(requestParameters.treatment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTreatmentFromJSON(jsonValue));
    }

    /**
     * Create Treatment
     * Create Treatment
     */
    async createTreatment(requestParameters: CreateTreatmentRequest): Promise<EntTreatment> {
        const response = await this.createTreatmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Typetreatment
     * Create Typetreatment
     */
    async createTypetreatmentRaw(requestParameters: CreateTypetreatmentRequest): Promise<runtime.ApiResponse<EntTypetreatment>> {
        if (requestParameters.typetreatment === null || requestParameters.typetreatment === undefined) {
            throw new runtime.RequiredError('typetreatment','Required parameter requestParameters.typetreatment was null or undefined when calling createTypetreatment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Typetreatments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntTypetreatmentToJSON(requestParameters.typetreatment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTypetreatmentFromJSON(jsonValue));
    }

    /**
     * Create Typetreatment
     * Create Typetreatment
     */
    async createTypetreatment(requestParameters: CreateTypetreatmentRequest): Promise<EntTypetreatment> {
        const response = await this.createTypetreatmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create userstatus
     * Create userstatus
     */
    async createUserstatusRaw(requestParameters: CreateUserstatusRequest): Promise<runtime.ApiResponse<EntUserstatus>> {
        if (requestParameters.userstatus === null || requestParameters.userstatus === undefined) {
            throw new runtime.RequiredError('userstatus','Required parameter requestParameters.userstatus was null or undefined when calling createUserstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/userstatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserstatusToJSON(requestParameters.userstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserstatusFromJSON(jsonValue));
    }

    /**
     * Create userstatus
     * Create userstatus
     */
    async createUserstatus(requestParameters: CreateUserstatusRequest): Promise<EntUserstatus> {
        const response = await this.createUserstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get abilitypatientrights by ID
     * Delete a abilitypatientrights entity by ID
     */
    async deleteAbilitypatientrightsRaw(requestParameters: DeleteAbilitypatientrightsRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAbilitypatientrights.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/abilitypatientrightss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get abilitypatientrights by ID
     * Delete a abilitypatientrights entity by ID
     */
    async deleteAbilitypatientrights(requestParameters: DeleteAbilitypatientrightsRequest): Promise<object> {
        const response = await this.deleteAbilitypatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bill by ID
     * Delete a bill entity by ID
     */
    async deleteBillRaw(requestParameters: DeleteBillRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBill.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get bill by ID
     * Delete a bill entity by ID
     */
    async deleteBill(requestParameters: DeleteBillRequest): Promise<object> {
        const response = await this.deleteBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * get department by ID
     * Delete a department entity by ID
     */
    async deleteDepartmentRaw(requestParameters: DeleteDepartmentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/department/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get department by ID
     * Delete a department entity by ID
     */
    async deleteDepartment(requestParameters: DeleteDepartmentRequest): Promise<object> {
        const response = await this.deleteDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get doctorinfo by ID
     * Delete a doctorinfo entity by ID
     */
    async deleteDoctorinfoRaw(requestParameters: DeleteDoctorinfoRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDoctorinfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctorinfos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get doctorinfo by ID
     * Delete a doctorinfo entity by ID
     */
    async deleteDoctorinfo(requestParameters: DeleteDoctorinfoRequest): Promise<object> {
        const response = await this.deleteDoctorinfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * get educationlevel by ID
     * Delete a educationlevel entity by ID
     */
    async deleteEducationlevelRaw(requestParameters: DeleteEducationlevelRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEducationlevel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/educationlevels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get educationlevel by ID
     * Delete a educationlevel entity by ID
     */
    async deleteEducationlevel(requestParameters: DeleteEducationlevelRequest): Promise<object> {
        const response = await this.deleteEducationlevelRaw(requestParameters);
        return await response.value();
    }

    /**
     * get nurse by ID
     * Delete a nurse entity by ID
     */
    async deleteNurseRaw(requestParameters: DeleteNurseRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nurse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get nurse by ID
     * Delete a nurse entity by ID
     */
    async deleteNurse(requestParameters: DeleteNurseRequest): Promise<object> {
        const response = await this.deleteNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get officeroom by ID
     * Delete a officeroom entity by ID
     */
    async deleteOfficeroomRaw(requestParameters: DeleteOfficeroomRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOfficeroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/officerooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get officeroom by ID
     * Delete a officeroom entity by ID
     */
    async deleteOfficeroom(requestParameters: DeleteOfficeroomRequest): Promise<object> {
        const response = await this.deleteOfficeroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patientrights by ID
     * Delete a patientrights entity by ID
     */
    async deletePatientrightsRaw(requestParameters: DeletePatientrightsRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatientrights.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrightss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get patientrights by ID
     * Delete a patientrights entity by ID
     */
    async deletePatientrights(requestParameters: DeletePatientrightsRequest): Promise<object> {
        const response = await this.deletePatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patientrightstype by ID
     * Delete a patientrightstype entity by ID
     */
    async deletePatientrightstypeRaw(requestParameters: DeletePatientrightstypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatientrightstype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrightstypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get patientrightstype by ID
     * Delete a patientrightstype entity by ID
     */
    async deletePatientrightstype(requestParameters: DeletePatientrightstypeRequest): Promise<object> {
        const response = await this.deletePatientrightstypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get prename by ID
     * Delete a prename entity by ID
     */
    async deletePrenameRaw(requestParameters: DeletePrenameRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePrename.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prenames/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get prename by ID
     * Delete a prename entity by ID
     */
    async deletePrename(requestParameters: DeletePrenameRequest): Promise<object> {
        const response = await this.deletePrenameRaw(requestParameters);
        return await response.value();
    }

    /**
     * get registrar by ID
     * Delete a registrar entity by ID
     */
    async deleteRegistrarRaw(requestParameters: DeleteRegistrarRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRegistrar.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/registrars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get registrar by ID
     * Delete a registrar entity by ID
     */
    async deleteRegistrar(requestParameters: DeleteRegistrarRequest): Promise<object> {
        const response = await this.deleteRegistrarRaw(requestParameters);
        return await response.value();
    }

    /**
     * get symptomseverity by ID
     * Delete a symptomseverity entity by ID
     */
    async deleteSymptomseverityRaw(requestParameters: DeleteSymptomseverityRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSymptomseverity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/symptomseverity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get symptomseverity by ID
     * Delete a symptomseverity entity by ID
     */
    async deleteSymptomseverity(requestParameters: DeleteSymptomseverityRequest): Promise<object> {
        const response = await this.deleteSymptomseverityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Treatment by ID
     * Delete a Treatment entity by ID
     */
    async deleteTreatmentRaw(requestParameters: DeleteTreatmentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTreatment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Treatments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get Treatment by ID
     * Delete a Treatment entity by ID
     */
    async deleteTreatment(requestParameters: DeleteTreatmentRequest): Promise<object> {
        const response = await this.deleteTreatmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get unpaybill by ID
     * Delete a unpaybill entity by ID
     */
    async deleteUnpaybillRaw(requestParameters: DeleteUnpaybillRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUnpaybill.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/unpaybills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get unpaybill by ID
     * Delete a unpaybill entity by ID
     */
    async deleteUnpaybill(requestParameters: DeleteUnpaybillRequest): Promise<object> {
        const response = await this.deleteUnpaybillRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get userstatus by ID
     * Delete a userstatus entity by ID
     */
    async deleteUserstatusRaw(requestParameters: DeleteUserstatusRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUserstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/userstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get userstatus by ID
     * Delete a userstatus entity by ID
     */
    async deleteUserstatus(requestParameters: DeleteUserstatusRequest): Promise<object> {
        const response = await this.deleteUserstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get abilitypatientrights by ID
     * Get a abilitypatientrights entity by ID
     */
    async getAbilitypatientrightsRaw(requestParameters: GetAbilitypatientrightsRequest): Promise<runtime.ApiResponse<EntAbilitypatientrights>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAbilitypatientrights.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/abilitypatientrightss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAbilitypatientrightsFromJSON(jsonValue));
    }

    /**
     * get abilitypatientrights by ID
     * Get a abilitypatientrights entity by ID
     */
    async getAbilitypatientrights(requestParameters: GetAbilitypatientrightsRequest): Promise<EntAbilitypatientrights> {
        const response = await this.getAbilitypatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bill by ID
     * Get a bill entity by ID
     */
    async getBillRaw(requestParameters: GetBillRequest): Promise<runtime.ApiResponse<EntBill>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBill.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBillFromJSON(jsonValue));
    }

    /**
     * get bill by ID
     * Get a bill entity by ID
     */
    async getBill(requestParameters: GetBillRequest): Promise<EntBill> {
        const response = await this.getBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * get department by ID
     * Get a department entity by ID
     */
    async getDepartmentRaw(requestParameters: GetDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/department/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * get department by ID
     * Get a department entity by ID
     */
    async getDepartment(requestParameters: GetDepartmentRequest): Promise<EntDepartment> {
        const response = await this.getDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get doctorinfo by ID
     * Get a doctorinfo entity by ID
     */
    async getDoctorinfoRaw(requestParameters: GetDoctorinfoRequest): Promise<runtime.ApiResponse<EntDoctorinfo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDoctorinfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctorinfos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorinfoFromJSON(jsonValue));
    }

    /**
     * get doctorinfo by ID
     * Get a doctorinfo entity by ID
     */
    async getDoctorinfo(requestParameters: GetDoctorinfoRequest): Promise<EntDoctorinfo> {
        const response = await this.getDoctorinfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * get educationlevel by ID
     * Get a educationlevel entity by ID
     */
    async getEducationlevelRaw(requestParameters: GetEducationlevelRequest): Promise<runtime.ApiResponse<EntEducationlevel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEducationlevel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/educationlevels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEducationlevelFromJSON(jsonValue));
    }

    /**
     * get educationlevel by ID
     * Get a educationlevel entity by ID
     */
    async getEducationlevel(requestParameters: GetEducationlevelRequest): Promise<EntEducationlevel> {
        const response = await this.getEducationlevelRaw(requestParameters);
        return await response.value();
    }

    /**
     * get financier by ID
     * Get a financier entity by ID
     */
    async getFinancierRaw(requestParameters: GetFinancierRequest): Promise<runtime.ApiResponse<EntFinancier>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFinancier.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financiers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFinancierFromJSON(jsonValue));
    }

    /**
     * get financier by ID
     * Get a financier entity by ID
     */
    async getFinancier(requestParameters: GetFinancierRequest): Promise<EntFinancier> {
        const response = await this.getFinancierRaw(requestParameters);
        return await response.value();
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGenderRaw(requestParameters: GetGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Gender/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGender(requestParameters: GetGenderRequest): Promise<EntGender> {
        const response = await this.getGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get historytaking by ID
     * Get a historytaking entity by ID
     */
    async getHistorytakingRaw(requestParameters: GetHistorytakingRequest): Promise<runtime.ApiResponse<EntHistorytaking>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getHistorytaking.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/historytaking/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntHistorytakingFromJSON(jsonValue));
    }

    /**
     * get historytaking by ID
     * Get a historytaking entity by ID
     */
    async getHistorytaking(requestParameters: GetHistorytakingRequest): Promise<EntHistorytaking> {
        const response = await this.getHistorytakingRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Insurance by ID
     * Get a Insurance entity by ID
     */
    async getInsuranceRaw(requestParameters: GetInsuranceRequest): Promise<runtime.ApiResponse<EntInsurance>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getInsurance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/insurances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInsuranceFromJSON(jsonValue));
    }

    /**
     * get Insurance by ID
     * Get a Insurance entity by ID
     */
    async getInsurance(requestParameters: GetInsuranceRequest): Promise<EntInsurance> {
        const response = await this.getInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get medicalrecordstaff by ID
     * Get a medicalrecordstaff entity by ID
     */
    async getMedicalrecordstaffRaw(requestParameters: GetMedicalrecordstaffRequest): Promise<runtime.ApiResponse<EntMedicalrecordstaff>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMedicalrecordstaff.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Medicalrecordstaff/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicalrecordstaffFromJSON(jsonValue));
    }

    /**
     * get medicalrecordstaff by ID
     * Get a medicalrecordstaff entity by ID
     */
    async getMedicalrecordstaff(requestParameters: GetMedicalrecordstaffRequest): Promise<EntMedicalrecordstaff> {
        const response = await this.getMedicalrecordstaffRaw(requestParameters);
        return await response.value();
    }

    /**
     * get nurse by ID
     * Get a nurse entity by ID
     */
    async getNurseRaw(requestParameters: GetNurseRequest): Promise<runtime.ApiResponse<EntNurse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nurse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNurseFromJSON(jsonValue));
    }

    /**
     * get nurse by ID
     * Get a nurse entity by ID
     */
    async getNurse(requestParameters: GetNurseRequest): Promise<EntNurse> {
        const response = await this.getNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get officeroom by ID
     * Get a officeroom entity by ID
     */
    async getOfficeroomRaw(requestParameters: GetOfficeroomRequest): Promise<runtime.ApiResponse<EntOfficeroom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOfficeroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/officerooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOfficeroomFromJSON(jsonValue));
    }

    /**
     * get officeroom by ID
     * Get a officeroom entity by ID
     */
    async getOfficeroom(requestParameters: GetOfficeroomRequest): Promise<EntOfficeroom> {
        const response = await this.getOfficeroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patientrecord by ID
     * Get a patientrecord entity by ID
     */
    async getPatientrecordRaw(requestParameters: GetPatientrecordRequest): Promise<runtime.ApiResponse<EntPatientrecord>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatientrecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrecord/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientrecordFromJSON(jsonValue));
    }

    /**
     * get patientrecord by ID
     * Get a patientrecord entity by ID
     */
    async getPatientrecord(requestParameters: GetPatientrecordRequest): Promise<EntPatientrecord> {
        const response = await this.getPatientrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Patientrights by ID
     * Get a Patientrights entity by ID
     */
    async getPatientrightsRaw(requestParameters: GetPatientrightsRequest): Promise<runtime.ApiResponse<EntPatientrights>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatientrights.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrightss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientrightsFromJSON(jsonValue));
    }

    /**
     * get Patientrights by ID
     * Get a Patientrights entity by ID
     */
    async getPatientrights(requestParameters: GetPatientrightsRequest): Promise<EntPatientrights> {
        const response = await this.getPatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patientrightstype by ID
     * Get a patientrightstype entity by ID
     */
    async getPatientrightstypeRaw(requestParameters: GetPatientrightstypeRequest): Promise<runtime.ApiResponse<EntPatientrightstype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatientrightstype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrightstypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientrightstypeFromJSON(jsonValue));
    }

    /**
     * get patientrightstype by ID
     * Get a patientrightstype entity by ID
     */
    async getPatientrightstype(requestParameters: GetPatientrightstypeRequest): Promise<EntPatientrightstype> {
        const response = await this.getPatientrightstypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get paytype by ID
     * Get a paytype entity by ID
     */
    async getPaytypeRaw(requestParameters: GetPaytypeRequest): Promise<runtime.ApiResponse<EntPaytype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPaytype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paytypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaytypeFromJSON(jsonValue));
    }

    /**
     * get paytype by ID
     * Get a paytype entity by ID
     */
    async getPaytype(requestParameters: GetPaytypeRequest): Promise<EntPaytype> {
        const response = await this.getPaytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get prename by ID
     * Get a prename entity by ID
     */
    async getPrenameRaw(requestParameters: GetPrenameRequest): Promise<runtime.ApiResponse<EntPrename>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPrename.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prenames/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrenameFromJSON(jsonValue));
    }

    /**
     * get prename by ID
     * Get a prename entity by ID
     */
    async getPrename(requestParameters: GetPrenameRequest): Promise<EntPrename> {
        const response = await this.getPrenameRaw(requestParameters);
        return await response.value();
    }

    /**
     * get registrar by ID
     * Get a registrar entity by ID
     */
    async getRegistrarRaw(requestParameters: GetRegistrarRequest): Promise<runtime.ApiResponse<EntRegistrar>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRegistrar.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/registrars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRegistrarFromJSON(jsonValue));
    }

    /**
     * get registrar by ID
     * Get a registrar entity by ID
     */
    async getRegistrar(requestParameters: GetRegistrarRequest): Promise<EntRegistrar> {
        const response = await this.getRegistrarRaw(requestParameters);
        return await response.value();
    }

    /**
     * get symptomseverity by ID
     * Get a symptomseverity entity by ID
     */
    async getSymptomseverityRaw(requestParameters: GetSymptomseverityRequest): Promise<runtime.ApiResponse<EntSymptomseverity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSymptomseverity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/symptomseverity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSymptomseverityFromJSON(jsonValue));
    }

    /**
     * get symptomseverity by ID
     * Get a symptomseverity entity by ID
     */
    async getSymptomseverity(requestParameters: GetSymptomseverityRequest): Promise<EntSymptomseverity> {
        const response = await this.getSymptomseverityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Treatment by ID
     * Get a Treatment entity by ID
     */
    async getTreatmentRaw(requestParameters: GetTreatmentRequest): Promise<runtime.ApiResponse<EntTreatment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTreatment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Treatments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTreatmentFromJSON(jsonValue));
    }

    /**
     * get Treatment by ID
     * Get a Treatment entity by ID
     */
    async getTreatment(requestParameters: GetTreatmentRequest): Promise<EntTreatment> {
        const response = await this.getTreatmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Typetreatment by ID
     * Get a Typetreatment entity by ID
     */
    async getTypetreatmentRaw(requestParameters: GetTypetreatmentRequest): Promise<runtime.ApiResponse<EntTypetreatment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTypetreatment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Typetreatments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTypetreatmentFromJSON(jsonValue));
    }

    /**
     * get Typetreatment by ID
     * Get a Typetreatment entity by ID
     */
    async getTypetreatment(requestParameters: GetTypetreatmentRequest): Promise<EntTypetreatment> {
        const response = await this.getTypetreatmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get unpaybill by ID
     * Get a unpaybill entity by ID
     */
    async getUnpaybillRaw(requestParameters: GetUnpaybillRequest): Promise<runtime.ApiResponse<EntUnpaybill>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUnpaybill.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/unpaybills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUnpaybillFromJSON(jsonValue));
    }

    /**
     * get unpaybill by ID
     * Get a unpaybill entity by ID
     */
    async getUnpaybill(requestParameters: GetUnpaybillRequest): Promise<EntUnpaybill> {
        const response = await this.getUnpaybillRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get userstatus by ID
     * Get a userstatus entity by ID
     */
    async getUserstatusRaw(requestParameters: GetUserstatusRequest): Promise<runtime.ApiResponse<EntUserstatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/userstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserstatusFromJSON(jsonValue));
    }

    /**
     * get userstatus by ID
     * Get a userstatus entity by ID
     */
    async getUserstatus(requestParameters: GetUserstatusRequest): Promise<EntUserstatus> {
        const response = await this.getUserstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * list abilitypatientrights entities
     * List abilitypatientrights entities
     */
    async listAbilitypatientrightsRaw(requestParameters: ListAbilitypatientrightsRequest): Promise<runtime.ApiResponse<Array<EntAbilitypatientrights>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/abilitypatientrightss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntAbilitypatientrightsFromJSON));
    }

    /**
     * list abilitypatientrights entities
     * List abilitypatientrights entities
     */
    async listAbilitypatientrights(requestParameters: ListAbilitypatientrightsRequest): Promise<Array<EntAbilitypatientrights>> {
        const response = await this.listAbilitypatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * list bill entities
     * List bill entities
     */
    async listBillRaw(requestParameters: ListBillRequest): Promise<runtime.ApiResponse<Array<EntBill>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bills`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBillFromJSON));
    }

    /**
     * list bill entities
     * List bill entities
     */
    async listBill(requestParameters: ListBillRequest): Promise<Array<EntBill>> {
        const response = await this.listBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartmentRaw(requestParameters: ListDepartmentRequest): Promise<runtime.ApiResponse<Array<EntDepartment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/department`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDepartmentFromJSON));
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartment(requestParameters: ListDepartmentRequest): Promise<Array<EntDepartment>> {
        const response = await this.listDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list doctorinfo entities
     * List doctorinfo entities
     */
    async listDoctorinfoRaw(requestParameters: ListDoctorinfoRequest): Promise<runtime.ApiResponse<Array<EntDoctorinfo>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctorinfos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDoctorinfoFromJSON));
    }

    /**
     * list doctorinfo entities
     * List doctorinfo entities
     */
    async listDoctorinfo(requestParameters: ListDoctorinfoRequest): Promise<Array<EntDoctorinfo>> {
        const response = await this.listDoctorinfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * list educationlevel entities
     * List educationlevel entities
     */
    async listEducationlevelRaw(requestParameters: ListEducationlevelRequest): Promise<runtime.ApiResponse<Array<EntEducationlevel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/educationlevels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEducationlevelFromJSON));
    }

    /**
     * list educationlevel entities
     * List educationlevel entities
     */
    async listEducationlevel(requestParameters: ListEducationlevelRequest): Promise<Array<EntEducationlevel>> {
        const response = await this.listEducationlevelRaw(requestParameters);
        return await response.value();
    }

    /**
     * list financier entities
     * List financier entities
     */
    async listFinancierRaw(): Promise<runtime.ApiResponse<Array<EntFinancier>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFinancierFromJSON));
    }

    /**
     * list financier entities
     * List financier entities
     */
    async listFinancier(): Promise<Array<EntFinancier>> {
        const response = await this.listFinancierRaw();
        return await response.value();
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGenderRaw(requestParameters: ListGenderRequest): Promise<runtime.ApiResponse<Array<EntGender>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gender`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntGenderFromJSON));
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGender(requestParameters: ListGenderRequest): Promise<Array<EntGender>> {
        const response = await this.listGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * list historytaking entities
     * List historytaking entities
     */
    async listHistorytakingRaw(requestParameters: ListHistorytakingRequest): Promise<runtime.ApiResponse<Array<EntHistorytaking>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/historytaking`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntHistorytakingFromJSON));
    }

    /**
     * list historytaking entities
     * List historytaking entities
     */
    async listHistorytaking(requestParameters: ListHistorytakingRequest): Promise<Array<EntHistorytaking>> {
        const response = await this.listHistorytakingRaw(requestParameters);
        return await response.value();
    }

    /**
     * list insurance entities
     * List insurance entities
     */
    async listInsuranceRaw(requestParameters: ListInsuranceRequest): Promise<runtime.ApiResponse<Array<EntInsurance>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/insurances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntInsuranceFromJSON));
    }

    /**
     * list insurance entities
     * List insurance entities
     */
    async listInsurance(requestParameters: ListInsuranceRequest): Promise<Array<EntInsurance>> {
        const response = await this.listInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list medicalrecordstaff entities
     * List medicalrecordstaff entities
     */
    async listMedicalrecordstaffRaw(requestParameters: ListMedicalrecordstaffRequest): Promise<runtime.ApiResponse<Array<EntMedicalrecordstaff>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicalrecordstaff`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMedicalrecordstaffFromJSON));
    }

    /**
     * list medicalrecordstaff entities
     * List medicalrecordstaff entities
     */
    async listMedicalrecordstaff(requestParameters: ListMedicalrecordstaffRequest): Promise<Array<EntMedicalrecordstaff>> {
        const response = await this.listMedicalrecordstaffRaw(requestParameters);
        return await response.value();
    }

    /**
     * list nurse entities
     * List nurse entities
     */
    async listNurseRaw(requestParameters: ListNurseRequest): Promise<runtime.ApiResponse<Array<EntNurse>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nurse`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntNurseFromJSON));
    }

    /**
     * list nurse entities
     * List nurse entities
     */
    async listNurse(requestParameters: ListNurseRequest): Promise<Array<EntNurse>> {
        const response = await this.listNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list officeroom entities
     * List officeroom entities
     */
    async listOfficeroomRaw(requestParameters: ListOfficeroomRequest): Promise<runtime.ApiResponse<Array<EntOfficeroom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/officerooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntOfficeroomFromJSON));
    }

    /**
     * list officeroom entities
     * List officeroom entities
     */
    async listOfficeroom(requestParameters: ListOfficeroomRequest): Promise<Array<EntOfficeroom>> {
        const response = await this.listOfficeroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patientrecord entities
     * List patientrecord entities
     */
    async listPatientrecordRaw(requestParameters: ListPatientrecordRequest): Promise<runtime.ApiResponse<Array<EntPatientrecord>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrecord`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientrecordFromJSON));
    }

    /**
     * list patientrecord entities
     * List patientrecord entities
     */
    async listPatientrecord(requestParameters: ListPatientrecordRequest): Promise<Array<EntPatientrecord>> {
        const response = await this.listPatientrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patientrights entities
     * List patientrights entities
     */
    async listPatientrightsRaw(requestParameters: ListPatientrightsRequest): Promise<runtime.ApiResponse<Array<EntPatientrights>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrightss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientrightsFromJSON));
    }

    /**
     * list patientrights entities
     * List patientrights entities
     */
    async listPatientrights(requestParameters: ListPatientrightsRequest): Promise<Array<EntPatientrights>> {
        const response = await this.listPatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patientrightstype entities
     * List patientrightstype entities
     */
    async listPatientrightstypeRaw(requestParameters: ListPatientrightstypeRequest): Promise<runtime.ApiResponse<Array<EntPatientrightstype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrightstypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientrightstypeFromJSON));
    }

    /**
     * list patientrightstype entities
     * List patientrightstype entities
     */
    async listPatientrightstype(requestParameters: ListPatientrightstypeRequest): Promise<Array<EntPatientrightstype>> {
        const response = await this.listPatientrightstypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list paytype entities
     * List paytype entities
     */
    async listPaytypeRaw(): Promise<runtime.ApiResponse<Array<EntPaytype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paytypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPaytypeFromJSON));
    }

    /**
     * list paytype entities
     * List paytype entities
     */
    async listPaytype(): Promise<Array<EntPaytype>> {
        const response = await this.listPaytypeRaw();
        return await response.value();
    }

    /**
     * list prename entities
     * List prename entities
     */
    async listPrenameRaw(requestParameters: ListPrenameRequest): Promise<runtime.ApiResponse<Array<EntPrename>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prenames`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPrenameFromJSON));
    }

    /**
     * list prename entities
     * List prename entities
     */
    async listPrename(requestParameters: ListPrenameRequest): Promise<Array<EntPrename>> {
        const response = await this.listPrenameRaw(requestParameters);
        return await response.value();
    }

    /**
     * list registrar entities
     * List registrar entities
     */
    async listRegistrarRaw(requestParameters: ListRegistrarRequest): Promise<runtime.ApiResponse<Array<EntRegistrar>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/registrars`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRegistrarFromJSON));
    }

    /**
     * list registrar entities
     * List registrar entities
     */
    async listRegistrar(requestParameters: ListRegistrarRequest): Promise<Array<EntRegistrar>> {
        const response = await this.listRegistrarRaw(requestParameters);
        return await response.value();
    }

    /**
     * list symptomseverity entities
     * List symptomseverity entities
     */
    async listSymptomseverityRaw(requestParameters: ListSymptomseverityRequest): Promise<runtime.ApiResponse<Array<EntSymptomseverity>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/symptomseverity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSymptomseverityFromJSON));
    }

    /**
     * list symptomseverity entities
     * List symptomseverity entities
     */
    async listSymptomseverity(requestParameters: ListSymptomseverityRequest): Promise<Array<EntSymptomseverity>> {
        const response = await this.listSymptomseverityRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Treatment entities
     * List Treatment entities
     */
    async listTreatmentRaw(requestParameters: ListTreatmentRequest): Promise<runtime.ApiResponse<Array<EntTreatment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Treatments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntTreatmentFromJSON));
    }

    /**
     * list Treatment entities
     * List Treatment entities
     */
    async listTreatment(requestParameters: ListTreatmentRequest): Promise<Array<EntTreatment>> {
        const response = await this.listTreatmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Typetreatment entities
     * List Typetreatment entities
     */
    async listTypetreatmentRaw(requestParameters: ListTypetreatmentRequest): Promise<runtime.ApiResponse<Array<EntTypetreatment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Typetreatments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntTypetreatmentFromJSON));
    }

    /**
     * list Typetreatment entities
     * List Typetreatment entities
     */
    async listTypetreatment(requestParameters: ListTypetreatmentRequest): Promise<Array<EntTypetreatment>> {
        const response = await this.listTypetreatmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list unpaybill entities
     * List unpaybill entities
     */
    async listUnpaybillRaw(): Promise<runtime.ApiResponse<Array<EntUnpaybill>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/unpaybills`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUnpaybillFromJSON));
    }

    /**
     * list unpaybill entities
     * List unpaybill entities
     */
    async listUnpaybill(): Promise<Array<EntUnpaybill>> {
        const response = await this.listUnpaybillRaw();
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list userstatus entities
     * List userstatus entities
     */
    async listUserstatusRaw(requestParameters: ListUserstatusRequest): Promise<runtime.ApiResponse<Array<EntUserstatus>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/userstatus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserstatusFromJSON));
    }

    /**
     * list userstatus entities
     * List userstatus entities
     */
    async listUserstatus(requestParameters: ListUserstatusRequest): Promise<Array<EntUserstatus>> {
        const response = await this.listUserstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * update abilitypatientrights by ID
     * Update a abilitypatientrights entity by ID
     */
    async updateAbilitypatientrightsRaw(requestParameters: UpdateAbilitypatientrightsRequest): Promise<runtime.ApiResponse<EntAbilitypatientrights>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAbilitypatientrights.');
        }

        if (requestParameters.abilitypatientrights === null || requestParameters.abilitypatientrights === undefined) {
            throw new runtime.RequiredError('abilitypatientrights','Required parameter requestParameters.abilitypatientrights was null or undefined when calling updateAbilitypatientrights.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/abilitypatientrightss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntAbilitypatientrightsToJSON(requestParameters.abilitypatientrights),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAbilitypatientrightsFromJSON(jsonValue));
    }

    /**
     * update abilitypatientrights by ID
     * Update a abilitypatientrights entity by ID
     */
    async updateAbilitypatientrights(requestParameters: UpdateAbilitypatientrightsRequest): Promise<EntAbilitypatientrights> {
        const response = await this.updateAbilitypatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * update department by ID
     * Update a department entity by ID
     */
    async updateDepartmentRaw(requestParameters: UpdateDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDepartment.');
        }

        if (requestParameters.department === null || requestParameters.department === undefined) {
            throw new runtime.RequiredError('department','Required parameter requestParameters.department was null or undefined when calling updateDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/department/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDepartmentToJSON(requestParameters.department),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * update department by ID
     * Update a department entity by ID
     */
    async updateDepartment(requestParameters: UpdateDepartmentRequest): Promise<EntDepartment> {
        const response = await this.updateDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * update doctorinfo by ID
     * Update a doctorinfo entity by ID
     */
    async updateDoctorinfoRaw(requestParameters: UpdateDoctorinfoRequest): Promise<runtime.ApiResponse<EntDoctorinfo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDoctorinfo.');
        }

        if (requestParameters.doctorinfo === null || requestParameters.doctorinfo === undefined) {
            throw new runtime.RequiredError('doctorinfo','Required parameter requestParameters.doctorinfo was null or undefined when calling updateDoctorinfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/doctorinfos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDoctorinfoToJSON(requestParameters.doctorinfo),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorinfoFromJSON(jsonValue));
    }

    /**
     * update doctorinfo by ID
     * Update a doctorinfo entity by ID
     */
    async updateDoctorinfo(requestParameters: UpdateDoctorinfoRequest): Promise<EntDoctorinfo> {
        const response = await this.updateDoctorinfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * update educationlevel by ID
     * Update a educationlevel entity by ID
     */
    async updateEducationlevelRaw(requestParameters: UpdateEducationlevelRequest): Promise<runtime.ApiResponse<EntEducationlevel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateEducationlevel.');
        }

        if (requestParameters.educationlevel === null || requestParameters.educationlevel === undefined) {
            throw new runtime.RequiredError('educationlevel','Required parameter requestParameters.educationlevel was null or undefined when calling updateEducationlevel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/educationlevels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntEducationlevelToJSON(requestParameters.educationlevel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEducationlevelFromJSON(jsonValue));
    }

    /**
     * update educationlevel by ID
     * Update a educationlevel entity by ID
     */
    async updateEducationlevel(requestParameters: UpdateEducationlevelRequest): Promise<EntEducationlevel> {
        const response = await this.updateEducationlevelRaw(requestParameters);
        return await response.value();
    }

    /**
     * update insurance by ID
     * Update a insurance entity by ID
     */
    async updateInsuranceRaw(requestParameters: UpdateInsuranceRequest): Promise<runtime.ApiResponse<EntInsurance>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateInsurance.');
        }

        if (requestParameters.insurance === null || requestParameters.insurance === undefined) {
            throw new runtime.RequiredError('insurance','Required parameter requestParameters.insurance was null or undefined when calling updateInsurance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/insurances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntInsuranceToJSON(requestParameters.insurance),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInsuranceFromJSON(jsonValue));
    }

    /**
     * update insurance by ID
     * Update a insurance entity by ID
     */
    async updateInsurance(requestParameters: UpdateInsuranceRequest): Promise<EntInsurance> {
        const response = await this.updateInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * update nurse by ID
     * Update a nurse entity by ID
     */
    async updateNurseRaw(requestParameters: UpdateNurseRequest): Promise<runtime.ApiResponse<EntNurse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateNurse.');
        }

        if (requestParameters.nurse === null || requestParameters.nurse === undefined) {
            throw new runtime.RequiredError('nurse','Required parameter requestParameters.nurse was null or undefined when calling updateNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/nurse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntNurseToJSON(requestParameters.nurse),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNurseFromJSON(jsonValue));
    }

    /**
     * update nurse by ID
     * Update a nurse entity by ID
     */
    async updateNurse(requestParameters: UpdateNurseRequest): Promise<EntNurse> {
        const response = await this.updateNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * update officeroom by ID
     * Update a officeroom entity by ID
     */
    async updateOfficeroomRaw(requestParameters: UpdateOfficeroomRequest): Promise<runtime.ApiResponse<EntOfficeroom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOfficeroom.');
        }

        if (requestParameters.officeroom === null || requestParameters.officeroom === undefined) {
            throw new runtime.RequiredError('officeroom','Required parameter requestParameters.officeroom was null or undefined when calling updateOfficeroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/officerooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntOfficeroomToJSON(requestParameters.officeroom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOfficeroomFromJSON(jsonValue));
    }

    /**
     * update officeroom by ID
     * Update a officeroom entity by ID
     */
    async updateOfficeroom(requestParameters: UpdateOfficeroomRequest): Promise<EntOfficeroom> {
        const response = await this.updateOfficeroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * update patientrights by ID
     * Update a patientrights entity by ID
     */
    async updatePatientrightsRaw(requestParameters: UpdatePatientrightsRequest): Promise<runtime.ApiResponse<EntPatientrights>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePatientrights.');
        }

        if (requestParameters.patientrights === null || requestParameters.patientrights === undefined) {
            throw new runtime.RequiredError('patientrights','Required parameter requestParameters.patientrights was null or undefined when calling updatePatientrights.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patientrightss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientrightsToJSON(requestParameters.patientrights),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientrightsFromJSON(jsonValue));
    }

    /**
     * update patientrights by ID
     * Update a patientrights entity by ID
     */
    async updatePatientrights(requestParameters: UpdatePatientrightsRequest): Promise<EntPatientrights> {
        const response = await this.updatePatientrightsRaw(requestParameters);
        return await response.value();
    }

    /**
     * update patientrightstype by ID
     * Update a patientrightstype entity by ID
     */
    async updatePatientrightstypeRaw(requestParameters: UpdatePatientrightstypeRequest): Promise<runtime.ApiResponse<EntPatientrightstype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePatientrightstype.');
        }

        if (requestParameters.patientrightstype === null || requestParameters.patientrightstype === undefined) {
            throw new runtime.RequiredError('patientrightstype','Required parameter requestParameters.patientrightstype was null or undefined when calling updatePatientrightstype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patientrightstypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientrightstypeToJSON(requestParameters.patientrightstype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientrightstypeFromJSON(jsonValue));
    }

    /**
     * update patientrightstype by ID
     * Update a patientrightstype entity by ID
     */
    async updatePatientrightstype(requestParameters: UpdatePatientrightstypeRequest): Promise<EntPatientrightstype> {
        const response = await this.updatePatientrightstypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update prename by ID
     * Update a prename entity by ID
     */
    async updatePrenameRaw(requestParameters: UpdatePrenameRequest): Promise<runtime.ApiResponse<EntPrename>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePrename.');
        }

        if (requestParameters.prename === null || requestParameters.prename === undefined) {
            throw new runtime.RequiredError('prename','Required parameter requestParameters.prename was null or undefined when calling updatePrename.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/prenames/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPrenameToJSON(requestParameters.prename),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrenameFromJSON(jsonValue));
    }

    /**
     * update prename by ID
     * Update a prename entity by ID
     */
    async updatePrename(requestParameters: UpdatePrenameRequest): Promise<EntPrename> {
        const response = await this.updatePrenameRaw(requestParameters);
        return await response.value();
    }

    /**
     * update registrar by ID
     * Update a registrar entity by ID
     */
    async updateRegistrarRaw(requestParameters: UpdateRegistrarRequest): Promise<runtime.ApiResponse<EntRegistrar>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRegistrar.');
        }

        if (requestParameters.registrar === null || requestParameters.registrar === undefined) {
            throw new runtime.RequiredError('registrar','Required parameter requestParameters.registrar was null or undefined when calling updateRegistrar.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/registrars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRegistrarToJSON(requestParameters.registrar),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRegistrarFromJSON(jsonValue));
    }

    /**
     * update registrar by ID
     * Update a registrar entity by ID
     */
    async updateRegistrar(requestParameters: UpdateRegistrarRequest): Promise<EntRegistrar> {
        const response = await this.updateRegistrarRaw(requestParameters);
        return await response.value();
    }

    /**
     * update symptomseverity by ID
     * Update a symptomseverity entity by ID
     */
    async updateSymptomseverityRaw(requestParameters: UpdateSymptomseverityRequest): Promise<runtime.ApiResponse<EntSymptomseverity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSymptomseverity.');
        }

        if (requestParameters.symptomseverity === null || requestParameters.symptomseverity === undefined) {
            throw new runtime.RequiredError('symptomseverity','Required parameter requestParameters.symptomseverity was null or undefined when calling updateSymptomseverity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/symptomseverity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntSymptomseverityToJSON(requestParameters.symptomseverity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSymptomseverityFromJSON(jsonValue));
    }

    /**
     * update symptomseverity by ID
     * Update a symptomseverity entity by ID
     */
    async updateSymptomseverity(requestParameters: UpdateSymptomseverityRequest): Promise<EntSymptomseverity> {
        const response = await this.updateSymptomseverityRaw(requestParameters);
        return await response.value();
    }

    /**
     * update Typetreatment by ID
     * Update a Typetreatment entity by ID
     */
    async updateTypetreatmentRaw(requestParameters: UpdateTypetreatmentRequest): Promise<runtime.ApiResponse<EntTypetreatment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTypetreatment.');
        }

        if (requestParameters.typetreatment === null || requestParameters.typetreatment === undefined) {
            throw new runtime.RequiredError('typetreatment','Required parameter requestParameters.typetreatment was null or undefined when calling updateTypetreatment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Typetreatments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntTypetreatmentToJSON(requestParameters.typetreatment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTypetreatmentFromJSON(jsonValue));
    }

    /**
     * update Typetreatment by ID
     * Update a Typetreatment entity by ID
     */
    async updateTypetreatment(requestParameters: UpdateTypetreatmentRequest): Promise<EntTypetreatment> {
        const response = await this.updateTypetreatmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * update unpaybill by ID
     * Update a unpaybill entity by ID
     */
    async updateUnpaybillRaw(requestParameters: UpdateUnpaybillRequest): Promise<runtime.ApiResponse<EntUnpaybill>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUnpaybill.');
        }

        if (requestParameters.unpaybill === null || requestParameters.unpaybill === undefined) {
            throw new runtime.RequiredError('unpaybill','Required parameter requestParameters.unpaybill was null or undefined when calling updateUnpaybill.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/unpaybills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUnpaybillToJSON(requestParameters.unpaybill),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUnpaybillFromJSON(jsonValue));
    }

    /**
     * update unpaybill by ID
     * Update a unpaybill entity by ID
     */
    async updateUnpaybill(requestParameters: UpdateUnpaybillRequest): Promise<EntUnpaybill> {
        const response = await this.updateUnpaybillRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update userstatus by ID
     * Update a userstatus entity by ID
     */
    async updateUserstatusRaw(requestParameters: UpdateUserstatusRequest): Promise<runtime.ApiResponse<EntUserstatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUserstatus.');
        }

        if (requestParameters.userstatus === null || requestParameters.userstatus === undefined) {
            throw new runtime.RequiredError('userstatus','Required parameter requestParameters.userstatus was null or undefined when calling updateUserstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/userstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserstatusToJSON(requestParameters.userstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserstatusFromJSON(jsonValue));
    }

    /**
     * update userstatus by ID
     * Update a userstatus entity by ID
     */
    async updateUserstatus(requestParameters: UpdateUserstatusRequest): Promise<EntUserstatus> {
        const response = await this.updateUserstatusRaw(requestParameters);
        return await response.value();
    }

}
