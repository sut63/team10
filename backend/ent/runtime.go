// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/team10/app/ent/abilitypatientrights"
	"github.com/team10/app/ent/bill"
	"github.com/team10/app/ent/department"
	"github.com/team10/app/ent/doctorinfo"
	"github.com/team10/app/ent/educationlevel"
	"github.com/team10/app/ent/financier"
	"github.com/team10/app/ent/officeroom"
	"github.com/team10/app/ent/patientrecord"
	"github.com/team10/app/ent/patientrights"
	"github.com/team10/app/ent/paytype"
	"github.com/team10/app/ent/prename"
	"github.com/team10/app/ent/schema"
	"github.com/team10/app/ent/treatment"
	"github.com/team10/app/ent/typetreatment"
	"github.com/team10/app/ent/unpaybill"
	"github.com/team10/app/ent/user"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	abilitypatientrightsFields := schema.Abilitypatientrights{}.Fields()
	_ = abilitypatientrightsFields
	// abilitypatientrightsDescOperative is the schema descriptor for Operative field.
	abilitypatientrightsDescOperative := abilitypatientrightsFields[0].Descriptor()
	// abilitypatientrights.OperativeValidator is a validator for the "Operative" field. It is called by the builders before save.
	abilitypatientrights.OperativeValidator = func() func(int) error {
		validators := abilitypatientrightsDescOperative.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(_Operative int) error {
			for _, fn := range fns {
				if err := fn(_Operative); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// abilitypatientrightsDescMedicalSupplies is the schema descriptor for MedicalSupplies field.
	abilitypatientrightsDescMedicalSupplies := abilitypatientrightsFields[1].Descriptor()
	// abilitypatientrights.MedicalSuppliesValidator is a validator for the "MedicalSupplies" field. It is called by the builders before save.
	abilitypatientrights.MedicalSuppliesValidator = func() func(int) error {
		validators := abilitypatientrightsDescMedicalSupplies.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(_MedicalSupplies int) error {
			for _, fn := range fns {
				if err := fn(_MedicalSupplies); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// abilitypatientrightsDescExamine is the schema descriptor for Examine field.
	abilitypatientrightsDescExamine := abilitypatientrightsFields[2].Descriptor()
	// abilitypatientrights.ExamineValidator is a validator for the "Examine" field. It is called by the builders before save.
	abilitypatientrights.ExamineValidator = func() func(int) error {
		validators := abilitypatientrightsDescExamine.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(_Examine int) error {
			for _, fn := range fns {
				if err := fn(_Examine); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// abilitypatientrightsDescStayInHospital is the schema descriptor for StayInHospital field.
	abilitypatientrightsDescStayInHospital := abilitypatientrightsFields[3].Descriptor()
	// abilitypatientrights.StayInHospitalValidator is a validator for the "StayInHospital" field. It is called by the builders before save.
	abilitypatientrights.StayInHospitalValidator = func() func(int) error {
		validators := abilitypatientrightsDescStayInHospital.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(_StayInHospital int) error {
			for _, fn := range fns {
				if err := fn(_StayInHospital); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	billFields := schema.Bill{}.Fields()
	_ = billFields
	// billDescAmount is the schema descriptor for Amount field.
	billDescAmount := billFields[0].Descriptor()
	// bill.AmountValidator is a validator for the "Amount" field. It is called by the builders before save.
	bill.AmountValidator = billDescAmount.Validators[0].(func(int) error)
	// billDescPayer is the schema descriptor for Payer field.
	billDescPayer := billFields[1].Descriptor()
	// bill.PayerValidator is a validator for the "Payer" field. It is called by the builders before save.
	bill.PayerValidator = func() func(string) error {
		validators := billDescPayer.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Payer string) error {
			for _, fn := range fns {
				if err := fn(_Payer); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// billDescPayercontact is the schema descriptor for Payercontact field.
	billDescPayercontact := billFields[2].Descriptor()
	// bill.PayercontactValidator is a validator for the "Payercontact" field. It is called by the builders before save.
	bill.PayercontactValidator = func() func(string) error {
		validators := billDescPayercontact.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
			validators[3].(func(string) error),
		}
		return func(_Payercontact string) error {
			for _, fn := range fns {
				if err := fn(_Payercontact); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	departmentFields := schema.Department{}.Fields()
	_ = departmentFields
	// departmentDescDepartment is the schema descriptor for department field.
	departmentDescDepartment := departmentFields[0].Descriptor()
	// department.DepartmentValidator is a validator for the "department" field. It is called by the builders before save.
	department.DepartmentValidator = departmentDescDepartment.Validators[0].(func(string) error)
	doctorinfoFields := schema.Doctorinfo{}.Fields()
	_ = doctorinfoFields
	// doctorinfoDescDoctorname is the schema descriptor for doctorname field.
	doctorinfoDescDoctorname := doctorinfoFields[0].Descriptor()
	// doctorinfo.DoctornameValidator is a validator for the "doctorname" field. It is called by the builders before save.
	doctorinfo.DoctornameValidator = func() func(string) error {
		validators := doctorinfoDescDoctorname.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(doctorname string) error {
			for _, fn := range fns {
				if err := fn(doctorname); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// doctorinfoDescDoctorsurname is the schema descriptor for doctorsurname field.
	doctorinfoDescDoctorsurname := doctorinfoFields[1].Descriptor()
	// doctorinfo.DoctorsurnameValidator is a validator for the "doctorsurname" field. It is called by the builders before save.
	doctorinfo.DoctorsurnameValidator = func() func(string) error {
		validators := doctorinfoDescDoctorsurname.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(doctorsurname string) error {
			for _, fn := range fns {
				if err := fn(doctorsurname); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// doctorinfoDescTelephonenumber is the schema descriptor for telephonenumber field.
	doctorinfoDescTelephonenumber := doctorinfoFields[2].Descriptor()
	// doctorinfo.TelephonenumberValidator is a validator for the "telephonenumber" field. It is called by the builders before save.
	doctorinfo.TelephonenumberValidator = func() func(string) error {
		validators := doctorinfoDescTelephonenumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(telephonenumber string) error {
			for _, fn := range fns {
				if err := fn(telephonenumber); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// doctorinfoDescLicensenumber is the schema descriptor for licensenumber field.
	doctorinfoDescLicensenumber := doctorinfoFields[3].Descriptor()
	// doctorinfo.LicensenumberValidator is a validator for the "licensenumber" field. It is called by the builders before save.
	doctorinfo.LicensenumberValidator = func() func(string) error {
		validators := doctorinfoDescLicensenumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(licensenumber string) error {
			for _, fn := range fns {
				if err := fn(licensenumber); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	educationlevelFields := schema.Educationlevel{}.Fields()
	_ = educationlevelFields
	// educationlevelDescLevel is the schema descriptor for level field.
	educationlevelDescLevel := educationlevelFields[0].Descriptor()
	// educationlevel.LevelValidator is a validator for the "level" field. It is called by the builders before save.
	educationlevel.LevelValidator = educationlevelDescLevel.Validators[0].(func(string) error)
	financierFields := schema.Financier{}.Fields()
	_ = financierFields
	// financierDescName is the schema descriptor for name field.
	financierDescName := financierFields[0].Descriptor()
	// financier.NameValidator is a validator for the "name" field. It is called by the builders before save.
	financier.NameValidator = financierDescName.Validators[0].(func(string) error)
	officeroomFields := schema.Officeroom{}.Fields()
	_ = officeroomFields
	// officeroomDescRoomnumber is the schema descriptor for roomnumber field.
	officeroomDescRoomnumber := officeroomFields[0].Descriptor()
	// officeroom.RoomnumberValidator is a validator for the "roomnumber" field. It is called by the builders before save.
	officeroom.RoomnumberValidator = officeroomDescRoomnumber.Validators[0].(func(string) error)
	patientrecordFields := schema.Patientrecord{}.Fields()
	_ = patientrecordFields
	// patientrecordDescName is the schema descriptor for Name field.
	patientrecordDescName := patientrecordFields[0].Descriptor()
	// patientrecord.NameValidator is a validator for the "Name" field. It is called by the builders before save.
	patientrecord.NameValidator = func() func(string) error {
		validators := patientrecordDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Name string) error {
			for _, fn := range fns {
				if err := fn(_Name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// patientrecordDescIdcardnumber is the schema descriptor for Idcardnumber field.
	patientrecordDescIdcardnumber := patientrecordFields[1].Descriptor()
	// patientrecord.IdcardnumberValidator is a validator for the "Idcardnumber" field. It is called by the builders before save.
	patientrecord.IdcardnumberValidator = func() func(string) error {
		validators := patientrecordDescIdcardnumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(_Idcardnumber string) error {
			for _, fn := range fns {
				if err := fn(_Idcardnumber); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// patientrecordDescAge is the schema descriptor for Age field.
	patientrecordDescAge := patientrecordFields[2].Descriptor()
	// patientrecord.AgeValidator is a validator for the "Age" field. It is called by the builders before save.
	patientrecord.AgeValidator = patientrecordDescAge.Validators[0].(func(int) error)
	// patientrecordDescDisease is the schema descriptor for Disease field.
	patientrecordDescDisease := patientrecordFields[3].Descriptor()
	// patientrecord.DiseaseValidator is a validator for the "Disease" field. It is called by the builders before save.
	patientrecord.DiseaseValidator = func() func(string) error {
		validators := patientrecordDescDisease.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Disease string) error {
			for _, fn := range fns {
				if err := fn(_Disease); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// patientrecordDescAllergic is the schema descriptor for Allergic field.
	patientrecordDescAllergic := patientrecordFields[4].Descriptor()
	// patientrecord.AllergicValidator is a validator for the "Allergic" field. It is called by the builders before save.
	patientrecord.AllergicValidator = func() func(string) error {
		validators := patientrecordDescAllergic.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Allergic string) error {
			for _, fn := range fns {
				if err := fn(_Allergic); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// patientrecordDescPhonenumber is the schema descriptor for Phonenumber field.
	patientrecordDescPhonenumber := patientrecordFields[5].Descriptor()
	// patientrecord.PhonenumberValidator is a validator for the "Phonenumber" field. It is called by the builders before save.
	patientrecord.PhonenumberValidator = func() func(string) error {
		validators := patientrecordDescPhonenumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(_Phonenumber string) error {
			for _, fn := range fns {
				if err := fn(_Phonenumber); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// patientrecordDescEmail is the schema descriptor for Email field.
	patientrecordDescEmail := patientrecordFields[6].Descriptor()
	// patientrecord.EmailValidator is a validator for the "Email" field. It is called by the builders before save.
	patientrecord.EmailValidator = func() func(string) error {
		validators := patientrecordDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Email string) error {
			for _, fn := range fns {
				if err := fn(_Email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// patientrecordDescHome is the schema descriptor for Home field.
	patientrecordDescHome := patientrecordFields[7].Descriptor()
	// patientrecord.HomeValidator is a validator for the "Home" field. It is called by the builders before save.
	patientrecord.HomeValidator = patientrecordDescHome.Validators[0].(func(string) error)
	patientrightsFields := schema.Patientrights{}.Fields()
	_ = patientrightsFields
	// patientrightsDescPermission is the schema descriptor for Permission field.
	patientrightsDescPermission := patientrightsFields[1].Descriptor()
	// patientrights.PermissionValidator is a validator for the "Permission" field. It is called by the builders before save.
	patientrights.PermissionValidator = func() func(string) error {
		validators := patientrightsDescPermission.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Permission string) error {
			for _, fn := range fns {
				if err := fn(_Permission); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// patientrightsDescPermissionArea is the schema descriptor for PermissionArea field.
	patientrightsDescPermissionArea := patientrightsFields[2].Descriptor()
	// patientrights.PermissionAreaValidator is a validator for the "PermissionArea" field. It is called by the builders before save.
	patientrights.PermissionAreaValidator = func() func(string) error {
		validators := patientrightsDescPermissionArea.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_PermissionArea string) error {
			for _, fn := range fns {
				if err := fn(_PermissionArea); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// patientrightsDescResponsible is the schema descriptor for Responsible field.
	patientrightsDescResponsible := patientrightsFields[3].Descriptor()
	// patientrights.ResponsibleValidator is a validator for the "Responsible" field. It is called by the builders before save.
	patientrights.ResponsibleValidator = func() func(string) error {
		validators := patientrightsDescResponsible.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Responsible string) error {
			for _, fn := range fns {
				if err := fn(_Responsible); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	paytypeFields := schema.Paytype{}.Fields()
	_ = paytypeFields
	// paytypeDescPaytype is the schema descriptor for paytype field.
	paytypeDescPaytype := paytypeFields[0].Descriptor()
	// paytype.PaytypeValidator is a validator for the "paytype" field. It is called by the builders before save.
	paytype.PaytypeValidator = paytypeDescPaytype.Validators[0].(func(string) error)
	prenameFields := schema.Prename{}.Fields()
	_ = prenameFields
	// prenameDescPrefix is the schema descriptor for prefix field.
	prenameDescPrefix := prenameFields[0].Descriptor()
	// prename.PrefixValidator is a validator for the "prefix" field. It is called by the builders before save.
	prename.PrefixValidator = prenameDescPrefix.Validators[0].(func(string) error)
	treatmentFields := schema.Treatment{}.Fields()
	_ = treatmentFields
	// treatmentDescSymptom is the schema descriptor for Symptom field.
	treatmentDescSymptom := treatmentFields[0].Descriptor()
	// treatment.SymptomValidator is a validator for the "Symptom" field. It is called by the builders before save.
	treatment.SymptomValidator = func() func(string) error {
		validators := treatmentDescSymptom.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Symptom string) error {
			for _, fn := range fns {
				if err := fn(_Symptom); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// treatmentDescTreat is the schema descriptor for Treat field.
	treatmentDescTreat := treatmentFields[1].Descriptor()
	// treatment.TreatValidator is a validator for the "Treat" field. It is called by the builders before save.
	treatment.TreatValidator = func() func(string) error {
		validators := treatmentDescTreat.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Treat string) error {
			for _, fn := range fns {
				if err := fn(_Treat); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// treatmentDescMedicine is the schema descriptor for Medicine field.
	treatmentDescMedicine := treatmentFields[2].Descriptor()
	// treatment.MedicineValidator is a validator for the "Medicine" field. It is called by the builders before save.
	treatment.MedicineValidator = func() func(string) error {
		validators := treatmentDescMedicine.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Medicine string) error {
			for _, fn := range fns {
				if err := fn(_Medicine); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	typetreatmentFields := schema.Typetreatment{}.Fields()
	_ = typetreatmentFields
	// typetreatmentDescTypetreatment is the schema descriptor for Typetreatment field.
	typetreatmentDescTypetreatment := typetreatmentFields[0].Descriptor()
	// typetreatment.TypetreatmentValidator is a validator for the "Typetreatment" field. It is called by the builders before save.
	typetreatment.TypetreatmentValidator = typetreatmentDescTypetreatment.Validators[0].(func(string) error)
	unpaybillFields := schema.Unpaybill{}.Fields()
	_ = unpaybillFields
	// unpaybillDescStatus is the schema descriptor for Status field.
	unpaybillDescStatus := unpaybillFields[0].Descriptor()
	// unpaybill.StatusValidator is a validator for the "Status" field. It is called by the builders before save.
	unpaybill.StatusValidator = unpaybillDescStatus.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[0].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[1].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
}
