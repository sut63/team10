// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team10/app/ent/department"
	"github.com/team10/app/ent/doctorinfo"
	"github.com/team10/app/ent/educationlevel"
	"github.com/team10/app/ent/officeroom"
	"github.com/team10/app/ent/prename"
	"github.com/team10/app/ent/treatment"
	"github.com/team10/app/ent/user"
)

// DoctorinfoCreate is the builder for creating a Doctorinfo entity.
type DoctorinfoCreate struct {
	config
	mutation *DoctorinfoMutation
	hooks    []Hook
}

// SetDoctorname sets the doctorname field.
func (dc *DoctorinfoCreate) SetDoctorname(s string) *DoctorinfoCreate {
	dc.mutation.SetDoctorname(s)
	return dc
}

// SetDoctorsurname sets the doctorsurname field.
func (dc *DoctorinfoCreate) SetDoctorsurname(s string) *DoctorinfoCreate {
	dc.mutation.SetDoctorsurname(s)
	return dc
}

// SetTelephonenumber sets the telephonenumber field.
func (dc *DoctorinfoCreate) SetTelephonenumber(s string) *DoctorinfoCreate {
	dc.mutation.SetTelephonenumber(s)
	return dc
}

// SetLicensenumber sets the licensenumber field.
func (dc *DoctorinfoCreate) SetLicensenumber(s string) *DoctorinfoCreate {
	dc.mutation.SetLicensenumber(s)
	return dc
}

// SetDepartmentID sets the department edge to Department by id.
func (dc *DoctorinfoCreate) SetDepartmentID(id int) *DoctorinfoCreate {
	dc.mutation.SetDepartmentID(id)
	return dc
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (dc *DoctorinfoCreate) SetNillableDepartmentID(id *int) *DoctorinfoCreate {
	if id != nil {
		dc = dc.SetDepartmentID(*id)
	}
	return dc
}

// SetDepartment sets the department edge to Department.
func (dc *DoctorinfoCreate) SetDepartment(d *Department) *DoctorinfoCreate {
	return dc.SetDepartmentID(d.ID)
}

// SetEducationlevelID sets the educationlevel edge to Educationlevel by id.
func (dc *DoctorinfoCreate) SetEducationlevelID(id int) *DoctorinfoCreate {
	dc.mutation.SetEducationlevelID(id)
	return dc
}

// SetNillableEducationlevelID sets the educationlevel edge to Educationlevel by id if the given value is not nil.
func (dc *DoctorinfoCreate) SetNillableEducationlevelID(id *int) *DoctorinfoCreate {
	if id != nil {
		dc = dc.SetEducationlevelID(*id)
	}
	return dc
}

// SetEducationlevel sets the educationlevel edge to Educationlevel.
func (dc *DoctorinfoCreate) SetEducationlevel(e *Educationlevel) *DoctorinfoCreate {
	return dc.SetEducationlevelID(e.ID)
}

// SetOfficeroomID sets the officeroom edge to Officeroom by id.
func (dc *DoctorinfoCreate) SetOfficeroomID(id int) *DoctorinfoCreate {
	dc.mutation.SetOfficeroomID(id)
	return dc
}

// SetNillableOfficeroomID sets the officeroom edge to Officeroom by id if the given value is not nil.
func (dc *DoctorinfoCreate) SetNillableOfficeroomID(id *int) *DoctorinfoCreate {
	if id != nil {
		dc = dc.SetOfficeroomID(*id)
	}
	return dc
}

// SetOfficeroom sets the officeroom edge to Officeroom.
func (dc *DoctorinfoCreate) SetOfficeroom(o *Officeroom) *DoctorinfoCreate {
	return dc.SetOfficeroomID(o.ID)
}

// SetPrenameID sets the prename edge to Prename by id.
func (dc *DoctorinfoCreate) SetPrenameID(id int) *DoctorinfoCreate {
	dc.mutation.SetPrenameID(id)
	return dc
}

// SetNillablePrenameID sets the prename edge to Prename by id if the given value is not nil.
func (dc *DoctorinfoCreate) SetNillablePrenameID(id *int) *DoctorinfoCreate {
	if id != nil {
		dc = dc.SetPrenameID(*id)
	}
	return dc
}

// SetPrename sets the prename edge to Prename.
func (dc *DoctorinfoCreate) SetPrename(p *Prename) *DoctorinfoCreate {
	return dc.SetPrenameID(p.ID)
}

// SetUserID sets the user edge to User by id.
func (dc *DoctorinfoCreate) SetUserID(id int) *DoctorinfoCreate {
	dc.mutation.SetUserID(id)
	return dc
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (dc *DoctorinfoCreate) SetNillableUserID(id *int) *DoctorinfoCreate {
	if id != nil {
		dc = dc.SetUserID(*id)
	}
	return dc
}

// SetUser sets the user edge to User.
func (dc *DoctorinfoCreate) SetUser(u *User) *DoctorinfoCreate {
	return dc.SetUserID(u.ID)
}

// AddTreatmentIDs adds the treatment edge to Treatment by ids.
func (dc *DoctorinfoCreate) AddTreatmentIDs(ids ...int) *DoctorinfoCreate {
	dc.mutation.AddTreatmentIDs(ids...)
	return dc
}

// AddTreatment adds the treatment edges to Treatment.
func (dc *DoctorinfoCreate) AddTreatment(t ...*Treatment) *DoctorinfoCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return dc.AddTreatmentIDs(ids...)
}

// Mutation returns the DoctorinfoMutation object of the builder.
func (dc *DoctorinfoCreate) Mutation() *DoctorinfoMutation {
	return dc.mutation
}

// Save creates the Doctorinfo in the database.
func (dc *DoctorinfoCreate) Save(ctx context.Context) (*Doctorinfo, error) {
	if _, ok := dc.mutation.Doctorname(); !ok {
		return nil, &ValidationError{Name: "doctorname", err: errors.New("ent: missing required field \"doctorname\"")}
	}
	if v, ok := dc.mutation.Doctorname(); ok {
		if err := doctorinfo.DoctornameValidator(v); err != nil {
			return nil, &ValidationError{Name: "doctorname", err: fmt.Errorf("ent: validator failed for field \"doctorname\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Doctorsurname(); !ok {
		return nil, &ValidationError{Name: "doctorsurname", err: errors.New("ent: missing required field \"doctorsurname\"")}
	}
	if v, ok := dc.mutation.Doctorsurname(); ok {
		if err := doctorinfo.DoctorsurnameValidator(v); err != nil {
			return nil, &ValidationError{Name: "doctorsurname", err: fmt.Errorf("ent: validator failed for field \"doctorsurname\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Telephonenumber(); !ok {
		return nil, &ValidationError{Name: "telephonenumber", err: errors.New("ent: missing required field \"telephonenumber\"")}
	}
	if v, ok := dc.mutation.Telephonenumber(); ok {
		if err := doctorinfo.TelephonenumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "telephonenumber", err: fmt.Errorf("ent: validator failed for field \"telephonenumber\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Licensenumber(); !ok {
		return nil, &ValidationError{Name: "licensenumber", err: errors.New("ent: missing required field \"licensenumber\"")}
	}
	if v, ok := dc.mutation.Licensenumber(); ok {
		if err := doctorinfo.LicensenumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "licensenumber", err: fmt.Errorf("ent: validator failed for field \"licensenumber\": %w", err)}
		}
	}
	var (
		err  error
		node *Doctorinfo
	)
	if len(dc.hooks) == 0 {
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DoctorinfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DoctorinfoCreate) SaveX(ctx context.Context) *Doctorinfo {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dc *DoctorinfoCreate) sqlSave(ctx context.Context) (*Doctorinfo, error) {
	d, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	d.ID = int(id)
	return d, nil
}

func (dc *DoctorinfoCreate) createSpec() (*Doctorinfo, *sqlgraph.CreateSpec) {
	var (
		d     = &Doctorinfo{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: doctorinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: doctorinfo.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.Doctorname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorinfo.FieldDoctorname,
		})
		d.Doctorname = value
	}
	if value, ok := dc.mutation.Doctorsurname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorinfo.FieldDoctorsurname,
		})
		d.Doctorsurname = value
	}
	if value, ok := dc.mutation.Telephonenumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorinfo.FieldTelephonenumber,
		})
		d.Telephonenumber = value
	}
	if value, ok := dc.mutation.Licensenumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorinfo.FieldLicensenumber,
		})
		d.Licensenumber = value
	}
	if nodes := dc.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.DepartmentTable,
			Columns: []string{doctorinfo.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.EducationlevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.EducationlevelTable,
			Columns: []string{doctorinfo.EducationlevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: educationlevel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.OfficeroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.OfficeroomTable,
			Columns: []string{doctorinfo.OfficeroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: officeroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.PrenameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.PrenameTable,
			Columns: []string{doctorinfo.PrenameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prename.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   doctorinfo.UserTable,
			Columns: []string{doctorinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.TreatmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctorinfo.TreatmentTable,
			Columns: []string{doctorinfo.TreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: treatment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return d, _spec
}
