// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team10/app/ent/gender"
	"github.com/team10/app/ent/historytaking"
	"github.com/team10/app/ent/medicalrecordstaff"
	"github.com/team10/app/ent/patientrecord"
	"github.com/team10/app/ent/patientrights"
	"github.com/team10/app/ent/prename"
	"github.com/team10/app/ent/treatment"
)

// PatientrecordCreate is the builder for creating a Patientrecord entity.
type PatientrecordCreate struct {
	config
	mutation *PatientrecordMutation
	hooks    []Hook
}

// SetName sets the Name field.
func (pc *PatientrecordCreate) SetName(s string) *PatientrecordCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetIdcardnumber sets the Idcardnumber field.
func (pc *PatientrecordCreate) SetIdcardnumber(i int) *PatientrecordCreate {
	pc.mutation.SetIdcardnumber(i)
	return pc
}

// SetAge sets the Age field.
func (pc *PatientrecordCreate) SetAge(i int) *PatientrecordCreate {
	pc.mutation.SetAge(i)
	return pc
}

// SetBirthday sets the Birthday field.
func (pc *PatientrecordCreate) SetBirthday(t time.Time) *PatientrecordCreate {
	pc.mutation.SetBirthday(t)
	return pc
}

// SetBloodtype sets the Bloodtype field.
func (pc *PatientrecordCreate) SetBloodtype(s string) *PatientrecordCreate {
	pc.mutation.SetBloodtype(s)
	return pc
}

// SetDisease sets the Disease field.
func (pc *PatientrecordCreate) SetDisease(s string) *PatientrecordCreate {
	pc.mutation.SetDisease(s)
	return pc
}

// SetAllergic sets the Allergic field.
func (pc *PatientrecordCreate) SetAllergic(s string) *PatientrecordCreate {
	pc.mutation.SetAllergic(s)
	return pc
}

// SetPhonenumber sets the Phonenumber field.
func (pc *PatientrecordCreate) SetPhonenumber(i int) *PatientrecordCreate {
	pc.mutation.SetPhonenumber(i)
	return pc
}

// SetEmail sets the Email field.
func (pc *PatientrecordCreate) SetEmail(s string) *PatientrecordCreate {
	pc.mutation.SetEmail(s)
	return pc
}

// SetHome sets the Home field.
func (pc *PatientrecordCreate) SetHome(s string) *PatientrecordCreate {
	pc.mutation.SetHome(s)
	return pc
}

// SetDate sets the Date field.
func (pc *PatientrecordCreate) SetDate(t time.Time) *PatientrecordCreate {
	pc.mutation.SetDate(t)
	return pc
}

// SetGenderID sets the gender edge to Gender by id.
func (pc *PatientrecordCreate) SetGenderID(id int) *PatientrecordCreate {
	pc.mutation.SetGenderID(id)
	return pc
}

// SetNillableGenderID sets the gender edge to Gender by id if the given value is not nil.
func (pc *PatientrecordCreate) SetNillableGenderID(id *int) *PatientrecordCreate {
	if id != nil {
		pc = pc.SetGenderID(*id)
	}
	return pc
}

// SetGender sets the gender edge to Gender.
func (pc *PatientrecordCreate) SetGender(g *Gender) *PatientrecordCreate {
	return pc.SetGenderID(g.ID)
}

// SetMedicalrecordstaffID sets the medicalrecordstaff edge to Medicalrecordstaff by id.
func (pc *PatientrecordCreate) SetMedicalrecordstaffID(id int) *PatientrecordCreate {
	pc.mutation.SetMedicalrecordstaffID(id)
	return pc
}

// SetNillableMedicalrecordstaffID sets the medicalrecordstaff edge to Medicalrecordstaff by id if the given value is not nil.
func (pc *PatientrecordCreate) SetNillableMedicalrecordstaffID(id *int) *PatientrecordCreate {
	if id != nil {
		pc = pc.SetMedicalrecordstaffID(*id)
	}
	return pc
}

// SetMedicalrecordstaff sets the medicalrecordstaff edge to Medicalrecordstaff.
func (pc *PatientrecordCreate) SetMedicalrecordstaff(m *Medicalrecordstaff) *PatientrecordCreate {
	return pc.SetMedicalrecordstaffID(m.ID)
}

// SetPrenameID sets the prename edge to Prename by id.
func (pc *PatientrecordCreate) SetPrenameID(id int) *PatientrecordCreate {
	pc.mutation.SetPrenameID(id)
	return pc
}

// SetNillablePrenameID sets the prename edge to Prename by id if the given value is not nil.
func (pc *PatientrecordCreate) SetNillablePrenameID(id *int) *PatientrecordCreate {
	if id != nil {
		pc = pc.SetPrenameID(*id)
	}
	return pc
}

// SetPrename sets the prename edge to Prename.
func (pc *PatientrecordCreate) SetPrename(p *Prename) *PatientrecordCreate {
	return pc.SetPrenameID(p.ID)
}

// AddHistorytakingIDs adds the historytaking edge to Historytaking by ids.
func (pc *PatientrecordCreate) AddHistorytakingIDs(ids ...int) *PatientrecordCreate {
	pc.mutation.AddHistorytakingIDs(ids...)
	return pc
}

// AddHistorytaking adds the historytaking edges to Historytaking.
func (pc *PatientrecordCreate) AddHistorytaking(h ...*Historytaking) *PatientrecordCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return pc.AddHistorytakingIDs(ids...)
}

// AddTreatmentIDs adds the treatment edge to Treatment by ids.
func (pc *PatientrecordCreate) AddTreatmentIDs(ids ...int) *PatientrecordCreate {
	pc.mutation.AddTreatmentIDs(ids...)
	return pc
}

// AddTreatment adds the treatment edges to Treatment.
func (pc *PatientrecordCreate) AddTreatment(t ...*Treatment) *PatientrecordCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTreatmentIDs(ids...)
}

// AddPatientrecordPatientrightIDs adds the PatientrecordPatientrights edge to Patientrights by ids.
func (pc *PatientrecordCreate) AddPatientrecordPatientrightIDs(ids ...int) *PatientrecordCreate {
	pc.mutation.AddPatientrecordPatientrightIDs(ids...)
	return pc
}

// AddPatientrecordPatientrights adds the PatientrecordPatientrights edges to Patientrights.
func (pc *PatientrecordCreate) AddPatientrecordPatientrights(p ...*Patientrights) *PatientrecordCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPatientrecordPatientrightIDs(ids...)
}

// Mutation returns the PatientrecordMutation object of the builder.
func (pc *PatientrecordCreate) Mutation() *PatientrecordMutation {
	return pc.mutation
}

// Save creates the Patientrecord in the database.
func (pc *PatientrecordCreate) Save(ctx context.Context) (*Patientrecord, error) {
	if _, ok := pc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "Name", err: errors.New("ent: missing required field \"Name\"")}
	}
	if _, ok := pc.mutation.Idcardnumber(); !ok {
		return nil, &ValidationError{Name: "Idcardnumber", err: errors.New("ent: missing required field \"Idcardnumber\"")}
	}
	if _, ok := pc.mutation.Age(); !ok {
		return nil, &ValidationError{Name: "Age", err: errors.New("ent: missing required field \"Age\"")}
	}
	if _, ok := pc.mutation.Birthday(); !ok {
		return nil, &ValidationError{Name: "Birthday", err: errors.New("ent: missing required field \"Birthday\"")}
	}
	if _, ok := pc.mutation.Bloodtype(); !ok {
		return nil, &ValidationError{Name: "Bloodtype", err: errors.New("ent: missing required field \"Bloodtype\"")}
	}
	if _, ok := pc.mutation.Disease(); !ok {
		return nil, &ValidationError{Name: "Disease", err: errors.New("ent: missing required field \"Disease\"")}
	}
	if _, ok := pc.mutation.Allergic(); !ok {
		return nil, &ValidationError{Name: "Allergic", err: errors.New("ent: missing required field \"Allergic\"")}
	}
	if _, ok := pc.mutation.Phonenumber(); !ok {
		return nil, &ValidationError{Name: "Phonenumber", err: errors.New("ent: missing required field \"Phonenumber\"")}
	}
	if _, ok := pc.mutation.Email(); !ok {
		return nil, &ValidationError{Name: "Email", err: errors.New("ent: missing required field \"Email\"")}
	}
	if _, ok := pc.mutation.Home(); !ok {
		return nil, &ValidationError{Name: "Home", err: errors.New("ent: missing required field \"Home\"")}
	}
	if _, ok := pc.mutation.Date(); !ok {
		return nil, &ValidationError{Name: "Date", err: errors.New("ent: missing required field \"Date\"")}
	}
	var (
		err  error
		node *Patientrecord
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientrecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PatientrecordCreate) SaveX(ctx context.Context) *Patientrecord {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PatientrecordCreate) sqlSave(ctx context.Context) (*Patientrecord, error) {
	pa, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pa.ID = int(id)
	return pa, nil
}

func (pc *PatientrecordCreate) createSpec() (*Patientrecord, *sqlgraph.CreateSpec) {
	var (
		pa    = &Patientrecord{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: patientrecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patientrecord.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrecord.FieldName,
		})
		pa.Name = value
	}
	if value, ok := pc.mutation.Idcardnumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: patientrecord.FieldIdcardnumber,
		})
		pa.Idcardnumber = value
	}
	if value, ok := pc.mutation.Age(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: patientrecord.FieldAge,
		})
		pa.Age = value
	}
	if value, ok := pc.mutation.Birthday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: patientrecord.FieldBirthday,
		})
		pa.Birthday = value
	}
	if value, ok := pc.mutation.Bloodtype(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrecord.FieldBloodtype,
		})
		pa.Bloodtype = value
	}
	if value, ok := pc.mutation.Disease(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrecord.FieldDisease,
		})
		pa.Disease = value
	}
	if value, ok := pc.mutation.Allergic(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrecord.FieldAllergic,
		})
		pa.Allergic = value
	}
	if value, ok := pc.mutation.Phonenumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: patientrecord.FieldPhonenumber,
		})
		pa.Phonenumber = value
	}
	if value, ok := pc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrecord.FieldEmail,
		})
		pa.Email = value
	}
	if value, ok := pc.mutation.Home(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrecord.FieldHome,
		})
		pa.Home = value
	}
	if value, ok := pc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: patientrecord.FieldDate,
		})
		pa.Date = value
	}
	if nodes := pc.mutation.GenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrecord.GenderTable,
			Columns: []string{patientrecord.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.MedicalrecordstaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrecord.MedicalrecordstaffTable,
			Columns: []string{patientrecord.MedicalrecordstaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalrecordstaff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PrenameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrecord.PrenameTable,
			Columns: []string{patientrecord.PrenameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prename.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.HistorytakingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patientrecord.HistorytakingTable,
			Columns: []string{patientrecord.HistorytakingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: historytaking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TreatmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patientrecord.TreatmentTable,
			Columns: []string{patientrecord.TreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: treatment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PatientrecordPatientrightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patientrecord.PatientrecordPatientrightsTable,
			Columns: []string{patientrecord.PatientrecordPatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrights.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pa, _spec
}
