// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team10/app/ent/bill"
	"github.com/team10/app/ent/predicate"
	"github.com/team10/app/ent/treatment"
	"github.com/team10/app/ent/unpaybill"
)

// UnpaybillUpdate is the builder for updating Unpaybill entities.
type UnpaybillUpdate struct {
	config
	hooks      []Hook
	mutation   *UnpaybillMutation
	predicates []predicate.Unpaybill
}

// Where adds a new predicate for the builder.
func (uu *UnpaybillUpdate) Where(ps ...predicate.Unpaybill) *UnpaybillUpdate {
	uu.predicates = append(uu.predicates, ps...)
	return uu
}

// SetStatus sets the Status field.
func (uu *UnpaybillUpdate) SetStatus(s string) *UnpaybillUpdate {
	uu.mutation.SetStatus(s)
	return uu
}

// SetTreatmentID sets the treatment edge to Treatment by id.
func (uu *UnpaybillUpdate) SetTreatmentID(id int) *UnpaybillUpdate {
	uu.mutation.SetTreatmentID(id)
	return uu
}

// SetNillableTreatmentID sets the treatment edge to Treatment by id if the given value is not nil.
func (uu *UnpaybillUpdate) SetNillableTreatmentID(id *int) *UnpaybillUpdate {
	if id != nil {
		uu = uu.SetTreatmentID(*id)
	}
	return uu
}

// SetTreatment sets the treatment edge to Treatment.
func (uu *UnpaybillUpdate) SetTreatment(t *Treatment) *UnpaybillUpdate {
	return uu.SetTreatmentID(t.ID)
}

// SetBillsID sets the bills edge to Bill by id.
func (uu *UnpaybillUpdate) SetBillsID(id int) *UnpaybillUpdate {
	uu.mutation.SetBillsID(id)
	return uu
}

// SetNillableBillsID sets the bills edge to Bill by id if the given value is not nil.
func (uu *UnpaybillUpdate) SetNillableBillsID(id *int) *UnpaybillUpdate {
	if id != nil {
		uu = uu.SetBillsID(*id)
	}
	return uu
}

// SetBills sets the bills edge to Bill.
func (uu *UnpaybillUpdate) SetBills(b *Bill) *UnpaybillUpdate {
	return uu.SetBillsID(b.ID)
}

// Mutation returns the UnpaybillMutation object of the builder.
func (uu *UnpaybillUpdate) Mutation() *UnpaybillMutation {
	return uu.mutation
}

// ClearTreatment clears the treatment edge to Treatment.
func (uu *UnpaybillUpdate) ClearTreatment() *UnpaybillUpdate {
	uu.mutation.ClearTreatment()
	return uu
}

// ClearBills clears the bills edge to Bill.
func (uu *UnpaybillUpdate) ClearBills() *UnpaybillUpdate {
	uu.mutation.ClearBills()
	return uu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uu *UnpaybillUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := uu.mutation.Status(); ok {
		if err := unpaybill.StatusValidator(v); err != nil {
			return 0, &ValidationError{Name: "Status", err: fmt.Errorf("ent: validator failed for field \"Status\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UnpaybillMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UnpaybillUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UnpaybillUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UnpaybillUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UnpaybillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   unpaybill.Table,
			Columns: unpaybill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unpaybill.FieldID,
			},
		},
	}
	if ps := uu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unpaybill.FieldStatus,
		})
	}
	if uu.mutation.TreatmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   unpaybill.TreatmentTable,
			Columns: []string{unpaybill.TreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: treatment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TreatmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   unpaybill.TreatmentTable,
			Columns: []string{unpaybill.TreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: treatment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   unpaybill.BillsTable,
			Columns: []string{unpaybill.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   unpaybill.BillsTable,
			Columns: []string{unpaybill.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unpaybill.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UnpaybillUpdateOne is the builder for updating a single Unpaybill entity.
type UnpaybillUpdateOne struct {
	config
	hooks    []Hook
	mutation *UnpaybillMutation
}

// SetStatus sets the Status field.
func (uuo *UnpaybillUpdateOne) SetStatus(s string) *UnpaybillUpdateOne {
	uuo.mutation.SetStatus(s)
	return uuo
}

// SetTreatmentID sets the treatment edge to Treatment by id.
func (uuo *UnpaybillUpdateOne) SetTreatmentID(id int) *UnpaybillUpdateOne {
	uuo.mutation.SetTreatmentID(id)
	return uuo
}

// SetNillableTreatmentID sets the treatment edge to Treatment by id if the given value is not nil.
func (uuo *UnpaybillUpdateOne) SetNillableTreatmentID(id *int) *UnpaybillUpdateOne {
	if id != nil {
		uuo = uuo.SetTreatmentID(*id)
	}
	return uuo
}

// SetTreatment sets the treatment edge to Treatment.
func (uuo *UnpaybillUpdateOne) SetTreatment(t *Treatment) *UnpaybillUpdateOne {
	return uuo.SetTreatmentID(t.ID)
}

// SetBillsID sets the bills edge to Bill by id.
func (uuo *UnpaybillUpdateOne) SetBillsID(id int) *UnpaybillUpdateOne {
	uuo.mutation.SetBillsID(id)
	return uuo
}

// SetNillableBillsID sets the bills edge to Bill by id if the given value is not nil.
func (uuo *UnpaybillUpdateOne) SetNillableBillsID(id *int) *UnpaybillUpdateOne {
	if id != nil {
		uuo = uuo.SetBillsID(*id)
	}
	return uuo
}

// SetBills sets the bills edge to Bill.
func (uuo *UnpaybillUpdateOne) SetBills(b *Bill) *UnpaybillUpdateOne {
	return uuo.SetBillsID(b.ID)
}

// Mutation returns the UnpaybillMutation object of the builder.
func (uuo *UnpaybillUpdateOne) Mutation() *UnpaybillMutation {
	return uuo.mutation
}

// ClearTreatment clears the treatment edge to Treatment.
func (uuo *UnpaybillUpdateOne) ClearTreatment() *UnpaybillUpdateOne {
	uuo.mutation.ClearTreatment()
	return uuo
}

// ClearBills clears the bills edge to Bill.
func (uuo *UnpaybillUpdateOne) ClearBills() *UnpaybillUpdateOne {
	uuo.mutation.ClearBills()
	return uuo
}

// Save executes the query and returns the updated entity.
func (uuo *UnpaybillUpdateOne) Save(ctx context.Context) (*Unpaybill, error) {
	if v, ok := uuo.mutation.Status(); ok {
		if err := unpaybill.StatusValidator(v); err != nil {
			return nil, &ValidationError{Name: "Status", err: fmt.Errorf("ent: validator failed for field \"Status\": %w", err)}
		}
	}

	var (
		err  error
		node *Unpaybill
	)
	if len(uuo.hooks) == 0 {
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UnpaybillMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UnpaybillUpdateOne) SaveX(ctx context.Context) *Unpaybill {
	u, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return u
}

// Exec executes the query on the entity.
func (uuo *UnpaybillUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UnpaybillUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UnpaybillUpdateOne) sqlSave(ctx context.Context) (u *Unpaybill, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   unpaybill.Table,
			Columns: unpaybill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unpaybill.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Unpaybill.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := uuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unpaybill.FieldStatus,
		})
	}
	if uuo.mutation.TreatmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   unpaybill.TreatmentTable,
			Columns: []string{unpaybill.TreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: treatment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TreatmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   unpaybill.TreatmentTable,
			Columns: []string{unpaybill.TreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: treatment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   unpaybill.BillsTable,
			Columns: []string{unpaybill.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   unpaybill.BillsTable,
			Columns: []string{unpaybill.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	u = &Unpaybill{config: uuo.config}
	_spec.Assign = u.assignValues
	_spec.ScanValues = u.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unpaybill.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return u, nil
}
