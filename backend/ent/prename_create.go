// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team10/app/ent/doctorinfo"
	"github.com/team10/app/ent/patientrecord"
	"github.com/team10/app/ent/prename"
)

// PrenameCreate is the builder for creating a Prename entity.
type PrenameCreate struct {
	config
	mutation *PrenameMutation
	hooks    []Hook
}

// SetPrefix sets the prefix field.
func (pc *PrenameCreate) SetPrefix(s string) *PrenameCreate {
	pc.mutation.SetPrefix(s)
	return pc
}

// AddPrename2doctorinfoIDs adds the prename2doctorinfo edge to Doctorinfo by ids.
func (pc *PrenameCreate) AddPrename2doctorinfoIDs(ids ...int) *PrenameCreate {
	pc.mutation.AddPrename2doctorinfoIDs(ids...)
	return pc
}

// AddPrename2doctorinfo adds the prename2doctorinfo edges to Doctorinfo.
func (pc *PrenameCreate) AddPrename2doctorinfo(d ...*Doctorinfo) *PrenameCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pc.AddPrename2doctorinfoIDs(ids...)
}

// AddPatientrecordIDs adds the patientrecord edge to Patientrecord by ids.
func (pc *PrenameCreate) AddPatientrecordIDs(ids ...int) *PrenameCreate {
	pc.mutation.AddPatientrecordIDs(ids...)
	return pc
}

// AddPatientrecord adds the patientrecord edges to Patientrecord.
func (pc *PrenameCreate) AddPatientrecord(p ...*Patientrecord) *PrenameCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPatientrecordIDs(ids...)
}

// Mutation returns the PrenameMutation object of the builder.
func (pc *PrenameCreate) Mutation() *PrenameMutation {
	return pc.mutation
}

// Save creates the Prename in the database.
func (pc *PrenameCreate) Save(ctx context.Context) (*Prename, error) {
	if _, ok := pc.mutation.Prefix(); !ok {
		return nil, &ValidationError{Name: "prefix", err: errors.New("ent: missing required field \"prefix\"")}
	}
	if v, ok := pc.mutation.Prefix(); ok {
		if err := prename.PrefixValidator(v); err != nil {
			return nil, &ValidationError{Name: "prefix", err: fmt.Errorf("ent: validator failed for field \"prefix\": %w", err)}
		}
	}
	var (
		err  error
		node *Prename
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PrenameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PrenameCreate) SaveX(ctx context.Context) *Prename {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PrenameCreate) sqlSave(ctx context.Context) (*Prename, error) {
	pr, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}

func (pc *PrenameCreate) createSpec() (*Prename, *sqlgraph.CreateSpec) {
	var (
		pr    = &Prename{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: prename.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prename.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Prefix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prename.FieldPrefix,
		})
		pr.Prefix = value
	}
	if nodes := pc.mutation.Prename2doctorinfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prename.Prename2doctorinfoTable,
			Columns: []string{prename.Prename2doctorinfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctorinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PatientrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prename.PatientrecordTable,
			Columns: []string{prename.PatientrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pr, _spec
}
