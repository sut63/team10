// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team10/app/ent/department"
	"github.com/team10/app/ent/doctor"
	"github.com/team10/app/ent/doctorinfo"
	"github.com/team10/app/ent/educationlevel"
	"github.com/team10/app/ent/officeroom"
	"github.com/team10/app/ent/predicate"
	"github.com/team10/app/ent/prename"
)

// DoctorinfoUpdate is the builder for updating Doctorinfo entities.
type DoctorinfoUpdate struct {
	config
	hooks      []Hook
	mutation   *DoctorinfoMutation
	predicates []predicate.Doctorinfo
}

// Where adds a new predicate for the builder.
func (du *DoctorinfoUpdate) Where(ps ...predicate.Doctorinfo) *DoctorinfoUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetDoctorname sets the doctorname field.
func (du *DoctorinfoUpdate) SetDoctorname(s string) *DoctorinfoUpdate {
	du.mutation.SetDoctorname(s)
	return du
}

// SetDoctorsurname sets the doctorsurname field.
func (du *DoctorinfoUpdate) SetDoctorsurname(s string) *DoctorinfoUpdate {
	du.mutation.SetDoctorsurname(s)
	return du
}

// SetTelephonenumber sets the telephonenumber field.
func (du *DoctorinfoUpdate) SetTelephonenumber(s string) *DoctorinfoUpdate {
	du.mutation.SetTelephonenumber(s)
	return du
}

// SetLicensenumber sets the licensenumber field.
func (du *DoctorinfoUpdate) SetLicensenumber(s string) *DoctorinfoUpdate {
	du.mutation.SetLicensenumber(s)
	return du
}

// SetEdgesOfDepartmentID sets the EdgesOfDepartment edge to Department by id.
func (du *DoctorinfoUpdate) SetEdgesOfDepartmentID(id int) *DoctorinfoUpdate {
	du.mutation.SetEdgesOfDepartmentID(id)
	return du
}

// SetNillableEdgesOfDepartmentID sets the EdgesOfDepartment edge to Department by id if the given value is not nil.
func (du *DoctorinfoUpdate) SetNillableEdgesOfDepartmentID(id *int) *DoctorinfoUpdate {
	if id != nil {
		du = du.SetEdgesOfDepartmentID(*id)
	}
	return du
}

// SetEdgesOfDepartment sets the EdgesOfDepartment edge to Department.
func (du *DoctorinfoUpdate) SetEdgesOfDepartment(d *Department) *DoctorinfoUpdate {
	return du.SetEdgesOfDepartmentID(d.ID)
}

// SetEdgesOfEducationlevelID sets the EdgesOfEducationlevel edge to Educationlevel by id.
func (du *DoctorinfoUpdate) SetEdgesOfEducationlevelID(id int) *DoctorinfoUpdate {
	du.mutation.SetEdgesOfEducationlevelID(id)
	return du
}

// SetNillableEdgesOfEducationlevelID sets the EdgesOfEducationlevel edge to Educationlevel by id if the given value is not nil.
func (du *DoctorinfoUpdate) SetNillableEdgesOfEducationlevelID(id *int) *DoctorinfoUpdate {
	if id != nil {
		du = du.SetEdgesOfEducationlevelID(*id)
	}
	return du
}

// SetEdgesOfEducationlevel sets the EdgesOfEducationlevel edge to Educationlevel.
func (du *DoctorinfoUpdate) SetEdgesOfEducationlevel(e *Educationlevel) *DoctorinfoUpdate {
	return du.SetEdgesOfEducationlevelID(e.ID)
}

// SetEdgesOfOfficeroomID sets the EdgesOfOfficeroom edge to Officeroom by id.
func (du *DoctorinfoUpdate) SetEdgesOfOfficeroomID(id int) *DoctorinfoUpdate {
	du.mutation.SetEdgesOfOfficeroomID(id)
	return du
}

// SetNillableEdgesOfOfficeroomID sets the EdgesOfOfficeroom edge to Officeroom by id if the given value is not nil.
func (du *DoctorinfoUpdate) SetNillableEdgesOfOfficeroomID(id *int) *DoctorinfoUpdate {
	if id != nil {
		du = du.SetEdgesOfOfficeroomID(*id)
	}
	return du
}

// SetEdgesOfOfficeroom sets the EdgesOfOfficeroom edge to Officeroom.
func (du *DoctorinfoUpdate) SetEdgesOfOfficeroom(o *Officeroom) *DoctorinfoUpdate {
	return du.SetEdgesOfOfficeroomID(o.ID)
}

// SetEdgesOfPrenameID sets the EdgesOfPrename edge to Prename by id.
func (du *DoctorinfoUpdate) SetEdgesOfPrenameID(id int) *DoctorinfoUpdate {
	du.mutation.SetEdgesOfPrenameID(id)
	return du
}

// SetNillableEdgesOfPrenameID sets the EdgesOfPrename edge to Prename by id if the given value is not nil.
func (du *DoctorinfoUpdate) SetNillableEdgesOfPrenameID(id *int) *DoctorinfoUpdate {
	if id != nil {
		du = du.SetEdgesOfPrenameID(*id)
	}
	return du
}

// SetEdgesOfPrename sets the EdgesOfPrename edge to Prename.
func (du *DoctorinfoUpdate) SetEdgesOfPrename(p *Prename) *DoctorinfoUpdate {
	return du.SetEdgesOfPrenameID(p.ID)
}

// SetEdgesOfDoctorID sets the EdgesOfDoctor edge to Doctor by id.
func (du *DoctorinfoUpdate) SetEdgesOfDoctorID(id int) *DoctorinfoUpdate {
	du.mutation.SetEdgesOfDoctorID(id)
	return du
}

// SetNillableEdgesOfDoctorID sets the EdgesOfDoctor edge to Doctor by id if the given value is not nil.
func (du *DoctorinfoUpdate) SetNillableEdgesOfDoctorID(id *int) *DoctorinfoUpdate {
	if id != nil {
		du = du.SetEdgesOfDoctorID(*id)
	}
	return du
}

// SetEdgesOfDoctor sets the EdgesOfDoctor edge to Doctor.
func (du *DoctorinfoUpdate) SetEdgesOfDoctor(d *Doctor) *DoctorinfoUpdate {
	return du.SetEdgesOfDoctorID(d.ID)
}

// Mutation returns the DoctorinfoMutation object of the builder.
func (du *DoctorinfoUpdate) Mutation() *DoctorinfoMutation {
	return du.mutation
}

// ClearEdgesOfDepartment clears the EdgesOfDepartment edge to Department.
func (du *DoctorinfoUpdate) ClearEdgesOfDepartment() *DoctorinfoUpdate {
	du.mutation.ClearEdgesOfDepartment()
	return du
}

// ClearEdgesOfEducationlevel clears the EdgesOfEducationlevel edge to Educationlevel.
func (du *DoctorinfoUpdate) ClearEdgesOfEducationlevel() *DoctorinfoUpdate {
	du.mutation.ClearEdgesOfEducationlevel()
	return du
}

// ClearEdgesOfOfficeroom clears the EdgesOfOfficeroom edge to Officeroom.
func (du *DoctorinfoUpdate) ClearEdgesOfOfficeroom() *DoctorinfoUpdate {
	du.mutation.ClearEdgesOfOfficeroom()
	return du
}

// ClearEdgesOfPrename clears the EdgesOfPrename edge to Prename.
func (du *DoctorinfoUpdate) ClearEdgesOfPrename() *DoctorinfoUpdate {
	du.mutation.ClearEdgesOfPrename()
	return du
}

// ClearEdgesOfDoctor clears the EdgesOfDoctor edge to Doctor.
func (du *DoctorinfoUpdate) ClearEdgesOfDoctor() *DoctorinfoUpdate {
	du.mutation.ClearEdgesOfDoctor()
	return du
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DoctorinfoUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := du.mutation.Doctorname(); ok {
		if err := doctorinfo.DoctornameValidator(v); err != nil {
			return 0, &ValidationError{Name: "doctorname", err: fmt.Errorf("ent: validator failed for field \"doctorname\": %w", err)}
		}
	}
	if v, ok := du.mutation.Doctorsurname(); ok {
		if err := doctorinfo.DoctorsurnameValidator(v); err != nil {
			return 0, &ValidationError{Name: "doctorsurname", err: fmt.Errorf("ent: validator failed for field \"doctorsurname\": %w", err)}
		}
	}
	if v, ok := du.mutation.Telephonenumber(); ok {
		if err := doctorinfo.TelephonenumberValidator(v); err != nil {
			return 0, &ValidationError{Name: "telephonenumber", err: fmt.Errorf("ent: validator failed for field \"telephonenumber\": %w", err)}
		}
	}
	if v, ok := du.mutation.Licensenumber(); ok {
		if err := doctorinfo.LicensenumberValidator(v); err != nil {
			return 0, &ValidationError{Name: "licensenumber", err: fmt.Errorf("ent: validator failed for field \"licensenumber\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DoctorinfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DoctorinfoUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DoctorinfoUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DoctorinfoUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DoctorinfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   doctorinfo.Table,
			Columns: doctorinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: doctorinfo.FieldID,
			},
		},
	}
	if ps := du.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Doctorname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorinfo.FieldDoctorname,
		})
	}
	if value, ok := du.mutation.Doctorsurname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorinfo.FieldDoctorsurname,
		})
	}
	if value, ok := du.mutation.Telephonenumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorinfo.FieldTelephonenumber,
		})
	}
	if value, ok := du.mutation.Licensenumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorinfo.FieldLicensenumber,
		})
	}
	if du.mutation.EdgesOfDepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.EdgesOfDepartmentTable,
			Columns: []string{doctorinfo.EdgesOfDepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.EdgesOfDepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.EdgesOfDepartmentTable,
			Columns: []string{doctorinfo.EdgesOfDepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.EdgesOfEducationlevelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.EdgesOfEducationlevelTable,
			Columns: []string{doctorinfo.EdgesOfEducationlevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: educationlevel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.EdgesOfEducationlevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.EdgesOfEducationlevelTable,
			Columns: []string{doctorinfo.EdgesOfEducationlevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: educationlevel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.EdgesOfOfficeroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.EdgesOfOfficeroomTable,
			Columns: []string{doctorinfo.EdgesOfOfficeroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: officeroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.EdgesOfOfficeroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.EdgesOfOfficeroomTable,
			Columns: []string{doctorinfo.EdgesOfOfficeroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: officeroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.EdgesOfPrenameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.EdgesOfPrenameTable,
			Columns: []string{doctorinfo.EdgesOfPrenameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prename.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.EdgesOfPrenameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.EdgesOfPrenameTable,
			Columns: []string{doctorinfo.EdgesOfPrenameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prename.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.EdgesOfDoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   doctorinfo.EdgesOfDoctorTable,
			Columns: []string{doctorinfo.EdgesOfDoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.EdgesOfDoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   doctorinfo.EdgesOfDoctorTable,
			Columns: []string{doctorinfo.EdgesOfDoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doctorinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DoctorinfoUpdateOne is the builder for updating a single Doctorinfo entity.
type DoctorinfoUpdateOne struct {
	config
	hooks    []Hook
	mutation *DoctorinfoMutation
}

// SetDoctorname sets the doctorname field.
func (duo *DoctorinfoUpdateOne) SetDoctorname(s string) *DoctorinfoUpdateOne {
	duo.mutation.SetDoctorname(s)
	return duo
}

// SetDoctorsurname sets the doctorsurname field.
func (duo *DoctorinfoUpdateOne) SetDoctorsurname(s string) *DoctorinfoUpdateOne {
	duo.mutation.SetDoctorsurname(s)
	return duo
}

// SetTelephonenumber sets the telephonenumber field.
func (duo *DoctorinfoUpdateOne) SetTelephonenumber(s string) *DoctorinfoUpdateOne {
	duo.mutation.SetTelephonenumber(s)
	return duo
}

// SetLicensenumber sets the licensenumber field.
func (duo *DoctorinfoUpdateOne) SetLicensenumber(s string) *DoctorinfoUpdateOne {
	duo.mutation.SetLicensenumber(s)
	return duo
}

// SetEdgesOfDepartmentID sets the EdgesOfDepartment edge to Department by id.
func (duo *DoctorinfoUpdateOne) SetEdgesOfDepartmentID(id int) *DoctorinfoUpdateOne {
	duo.mutation.SetEdgesOfDepartmentID(id)
	return duo
}

// SetNillableEdgesOfDepartmentID sets the EdgesOfDepartment edge to Department by id if the given value is not nil.
func (duo *DoctorinfoUpdateOne) SetNillableEdgesOfDepartmentID(id *int) *DoctorinfoUpdateOne {
	if id != nil {
		duo = duo.SetEdgesOfDepartmentID(*id)
	}
	return duo
}

// SetEdgesOfDepartment sets the EdgesOfDepartment edge to Department.
func (duo *DoctorinfoUpdateOne) SetEdgesOfDepartment(d *Department) *DoctorinfoUpdateOne {
	return duo.SetEdgesOfDepartmentID(d.ID)
}

// SetEdgesOfEducationlevelID sets the EdgesOfEducationlevel edge to Educationlevel by id.
func (duo *DoctorinfoUpdateOne) SetEdgesOfEducationlevelID(id int) *DoctorinfoUpdateOne {
	duo.mutation.SetEdgesOfEducationlevelID(id)
	return duo
}

// SetNillableEdgesOfEducationlevelID sets the EdgesOfEducationlevel edge to Educationlevel by id if the given value is not nil.
func (duo *DoctorinfoUpdateOne) SetNillableEdgesOfEducationlevelID(id *int) *DoctorinfoUpdateOne {
	if id != nil {
		duo = duo.SetEdgesOfEducationlevelID(*id)
	}
	return duo
}

// SetEdgesOfEducationlevel sets the EdgesOfEducationlevel edge to Educationlevel.
func (duo *DoctorinfoUpdateOne) SetEdgesOfEducationlevel(e *Educationlevel) *DoctorinfoUpdateOne {
	return duo.SetEdgesOfEducationlevelID(e.ID)
}

// SetEdgesOfOfficeroomID sets the EdgesOfOfficeroom edge to Officeroom by id.
func (duo *DoctorinfoUpdateOne) SetEdgesOfOfficeroomID(id int) *DoctorinfoUpdateOne {
	duo.mutation.SetEdgesOfOfficeroomID(id)
	return duo
}

// SetNillableEdgesOfOfficeroomID sets the EdgesOfOfficeroom edge to Officeroom by id if the given value is not nil.
func (duo *DoctorinfoUpdateOne) SetNillableEdgesOfOfficeroomID(id *int) *DoctorinfoUpdateOne {
	if id != nil {
		duo = duo.SetEdgesOfOfficeroomID(*id)
	}
	return duo
}

// SetEdgesOfOfficeroom sets the EdgesOfOfficeroom edge to Officeroom.
func (duo *DoctorinfoUpdateOne) SetEdgesOfOfficeroom(o *Officeroom) *DoctorinfoUpdateOne {
	return duo.SetEdgesOfOfficeroomID(o.ID)
}

// SetEdgesOfPrenameID sets the EdgesOfPrename edge to Prename by id.
func (duo *DoctorinfoUpdateOne) SetEdgesOfPrenameID(id int) *DoctorinfoUpdateOne {
	duo.mutation.SetEdgesOfPrenameID(id)
	return duo
}

// SetNillableEdgesOfPrenameID sets the EdgesOfPrename edge to Prename by id if the given value is not nil.
func (duo *DoctorinfoUpdateOne) SetNillableEdgesOfPrenameID(id *int) *DoctorinfoUpdateOne {
	if id != nil {
		duo = duo.SetEdgesOfPrenameID(*id)
	}
	return duo
}

// SetEdgesOfPrename sets the EdgesOfPrename edge to Prename.
func (duo *DoctorinfoUpdateOne) SetEdgesOfPrename(p *Prename) *DoctorinfoUpdateOne {
	return duo.SetEdgesOfPrenameID(p.ID)
}

// SetEdgesOfDoctorID sets the EdgesOfDoctor edge to Doctor by id.
func (duo *DoctorinfoUpdateOne) SetEdgesOfDoctorID(id int) *DoctorinfoUpdateOne {
	duo.mutation.SetEdgesOfDoctorID(id)
	return duo
}

// SetNillableEdgesOfDoctorID sets the EdgesOfDoctor edge to Doctor by id if the given value is not nil.
func (duo *DoctorinfoUpdateOne) SetNillableEdgesOfDoctorID(id *int) *DoctorinfoUpdateOne {
	if id != nil {
		duo = duo.SetEdgesOfDoctorID(*id)
	}
	return duo
}

// SetEdgesOfDoctor sets the EdgesOfDoctor edge to Doctor.
func (duo *DoctorinfoUpdateOne) SetEdgesOfDoctor(d *Doctor) *DoctorinfoUpdateOne {
	return duo.SetEdgesOfDoctorID(d.ID)
}

// Mutation returns the DoctorinfoMutation object of the builder.
func (duo *DoctorinfoUpdateOne) Mutation() *DoctorinfoMutation {
	return duo.mutation
}

// ClearEdgesOfDepartment clears the EdgesOfDepartment edge to Department.
func (duo *DoctorinfoUpdateOne) ClearEdgesOfDepartment() *DoctorinfoUpdateOne {
	duo.mutation.ClearEdgesOfDepartment()
	return duo
}

// ClearEdgesOfEducationlevel clears the EdgesOfEducationlevel edge to Educationlevel.
func (duo *DoctorinfoUpdateOne) ClearEdgesOfEducationlevel() *DoctorinfoUpdateOne {
	duo.mutation.ClearEdgesOfEducationlevel()
	return duo
}

// ClearEdgesOfOfficeroom clears the EdgesOfOfficeroom edge to Officeroom.
func (duo *DoctorinfoUpdateOne) ClearEdgesOfOfficeroom() *DoctorinfoUpdateOne {
	duo.mutation.ClearEdgesOfOfficeroom()
	return duo
}

// ClearEdgesOfPrename clears the EdgesOfPrename edge to Prename.
func (duo *DoctorinfoUpdateOne) ClearEdgesOfPrename() *DoctorinfoUpdateOne {
	duo.mutation.ClearEdgesOfPrename()
	return duo
}

// ClearEdgesOfDoctor clears the EdgesOfDoctor edge to Doctor.
func (duo *DoctorinfoUpdateOne) ClearEdgesOfDoctor() *DoctorinfoUpdateOne {
	duo.mutation.ClearEdgesOfDoctor()
	return duo
}

// Save executes the query and returns the updated entity.
func (duo *DoctorinfoUpdateOne) Save(ctx context.Context) (*Doctorinfo, error) {
	if v, ok := duo.mutation.Doctorname(); ok {
		if err := doctorinfo.DoctornameValidator(v); err != nil {
			return nil, &ValidationError{Name: "doctorname", err: fmt.Errorf("ent: validator failed for field \"doctorname\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Doctorsurname(); ok {
		if err := doctorinfo.DoctorsurnameValidator(v); err != nil {
			return nil, &ValidationError{Name: "doctorsurname", err: fmt.Errorf("ent: validator failed for field \"doctorsurname\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Telephonenumber(); ok {
		if err := doctorinfo.TelephonenumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "telephonenumber", err: fmt.Errorf("ent: validator failed for field \"telephonenumber\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Licensenumber(); ok {
		if err := doctorinfo.LicensenumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "licensenumber", err: fmt.Errorf("ent: validator failed for field \"licensenumber\": %w", err)}
		}
	}

	var (
		err  error
		node *Doctorinfo
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DoctorinfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DoctorinfoUpdateOne) SaveX(ctx context.Context) *Doctorinfo {
	d, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return d
}

// Exec executes the query on the entity.
func (duo *DoctorinfoUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DoctorinfoUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DoctorinfoUpdateOne) sqlSave(ctx context.Context) (d *Doctorinfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   doctorinfo.Table,
			Columns: doctorinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: doctorinfo.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Doctorinfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.Doctorname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorinfo.FieldDoctorname,
		})
	}
	if value, ok := duo.mutation.Doctorsurname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorinfo.FieldDoctorsurname,
		})
	}
	if value, ok := duo.mutation.Telephonenumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorinfo.FieldTelephonenumber,
		})
	}
	if value, ok := duo.mutation.Licensenumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorinfo.FieldLicensenumber,
		})
	}
	if duo.mutation.EdgesOfDepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.EdgesOfDepartmentTable,
			Columns: []string{doctorinfo.EdgesOfDepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.EdgesOfDepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.EdgesOfDepartmentTable,
			Columns: []string{doctorinfo.EdgesOfDepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.EdgesOfEducationlevelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.EdgesOfEducationlevelTable,
			Columns: []string{doctorinfo.EdgesOfEducationlevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: educationlevel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.EdgesOfEducationlevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.EdgesOfEducationlevelTable,
			Columns: []string{doctorinfo.EdgesOfEducationlevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: educationlevel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.EdgesOfOfficeroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.EdgesOfOfficeroomTable,
			Columns: []string{doctorinfo.EdgesOfOfficeroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: officeroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.EdgesOfOfficeroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.EdgesOfOfficeroomTable,
			Columns: []string{doctorinfo.EdgesOfOfficeroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: officeroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.EdgesOfPrenameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.EdgesOfPrenameTable,
			Columns: []string{doctorinfo.EdgesOfPrenameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prename.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.EdgesOfPrenameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doctorinfo.EdgesOfPrenameTable,
			Columns: []string{doctorinfo.EdgesOfPrenameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prename.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.EdgesOfDoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   doctorinfo.EdgesOfDoctorTable,
			Columns: []string{doctorinfo.EdgesOfDoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.EdgesOfDoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   doctorinfo.EdgesOfDoctorTable,
			Columns: []string{doctorinfo.EdgesOfDoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	d = &Doctorinfo{config: duo.config}
	_spec.Assign = d.assignValues
	_spec.ScanValues = d.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doctorinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return d, nil
}
