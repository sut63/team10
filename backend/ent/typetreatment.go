// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team10/app/ent/typetreatment"
)

// Typetreatment is the model entity for the Typetreatment schema.
type Typetreatment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TypetreatmentQuery when eager-loading is set.
	Edges TypetreatmentEdges `json:"edges"`
}

// TypetreatmentEdges holds the relations/edges for other nodes in the graph.
type TypetreatmentEdges struct {
	// Treatment holds the value of the treatment edge.
	Treatment []*Treatment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TreatmentOrErr returns the Treatment value or an error if the edge
// was not loaded in eager-loading.
func (e TypetreatmentEdges) TreatmentOrErr() ([]*Treatment, error) {
	if e.loadedTypes[0] {
		return e.Treatment, nil
	}
	return nil, &NotLoadedError{edge: "treatment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Typetreatment) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // type
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Typetreatment fields.
func (t *Typetreatment) assignValues(values ...interface{}) error {
	if m, n := len(values), len(typetreatment.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field type", values[0])
	} else if value.Valid {
		t.Type = value.String
	}
	return nil
}

// QueryTreatment queries the treatment edge of the Typetreatment.
func (t *Typetreatment) QueryTreatment() *TreatmentQuery {
	return (&TypetreatmentClient{config: t.config}).QueryTreatment(t)
}

// Update returns a builder for updating this Typetreatment.
// Note that, you need to call Typetreatment.Unwrap() before calling this method, if this Typetreatment
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Typetreatment) Update() *TypetreatmentUpdateOne {
	return (&TypetreatmentClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Typetreatment) Unwrap() *Typetreatment {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Typetreatment is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Typetreatment) String() string {
	var builder strings.Builder
	builder.WriteString("Typetreatment(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", type=")
	builder.WriteString(t.Type)
	builder.WriteByte(')')
	return builder.String()
}

// Typetreatments is a parsable slice of Typetreatment.
type Typetreatments []*Typetreatment

func (t Typetreatments) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
