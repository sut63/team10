// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team10/app/ent/financier"
	"github.com/team10/app/ent/user"
)

// Financier is the model entity for the Financier schema.
type Financier struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FinancierQuery when eager-loading is set.
	Edges   FinancierEdges `json:"edges"`
	user_id *int
}

// FinancierEdges holds the relations/edges for other nodes in the graph.
type FinancierEdges struct {
	// EdgesOfBills holds the value of the EdgesOfBills edge.
	EdgesOfBills []*Bill
	// EdgesOfUser holds the value of the EdgesOfUser edge.
	EdgesOfUser *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EdgesOfBillsOrErr returns the EdgesOfBills value or an error if the edge
// was not loaded in eager-loading.
func (e FinancierEdges) EdgesOfBillsOrErr() ([]*Bill, error) {
	if e.loadedTypes[0] {
		return e.EdgesOfBills, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfBills"}
}

// EdgesOfUserOrErr returns the EdgesOfUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FinancierEdges) EdgesOfUserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.EdgesOfUser == nil {
			// The edge EdgesOfUser was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.EdgesOfUser, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfUser"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Financier) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Name
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Financier) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Financier fields.
func (f *Financier) assignValues(values ...interface{}) error {
	if m, n := len(values), len(financier.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	f.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Name", values[0])
	} else if value.Valid {
		f.Name = value.String
	}
	values = values[1:]
	if len(values) == len(financier.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_id", value)
		} else if value.Valid {
			f.user_id = new(int)
			*f.user_id = int(value.Int64)
		}
	}
	return nil
}

// QueryEdgesOfBills queries the EdgesOfBills edge of the Financier.
func (f *Financier) QueryEdgesOfBills() *BillQuery {
	return (&FinancierClient{config: f.config}).QueryEdgesOfBills(f)
}

// QueryEdgesOfUser queries the EdgesOfUser edge of the Financier.
func (f *Financier) QueryEdgesOfUser() *UserQuery {
	return (&FinancierClient{config: f.config}).QueryEdgesOfUser(f)
}

// Update returns a builder for updating this Financier.
// Note that, you need to call Financier.Unwrap() before calling this method, if this Financier
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Financier) Update() *FinancierUpdateOne {
	return (&FinancierClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (f *Financier) Unwrap() *Financier {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Financier is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Financier) String() string {
	var builder strings.Builder
	builder.WriteString("Financier(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", Name=")
	builder.WriteString(f.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Financiers is a parsable slice of Financier.
type Financiers []*Financier

func (f Financiers) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
