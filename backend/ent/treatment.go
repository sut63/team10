// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team10/app/ent/doctorinfo"
	"github.com/team10/app/ent/patientrecord"
	"github.com/team10/app/ent/treatment"
	"github.com/team10/app/ent/typetreatment"
	"github.com/team10/app/ent/unpaybill"
)

// Treatment is the model entity for the Treatment schema.
type Treatment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Treatment holds the value of the "treatment" field.
	Treatment string `json:"treatment,omitempty"`
	// Datetime holds the value of the "datetime" field.
	Datetime time.Time `json:"datetime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TreatmentQuery when eager-loading is set.
	Edges            TreatmentEdges `json:"edges"`
	doctorinfo_id    *int
	patientrecord_id *int
	typetreatment_id *int
}

// TreatmentEdges holds the relations/edges for other nodes in the graph.
type TreatmentEdges struct {
	// Typetreatment holds the value of the typetreatment edge.
	Typetreatment *Typetreatment
	// Patientrecord holds the value of the patientrecord edge.
	Patientrecord *Patientrecord
	// Doctorinfo holds the value of the doctorinfo edge.
	Doctorinfo *Doctorinfo
	// Unpaybills holds the value of the unpaybills edge.
	Unpaybills *Unpaybill
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TypetreatmentOrErr returns the Typetreatment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TreatmentEdges) TypetreatmentOrErr() (*Typetreatment, error) {
	if e.loadedTypes[0] {
		if e.Typetreatment == nil {
			// The edge typetreatment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: typetreatment.Label}
		}
		return e.Typetreatment, nil
	}
	return nil, &NotLoadedError{edge: "typetreatment"}
}

// PatientrecordOrErr returns the Patientrecord value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TreatmentEdges) PatientrecordOrErr() (*Patientrecord, error) {
	if e.loadedTypes[1] {
		if e.Patientrecord == nil {
			// The edge patientrecord was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patientrecord.Label}
		}
		return e.Patientrecord, nil
	}
	return nil, &NotLoadedError{edge: "patientrecord"}
}

// DoctorinfoOrErr returns the Doctorinfo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TreatmentEdges) DoctorinfoOrErr() (*Doctorinfo, error) {
	if e.loadedTypes[2] {
		if e.Doctorinfo == nil {
			// The edge doctorinfo was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: doctorinfo.Label}
		}
		return e.Doctorinfo, nil
	}
	return nil, &NotLoadedError{edge: "doctorinfo"}
}

// UnpaybillsOrErr returns the Unpaybills value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TreatmentEdges) UnpaybillsOrErr() (*Unpaybill, error) {
	if e.loadedTypes[3] {
		if e.Unpaybills == nil {
			// The edge unpaybills was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: unpaybill.Label}
		}
		return e.Unpaybills, nil
	}
	return nil, &NotLoadedError{edge: "unpaybills"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Treatment) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // treatment
		&sql.NullTime{},   // datetime
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Treatment) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // doctorinfo_id
		&sql.NullInt64{}, // patientrecord_id
		&sql.NullInt64{}, // typetreatment_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Treatment fields.
func (t *Treatment) assignValues(values ...interface{}) error {
	if m, n := len(values), len(treatment.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field treatment", values[0])
	} else if value.Valid {
		t.Treatment = value.String
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field datetime", values[1])
	} else if value.Valid {
		t.Datetime = value.Time
	}
	values = values[2:]
	if len(values) == len(treatment.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field doctorinfo_id", value)
		} else if value.Valid {
			t.doctorinfo_id = new(int)
			*t.doctorinfo_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field patientrecord_id", value)
		} else if value.Valid {
			t.patientrecord_id = new(int)
			*t.patientrecord_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field typetreatment_id", value)
		} else if value.Valid {
			t.typetreatment_id = new(int)
			*t.typetreatment_id = int(value.Int64)
		}
	}
	return nil
}

// QueryTypetreatment queries the typetreatment edge of the Treatment.
func (t *Treatment) QueryTypetreatment() *TypetreatmentQuery {
	return (&TreatmentClient{config: t.config}).QueryTypetreatment(t)
}

// QueryPatientrecord queries the patientrecord edge of the Treatment.
func (t *Treatment) QueryPatientrecord() *PatientrecordQuery {
	return (&TreatmentClient{config: t.config}).QueryPatientrecord(t)
}

// QueryDoctorinfo queries the doctorinfo edge of the Treatment.
func (t *Treatment) QueryDoctorinfo() *DoctorinfoQuery {
	return (&TreatmentClient{config: t.config}).QueryDoctorinfo(t)
}

// QueryUnpaybills queries the unpaybills edge of the Treatment.
func (t *Treatment) QueryUnpaybills() *UnpaybillQuery {
	return (&TreatmentClient{config: t.config}).QueryUnpaybills(t)
}

// Update returns a builder for updating this Treatment.
// Note that, you need to call Treatment.Unwrap() before calling this method, if this Treatment
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Treatment) Update() *TreatmentUpdateOne {
	return (&TreatmentClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Treatment) Unwrap() *Treatment {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Treatment is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Treatment) String() string {
	var builder strings.Builder
	builder.WriteString("Treatment(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", treatment=")
	builder.WriteString(t.Treatment)
	builder.WriteString(", datetime=")
	builder.WriteString(t.Datetime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Treatments is a parsable slice of Treatment.
type Treatments []*Treatment

func (t Treatments) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
