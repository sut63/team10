// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team10/app/ent/doctor"
	"github.com/team10/app/ent/patientrecord"
	"github.com/team10/app/ent/treatment"
	"github.com/team10/app/ent/typetreatment"
	"github.com/team10/app/ent/unpaybill"
)

// Treatment is the model entity for the Treatment schema.
type Treatment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Symptom holds the value of the "Symptom" field.
	Symptom string `json:"Symptom,omitempty"`
	// Treat holds the value of the "Treat" field.
	Treat string `json:"Treat,omitempty"`
	// Medicine holds the value of the "Medicine" field.
	Medicine string `json:"Medicine,omitempty"`
	// Datetreat holds the value of the "Datetreat" field.
	Datetreat time.Time `json:"Datetreat,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TreatmentQuery when eager-loading is set.
	Edges            TreatmentEdges `json:"edges"`
	doctor_id        *int
	patientrecord_id *int
	typetreatment_id *int
}

// TreatmentEdges holds the relations/edges for other nodes in the graph.
type TreatmentEdges struct {
	// EdgesOfTypetreatment holds the value of the EdgesOfTypetreatment edge.
	EdgesOfTypetreatment *Typetreatment
	// EdgesOfPatientrecord holds the value of the EdgesOfPatientrecord edge.
	EdgesOfPatientrecord *Patientrecord
	// EdgesOfDoctor holds the value of the EdgesOfDoctor edge.
	EdgesOfDoctor *Doctor
	// EdgesOfUnpaybills holds the value of the EdgesOfUnpaybills edge.
	EdgesOfUnpaybills *Unpaybill
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// EdgesOfTypetreatmentOrErr returns the EdgesOfTypetreatment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TreatmentEdges) EdgesOfTypetreatmentOrErr() (*Typetreatment, error) {
	if e.loadedTypes[0] {
		if e.EdgesOfTypetreatment == nil {
			// The edge EdgesOfTypetreatment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: typetreatment.Label}
		}
		return e.EdgesOfTypetreatment, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfTypetreatment"}
}

// EdgesOfPatientrecordOrErr returns the EdgesOfPatientrecord value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TreatmentEdges) EdgesOfPatientrecordOrErr() (*Patientrecord, error) {
	if e.loadedTypes[1] {
		if e.EdgesOfPatientrecord == nil {
			// The edge EdgesOfPatientrecord was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patientrecord.Label}
		}
		return e.EdgesOfPatientrecord, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfPatientrecord"}
}

// EdgesOfDoctorOrErr returns the EdgesOfDoctor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TreatmentEdges) EdgesOfDoctorOrErr() (*Doctor, error) {
	if e.loadedTypes[2] {
		if e.EdgesOfDoctor == nil {
			// The edge EdgesOfDoctor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: doctor.Label}
		}
		return e.EdgesOfDoctor, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfDoctor"}
}

// EdgesOfUnpaybillsOrErr returns the EdgesOfUnpaybills value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TreatmentEdges) EdgesOfUnpaybillsOrErr() (*Unpaybill, error) {
	if e.loadedTypes[3] {
		if e.EdgesOfUnpaybills == nil {
			// The edge EdgesOfUnpaybills was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: unpaybill.Label}
		}
		return e.EdgesOfUnpaybills, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfUnpaybills"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Treatment) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Symptom
		&sql.NullString{}, // Treat
		&sql.NullString{}, // Medicine
		&sql.NullTime{},   // Datetreat
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Treatment) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // doctor_id
		&sql.NullInt64{}, // patientrecord_id
		&sql.NullInt64{}, // typetreatment_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Treatment fields.
func (t *Treatment) assignValues(values ...interface{}) error {
	if m, n := len(values), len(treatment.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Symptom", values[0])
	} else if value.Valid {
		t.Symptom = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Treat", values[1])
	} else if value.Valid {
		t.Treat = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Medicine", values[2])
	} else if value.Valid {
		t.Medicine = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field Datetreat", values[3])
	} else if value.Valid {
		t.Datetreat = value.Time
	}
	values = values[4:]
	if len(values) == len(treatment.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field doctor_id", value)
		} else if value.Valid {
			t.doctor_id = new(int)
			*t.doctor_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field patientrecord_id", value)
		} else if value.Valid {
			t.patientrecord_id = new(int)
			*t.patientrecord_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field typetreatment_id", value)
		} else if value.Valid {
			t.typetreatment_id = new(int)
			*t.typetreatment_id = int(value.Int64)
		}
	}
	return nil
}

// QueryEdgesOfTypetreatment queries the EdgesOfTypetreatment edge of the Treatment.
func (t *Treatment) QueryEdgesOfTypetreatment() *TypetreatmentQuery {
	return (&TreatmentClient{config: t.config}).QueryEdgesOfTypetreatment(t)
}

// QueryEdgesOfPatientrecord queries the EdgesOfPatientrecord edge of the Treatment.
func (t *Treatment) QueryEdgesOfPatientrecord() *PatientrecordQuery {
	return (&TreatmentClient{config: t.config}).QueryEdgesOfPatientrecord(t)
}

// QueryEdgesOfDoctor queries the EdgesOfDoctor edge of the Treatment.
func (t *Treatment) QueryEdgesOfDoctor() *DoctorQuery {
	return (&TreatmentClient{config: t.config}).QueryEdgesOfDoctor(t)
}

// QueryEdgesOfUnpaybills queries the EdgesOfUnpaybills edge of the Treatment.
func (t *Treatment) QueryEdgesOfUnpaybills() *UnpaybillQuery {
	return (&TreatmentClient{config: t.config}).QueryEdgesOfUnpaybills(t)
}

// Update returns a builder for updating this Treatment.
// Note that, you need to call Treatment.Unwrap() before calling this method, if this Treatment
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Treatment) Update() *TreatmentUpdateOne {
	return (&TreatmentClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Treatment) Unwrap() *Treatment {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Treatment is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Treatment) String() string {
	var builder strings.Builder
	builder.WriteString("Treatment(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", Symptom=")
	builder.WriteString(t.Symptom)
	builder.WriteString(", Treat=")
	builder.WriteString(t.Treat)
	builder.WriteString(", Medicine=")
	builder.WriteString(t.Medicine)
	builder.WriteString(", Datetreat=")
	builder.WriteString(t.Datetreat.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Treatments is a parsable slice of Treatment.
type Treatments []*Treatment

func (t Treatments) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
