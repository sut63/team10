// Code generated by entc, DO NOT EDIT.

package patientrights

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team10/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PermissionDate applies equality check predicate on the "PermissionDate" field. It's identical to PermissionDateEQ.
func PermissionDate(v time.Time) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPermissionDate), v))
	})
}

// PermissionDateEQ applies the EQ predicate on the "PermissionDate" field.
func PermissionDateEQ(v time.Time) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPermissionDate), v))
	})
}

// PermissionDateNEQ applies the NEQ predicate on the "PermissionDate" field.
func PermissionDateNEQ(v time.Time) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPermissionDate), v))
	})
}

// PermissionDateIn applies the In predicate on the "PermissionDate" field.
func PermissionDateIn(vs ...time.Time) predicate.Patientrights {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrights(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPermissionDate), v...))
	})
}

// PermissionDateNotIn applies the NotIn predicate on the "PermissionDate" field.
func PermissionDateNotIn(vs ...time.Time) predicate.Patientrights {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrights(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPermissionDate), v...))
	})
}

// PermissionDateGT applies the GT predicate on the "PermissionDate" field.
func PermissionDateGT(v time.Time) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPermissionDate), v))
	})
}

// PermissionDateGTE applies the GTE predicate on the "PermissionDate" field.
func PermissionDateGTE(v time.Time) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPermissionDate), v))
	})
}

// PermissionDateLT applies the LT predicate on the "PermissionDate" field.
func PermissionDateLT(v time.Time) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPermissionDate), v))
	})
}

// PermissionDateLTE applies the LTE predicate on the "PermissionDate" field.
func PermissionDateLTE(v time.Time) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPermissionDate), v))
	})
}

// HasEdgesOfPatientrightsPatientrightstype applies the HasEdge predicate on the "EdgesOfPatientrightsPatientrightstype" edge.
func HasEdgesOfPatientrightsPatientrightstype() predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfPatientrightsPatientrightstypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfPatientrightsPatientrightstypeTable, EdgesOfPatientrightsPatientrightstypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfPatientrightsPatientrightstypeWith applies the HasEdge predicate on the "EdgesOfPatientrightsPatientrightstype" edge with a given conditions (other predicates).
func HasEdgesOfPatientrightsPatientrightstypeWith(preds ...predicate.Patientrightstype) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfPatientrightsPatientrightstypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfPatientrightsPatientrightstypeTable, EdgesOfPatientrightsPatientrightstypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEdgesOfPatientrightsInsurance applies the HasEdge predicate on the "EdgesOfPatientrightsInsurance" edge.
func HasEdgesOfPatientrightsInsurance() predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfPatientrightsInsuranceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfPatientrightsInsuranceTable, EdgesOfPatientrightsInsuranceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfPatientrightsInsuranceWith applies the HasEdge predicate on the "EdgesOfPatientrightsInsurance" edge with a given conditions (other predicates).
func HasEdgesOfPatientrightsInsuranceWith(preds ...predicate.Insurance) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfPatientrightsInsuranceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfPatientrightsInsuranceTable, EdgesOfPatientrightsInsuranceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEdgesOfPatientrightsPatientrecord applies the HasEdge predicate on the "EdgesOfPatientrightsPatientrecord" edge.
func HasEdgesOfPatientrightsPatientrecord() predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfPatientrightsPatientrecordTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfPatientrightsPatientrecordTable, EdgesOfPatientrightsPatientrecordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfPatientrightsPatientrecordWith applies the HasEdge predicate on the "EdgesOfPatientrightsPatientrecord" edge with a given conditions (other predicates).
func HasEdgesOfPatientrightsPatientrecordWith(preds ...predicate.Patientrecord) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfPatientrightsPatientrecordInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfPatientrightsPatientrecordTable, EdgesOfPatientrightsPatientrecordColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEdgesOfPatientrightsMedicalrecordstaff applies the HasEdge predicate on the "EdgesOfPatientrightsMedicalrecordstaff" edge.
func HasEdgesOfPatientrightsMedicalrecordstaff() predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfPatientrightsMedicalrecordstaffTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfPatientrightsMedicalrecordstaffTable, EdgesOfPatientrightsMedicalrecordstaffColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfPatientrightsMedicalrecordstaffWith applies the HasEdge predicate on the "EdgesOfPatientrightsMedicalrecordstaff" edge with a given conditions (other predicates).
func HasEdgesOfPatientrightsMedicalrecordstaffWith(preds ...predicate.Medicalrecordstaff) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfPatientrightsMedicalrecordstaffInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfPatientrightsMedicalrecordstaffTable, EdgesOfPatientrightsMedicalrecordstaffColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Patientrights) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Patientrights) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Patientrights) predicate.Patientrights {
	return predicate.Patientrights(func(s *sql.Selector) {
		p(s.Not())
	})
}
