// Code generated by entc, DO NOT EDIT.

package treatment

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team10/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Treatment applies equality check predicate on the "treatment" field. It's identical to TreatmentEQ.
func Treatment(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreatment), v))
	})
}

// Datetime applies equality check predicate on the "datetime" field. It's identical to DatetimeEQ.
func Datetime(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDatetime), v))
	})
}

// TreatmentEQ applies the EQ predicate on the "treatment" field.
func TreatmentEQ(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreatment), v))
	})
}

// TreatmentNEQ applies the NEQ predicate on the "treatment" field.
func TreatmentNEQ(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTreatment), v))
	})
}

// TreatmentIn applies the In predicate on the "treatment" field.
func TreatmentIn(vs ...string) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTreatment), v...))
	})
}

// TreatmentNotIn applies the NotIn predicate on the "treatment" field.
func TreatmentNotIn(vs ...string) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTreatment), v...))
	})
}

// TreatmentGT applies the GT predicate on the "treatment" field.
func TreatmentGT(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTreatment), v))
	})
}

// TreatmentGTE applies the GTE predicate on the "treatment" field.
func TreatmentGTE(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTreatment), v))
	})
}

// TreatmentLT applies the LT predicate on the "treatment" field.
func TreatmentLT(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTreatment), v))
	})
}

// TreatmentLTE applies the LTE predicate on the "treatment" field.
func TreatmentLTE(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTreatment), v))
	})
}

// TreatmentContains applies the Contains predicate on the "treatment" field.
func TreatmentContains(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTreatment), v))
	})
}

// TreatmentHasPrefix applies the HasPrefix predicate on the "treatment" field.
func TreatmentHasPrefix(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTreatment), v))
	})
}

// TreatmentHasSuffix applies the HasSuffix predicate on the "treatment" field.
func TreatmentHasSuffix(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTreatment), v))
	})
}

// TreatmentEqualFold applies the EqualFold predicate on the "treatment" field.
func TreatmentEqualFold(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTreatment), v))
	})
}

// TreatmentContainsFold applies the ContainsFold predicate on the "treatment" field.
func TreatmentContainsFold(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTreatment), v))
	})
}

// DatetimeEQ applies the EQ predicate on the "datetime" field.
func DatetimeEQ(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDatetime), v))
	})
}

// DatetimeNEQ applies the NEQ predicate on the "datetime" field.
func DatetimeNEQ(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDatetime), v))
	})
}

// DatetimeIn applies the In predicate on the "datetime" field.
func DatetimeIn(vs ...time.Time) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDatetime), v...))
	})
}

// DatetimeNotIn applies the NotIn predicate on the "datetime" field.
func DatetimeNotIn(vs ...time.Time) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDatetime), v...))
	})
}

// DatetimeGT applies the GT predicate on the "datetime" field.
func DatetimeGT(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDatetime), v))
	})
}

// DatetimeGTE applies the GTE predicate on the "datetime" field.
func DatetimeGTE(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDatetime), v))
	})
}

// DatetimeLT applies the LT predicate on the "datetime" field.
func DatetimeLT(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDatetime), v))
	})
}

// DatetimeLTE applies the LTE predicate on the "datetime" field.
func DatetimeLTE(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDatetime), v))
	})
}

// HasTypetreatment applies the HasEdge predicate on the "typetreatment" edge.
func HasTypetreatment() predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TypetreatmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TypetreatmentTable, TypetreatmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTypetreatmentWith applies the HasEdge predicate on the "typetreatment" edge with a given conditions (other predicates).
func HasTypetreatmentWith(preds ...predicate.Typetreatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TypetreatmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TypetreatmentTable, TypetreatmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatientrecord applies the HasEdge predicate on the "patientrecord" edge.
func HasPatientrecord() predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientrecordTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientrecordTable, PatientrecordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientrecordWith applies the HasEdge predicate on the "patientrecord" edge with a given conditions (other predicates).
func HasPatientrecordWith(preds ...predicate.Patientrecord) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientrecordInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientrecordTable, PatientrecordColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDoctorinfo applies the HasEdge predicate on the "doctorinfo" edge.
func HasDoctorinfo() predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorinfoTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorinfoTable, DoctorinfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDoctorinfoWith applies the HasEdge predicate on the "doctorinfo" edge with a given conditions (other predicates).
func HasDoctorinfoWith(preds ...predicate.Doctorinfo) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorinfoInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorinfoTable, DoctorinfoColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUnpaybills applies the HasEdge predicate on the "unpaybills" edge.
func HasUnpaybills() predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UnpaybillsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, UnpaybillsTable, UnpaybillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUnpaybillsWith applies the HasEdge predicate on the "unpaybills" edge with a given conditions (other predicates).
func HasUnpaybillsWith(preds ...predicate.Unpaybill) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UnpaybillsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, UnpaybillsTable, UnpaybillsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Treatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Treatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Treatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		p(s.Not())
	})
}
