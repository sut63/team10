// Code generated by entc, DO NOT EDIT.

package treatment

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team10/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Treatment applies equality check predicate on the "Treatment" field. It's identical to TreatmentEQ.
func Treatment(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreatment), v))
	})
}

// Datetreat applies equality check predicate on the "Datetreat" field. It's identical to DatetreatEQ.
func Datetreat(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDatetreat), v))
	})
}

// TreatmentEQ applies the EQ predicate on the "Treatment" field.
func TreatmentEQ(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreatment), v))
	})
}

// TreatmentNEQ applies the NEQ predicate on the "Treatment" field.
func TreatmentNEQ(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTreatment), v))
	})
}

// TreatmentIn applies the In predicate on the "Treatment" field.
func TreatmentIn(vs ...string) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTreatment), v...))
	})
}

// TreatmentNotIn applies the NotIn predicate on the "Treatment" field.
func TreatmentNotIn(vs ...string) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTreatment), v...))
	})
}

// TreatmentGT applies the GT predicate on the "Treatment" field.
func TreatmentGT(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTreatment), v))
	})
}

// TreatmentGTE applies the GTE predicate on the "Treatment" field.
func TreatmentGTE(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTreatment), v))
	})
}

// TreatmentLT applies the LT predicate on the "Treatment" field.
func TreatmentLT(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTreatment), v))
	})
}

// TreatmentLTE applies the LTE predicate on the "Treatment" field.
func TreatmentLTE(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTreatment), v))
	})
}

// TreatmentContains applies the Contains predicate on the "Treatment" field.
func TreatmentContains(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTreatment), v))
	})
}

// TreatmentHasPrefix applies the HasPrefix predicate on the "Treatment" field.
func TreatmentHasPrefix(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTreatment), v))
	})
}

// TreatmentHasSuffix applies the HasSuffix predicate on the "Treatment" field.
func TreatmentHasSuffix(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTreatment), v))
	})
}

// TreatmentEqualFold applies the EqualFold predicate on the "Treatment" field.
func TreatmentEqualFold(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTreatment), v))
	})
}

// TreatmentContainsFold applies the ContainsFold predicate on the "Treatment" field.
func TreatmentContainsFold(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTreatment), v))
	})
}

// DatetreatEQ applies the EQ predicate on the "Datetreat" field.
func DatetreatEQ(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDatetreat), v))
	})
}

// DatetreatNEQ applies the NEQ predicate on the "Datetreat" field.
func DatetreatNEQ(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDatetreat), v))
	})
}

// DatetreatIn applies the In predicate on the "Datetreat" field.
func DatetreatIn(vs ...time.Time) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDatetreat), v...))
	})
}

// DatetreatNotIn applies the NotIn predicate on the "Datetreat" field.
func DatetreatNotIn(vs ...time.Time) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDatetreat), v...))
	})
}

// DatetreatGT applies the GT predicate on the "Datetreat" field.
func DatetreatGT(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDatetreat), v))
	})
}

// DatetreatGTE applies the GTE predicate on the "Datetreat" field.
func DatetreatGTE(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDatetreat), v))
	})
}

// DatetreatLT applies the LT predicate on the "Datetreat" field.
func DatetreatLT(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDatetreat), v))
	})
}

// DatetreatLTE applies the LTE predicate on the "Datetreat" field.
func DatetreatLTE(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDatetreat), v))
	})
}

// HasEdgesOfTypetreatment applies the HasEdge predicate on the "EdgesOfTypetreatment" edge.
func HasEdgesOfTypetreatment() predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfTypetreatmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfTypetreatmentTable, EdgesOfTypetreatmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfTypetreatmentWith applies the HasEdge predicate on the "EdgesOfTypetreatment" edge with a given conditions (other predicates).
func HasEdgesOfTypetreatmentWith(preds ...predicate.Typetreatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfTypetreatmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfTypetreatmentTable, EdgesOfTypetreatmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEdgesOfPatientrecord applies the HasEdge predicate on the "EdgesOfPatientrecord" edge.
func HasEdgesOfPatientrecord() predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfPatientrecordTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfPatientrecordTable, EdgesOfPatientrecordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfPatientrecordWith applies the HasEdge predicate on the "EdgesOfPatientrecord" edge with a given conditions (other predicates).
func HasEdgesOfPatientrecordWith(preds ...predicate.Patientrecord) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfPatientrecordInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfPatientrecordTable, EdgesOfPatientrecordColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEdgesOfDoctor applies the HasEdge predicate on the "EdgesOfDoctor" edge.
func HasEdgesOfDoctor() predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfDoctorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfDoctorTable, EdgesOfDoctorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfDoctorWith applies the HasEdge predicate on the "EdgesOfDoctor" edge with a given conditions (other predicates).
func HasEdgesOfDoctorWith(preds ...predicate.Doctor) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfDoctorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfDoctorTable, EdgesOfDoctorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEdgesOfUnpaybills applies the HasEdge predicate on the "EdgesOfUnpaybills" edge.
func HasEdgesOfUnpaybills() predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfUnpaybillsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EdgesOfUnpaybillsTable, EdgesOfUnpaybillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfUnpaybillsWith applies the HasEdge predicate on the "EdgesOfUnpaybills" edge with a given conditions (other predicates).
func HasEdgesOfUnpaybillsWith(preds ...predicate.Unpaybill) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfUnpaybillsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EdgesOfUnpaybillsTable, EdgesOfUnpaybillsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Treatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Treatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Treatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		p(s.Not())
	})
}
