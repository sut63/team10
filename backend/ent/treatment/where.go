// Code generated by entc, DO NOT EDIT.

package treatment

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team10/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Symptom applies equality check predicate on the "Symptom" field. It's identical to SymptomEQ.
func Symptom(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymptom), v))
	})
}

// Treat applies equality check predicate on the "Treat" field. It's identical to TreatEQ.
func Treat(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreat), v))
	})
}

// Medicine applies equality check predicate on the "Medicine" field. It's identical to MedicineEQ.
func Medicine(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicine), v))
	})
}

// Datetreat applies equality check predicate on the "Datetreat" field. It's identical to DatetreatEQ.
func Datetreat(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDatetreat), v))
	})
}

// SymptomEQ applies the EQ predicate on the "Symptom" field.
func SymptomEQ(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymptom), v))
	})
}

// SymptomNEQ applies the NEQ predicate on the "Symptom" field.
func SymptomNEQ(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSymptom), v))
	})
}

// SymptomIn applies the In predicate on the "Symptom" field.
func SymptomIn(vs ...string) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSymptom), v...))
	})
}

// SymptomNotIn applies the NotIn predicate on the "Symptom" field.
func SymptomNotIn(vs ...string) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSymptom), v...))
	})
}

// SymptomGT applies the GT predicate on the "Symptom" field.
func SymptomGT(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSymptom), v))
	})
}

// SymptomGTE applies the GTE predicate on the "Symptom" field.
func SymptomGTE(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSymptom), v))
	})
}

// SymptomLT applies the LT predicate on the "Symptom" field.
func SymptomLT(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSymptom), v))
	})
}

// SymptomLTE applies the LTE predicate on the "Symptom" field.
func SymptomLTE(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSymptom), v))
	})
}

// SymptomContains applies the Contains predicate on the "Symptom" field.
func SymptomContains(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSymptom), v))
	})
}

// SymptomHasPrefix applies the HasPrefix predicate on the "Symptom" field.
func SymptomHasPrefix(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSymptom), v))
	})
}

// SymptomHasSuffix applies the HasSuffix predicate on the "Symptom" field.
func SymptomHasSuffix(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSymptom), v))
	})
}

// SymptomEqualFold applies the EqualFold predicate on the "Symptom" field.
func SymptomEqualFold(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSymptom), v))
	})
}

// SymptomContainsFold applies the ContainsFold predicate on the "Symptom" field.
func SymptomContainsFold(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSymptom), v))
	})
}

// TreatEQ applies the EQ predicate on the "Treat" field.
func TreatEQ(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreat), v))
	})
}

// TreatNEQ applies the NEQ predicate on the "Treat" field.
func TreatNEQ(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTreat), v))
	})
}

// TreatIn applies the In predicate on the "Treat" field.
func TreatIn(vs ...string) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTreat), v...))
	})
}

// TreatNotIn applies the NotIn predicate on the "Treat" field.
func TreatNotIn(vs ...string) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTreat), v...))
	})
}

// TreatGT applies the GT predicate on the "Treat" field.
func TreatGT(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTreat), v))
	})
}

// TreatGTE applies the GTE predicate on the "Treat" field.
func TreatGTE(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTreat), v))
	})
}

// TreatLT applies the LT predicate on the "Treat" field.
func TreatLT(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTreat), v))
	})
}

// TreatLTE applies the LTE predicate on the "Treat" field.
func TreatLTE(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTreat), v))
	})
}

// TreatContains applies the Contains predicate on the "Treat" field.
func TreatContains(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTreat), v))
	})
}

// TreatHasPrefix applies the HasPrefix predicate on the "Treat" field.
func TreatHasPrefix(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTreat), v))
	})
}

// TreatHasSuffix applies the HasSuffix predicate on the "Treat" field.
func TreatHasSuffix(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTreat), v))
	})
}

// TreatEqualFold applies the EqualFold predicate on the "Treat" field.
func TreatEqualFold(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTreat), v))
	})
}

// TreatContainsFold applies the ContainsFold predicate on the "Treat" field.
func TreatContainsFold(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTreat), v))
	})
}

// MedicineEQ applies the EQ predicate on the "Medicine" field.
func MedicineEQ(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicine), v))
	})
}

// MedicineNEQ applies the NEQ predicate on the "Medicine" field.
func MedicineNEQ(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMedicine), v))
	})
}

// MedicineIn applies the In predicate on the "Medicine" field.
func MedicineIn(vs ...string) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMedicine), v...))
	})
}

// MedicineNotIn applies the NotIn predicate on the "Medicine" field.
func MedicineNotIn(vs ...string) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMedicine), v...))
	})
}

// MedicineGT applies the GT predicate on the "Medicine" field.
func MedicineGT(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMedicine), v))
	})
}

// MedicineGTE applies the GTE predicate on the "Medicine" field.
func MedicineGTE(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMedicine), v))
	})
}

// MedicineLT applies the LT predicate on the "Medicine" field.
func MedicineLT(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMedicine), v))
	})
}

// MedicineLTE applies the LTE predicate on the "Medicine" field.
func MedicineLTE(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMedicine), v))
	})
}

// MedicineContains applies the Contains predicate on the "Medicine" field.
func MedicineContains(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMedicine), v))
	})
}

// MedicineHasPrefix applies the HasPrefix predicate on the "Medicine" field.
func MedicineHasPrefix(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMedicine), v))
	})
}

// MedicineHasSuffix applies the HasSuffix predicate on the "Medicine" field.
func MedicineHasSuffix(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMedicine), v))
	})
}

// MedicineEqualFold applies the EqualFold predicate on the "Medicine" field.
func MedicineEqualFold(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMedicine), v))
	})
}

// MedicineContainsFold applies the ContainsFold predicate on the "Medicine" field.
func MedicineContainsFold(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMedicine), v))
	})
}

// DatetreatEQ applies the EQ predicate on the "Datetreat" field.
func DatetreatEQ(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDatetreat), v))
	})
}

// DatetreatNEQ applies the NEQ predicate on the "Datetreat" field.
func DatetreatNEQ(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDatetreat), v))
	})
}

// DatetreatIn applies the In predicate on the "Datetreat" field.
func DatetreatIn(vs ...time.Time) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDatetreat), v...))
	})
}

// DatetreatNotIn applies the NotIn predicate on the "Datetreat" field.
func DatetreatNotIn(vs ...time.Time) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDatetreat), v...))
	})
}

// DatetreatGT applies the GT predicate on the "Datetreat" field.
func DatetreatGT(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDatetreat), v))
	})
}

// DatetreatGTE applies the GTE predicate on the "Datetreat" field.
func DatetreatGTE(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDatetreat), v))
	})
}

// DatetreatLT applies the LT predicate on the "Datetreat" field.
func DatetreatLT(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDatetreat), v))
	})
}

// DatetreatLTE applies the LTE predicate on the "Datetreat" field.
func DatetreatLTE(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDatetreat), v))
	})
}

// HasEdgesOfTypetreatment applies the HasEdge predicate on the "EdgesOfTypetreatment" edge.
func HasEdgesOfTypetreatment() predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfTypetreatmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfTypetreatmentTable, EdgesOfTypetreatmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfTypetreatmentWith applies the HasEdge predicate on the "EdgesOfTypetreatment" edge with a given conditions (other predicates).
func HasEdgesOfTypetreatmentWith(preds ...predicate.Typetreatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfTypetreatmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfTypetreatmentTable, EdgesOfTypetreatmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEdgesOfPatientrecord applies the HasEdge predicate on the "EdgesOfPatientrecord" edge.
func HasEdgesOfPatientrecord() predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfPatientrecordTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfPatientrecordTable, EdgesOfPatientrecordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfPatientrecordWith applies the HasEdge predicate on the "EdgesOfPatientrecord" edge with a given conditions (other predicates).
func HasEdgesOfPatientrecordWith(preds ...predicate.Patientrecord) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfPatientrecordInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfPatientrecordTable, EdgesOfPatientrecordColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEdgesOfDoctor applies the HasEdge predicate on the "EdgesOfDoctor" edge.
func HasEdgesOfDoctor() predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfDoctorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfDoctorTable, EdgesOfDoctorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfDoctorWith applies the HasEdge predicate on the "EdgesOfDoctor" edge with a given conditions (other predicates).
func HasEdgesOfDoctorWith(preds ...predicate.Doctor) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfDoctorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfDoctorTable, EdgesOfDoctorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEdgesOfUnpaybills applies the HasEdge predicate on the "EdgesOfUnpaybills" edge.
func HasEdgesOfUnpaybills() predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfUnpaybillsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EdgesOfUnpaybillsTable, EdgesOfUnpaybillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfUnpaybillsWith applies the HasEdge predicate on the "EdgesOfUnpaybills" edge with a given conditions (other predicates).
func HasEdgesOfUnpaybillsWith(preds ...predicate.Unpaybill) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfUnpaybillsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EdgesOfUnpaybillsTable, EdgesOfUnpaybillsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Treatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Treatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Treatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		p(s.Not())
	})
}
