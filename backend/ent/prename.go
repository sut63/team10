// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team10/app/ent/prename"
)

// Prename is the model entity for the Prename schema.
type Prename struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Prefix holds the value of the "prefix" field.
	Prefix string `json:"prefix,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrenameQuery when eager-loading is set.
	Edges PrenameEdges `json:"edges"`
}

// PrenameEdges holds the relations/edges for other nodes in the graph.
type PrenameEdges struct {
	// Prename2doctorinfo holds the value of the prename2doctorinfo edge.
	Prename2doctorinfo []*Doctorinfo
	// Patientrecord holds the value of the patientrecord edge.
	Patientrecord []*Patientrecord
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// Prename2doctorinfoOrErr returns the Prename2doctorinfo value or an error if the edge
// was not loaded in eager-loading.
func (e PrenameEdges) Prename2doctorinfoOrErr() ([]*Doctorinfo, error) {
	if e.loadedTypes[0] {
		return e.Prename2doctorinfo, nil
	}
	return nil, &NotLoadedError{edge: "prename2doctorinfo"}
}

// PatientrecordOrErr returns the Patientrecord value or an error if the edge
// was not loaded in eager-loading.
func (e PrenameEdges) PatientrecordOrErr() ([]*Patientrecord, error) {
	if e.loadedTypes[1] {
		return e.Patientrecord, nil
	}
	return nil, &NotLoadedError{edge: "patientrecord"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Prename) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // prefix
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Prename fields.
func (pr *Prename) assignValues(values ...interface{}) error {
	if m, n := len(values), len(prename.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field prefix", values[0])
	} else if value.Valid {
		pr.Prefix = value.String
	}
	return nil
}

// QueryPrename2doctorinfo queries the prename2doctorinfo edge of the Prename.
func (pr *Prename) QueryPrename2doctorinfo() *DoctorinfoQuery {
	return (&PrenameClient{config: pr.config}).QueryPrename2doctorinfo(pr)
}

// QueryPatientrecord queries the patientrecord edge of the Prename.
func (pr *Prename) QueryPatientrecord() *PatientrecordQuery {
	return (&PrenameClient{config: pr.config}).QueryPatientrecord(pr)
}

// Update returns a builder for updating this Prename.
// Note that, you need to call Prename.Unwrap() before calling this method, if this Prename
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Prename) Update() *PrenameUpdateOne {
	return (&PrenameClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Prename) Unwrap() *Prename {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Prename is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Prename) String() string {
	var builder strings.Builder
	builder.WriteString("Prename(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", prefix=")
	builder.WriteString(pr.Prefix)
	builder.WriteByte(')')
	return builder.String()
}

// Prenames is a parsable slice of Prename.
type Prenames []*Prename

func (pr Prenames) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
