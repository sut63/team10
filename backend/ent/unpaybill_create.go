// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team10/app/ent/bill"
	"github.com/team10/app/ent/treatment"
	"github.com/team10/app/ent/unpaybill"
)

// UnpaybillCreate is the builder for creating a Unpaybill entity.
type UnpaybillCreate struct {
	config
	mutation *UnpaybillMutation
	hooks    []Hook
}

// SetStatus sets the Status field.
func (uc *UnpaybillCreate) SetStatus(s string) *UnpaybillCreate {
	uc.mutation.SetStatus(s)
	return uc
}

// SetTreatmentID sets the treatment edge to Treatment by id.
func (uc *UnpaybillCreate) SetTreatmentID(id int) *UnpaybillCreate {
	uc.mutation.SetTreatmentID(id)
	return uc
}

// SetNillableTreatmentID sets the treatment edge to Treatment by id if the given value is not nil.
func (uc *UnpaybillCreate) SetNillableTreatmentID(id *int) *UnpaybillCreate {
	if id != nil {
		uc = uc.SetTreatmentID(*id)
	}
	return uc
}

// SetTreatment sets the treatment edge to Treatment.
func (uc *UnpaybillCreate) SetTreatment(t *Treatment) *UnpaybillCreate {
	return uc.SetTreatmentID(t.ID)
}

// SetBillsID sets the bills edge to Bill by id.
func (uc *UnpaybillCreate) SetBillsID(id int) *UnpaybillCreate {
	uc.mutation.SetBillsID(id)
	return uc
}

// SetNillableBillsID sets the bills edge to Bill by id if the given value is not nil.
func (uc *UnpaybillCreate) SetNillableBillsID(id *int) *UnpaybillCreate {
	if id != nil {
		uc = uc.SetBillsID(*id)
	}
	return uc
}

// SetBills sets the bills edge to Bill.
func (uc *UnpaybillCreate) SetBills(b *Bill) *UnpaybillCreate {
	return uc.SetBillsID(b.ID)
}

// Mutation returns the UnpaybillMutation object of the builder.
func (uc *UnpaybillCreate) Mutation() *UnpaybillMutation {
	return uc.mutation
}

// Save creates the Unpaybill in the database.
func (uc *UnpaybillCreate) Save(ctx context.Context) (*Unpaybill, error) {
	if _, ok := uc.mutation.Status(); !ok {
		return nil, &ValidationError{Name: "Status", err: errors.New("ent: missing required field \"Status\"")}
	}
	if v, ok := uc.mutation.Status(); ok {
		if err := unpaybill.StatusValidator(v); err != nil {
			return nil, &ValidationError{Name: "Status", err: fmt.Errorf("ent: validator failed for field \"Status\": %w", err)}
		}
	}
	var (
		err  error
		node *Unpaybill
	)
	if len(uc.hooks) == 0 {
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UnpaybillMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uc.mutation = mutation
			node, err = uc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UnpaybillCreate) SaveX(ctx context.Context) *Unpaybill {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uc *UnpaybillCreate) sqlSave(ctx context.Context) (*Unpaybill, error) {
	u, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	u.ID = int(id)
	return u, nil
}

func (uc *UnpaybillCreate) createSpec() (*Unpaybill, *sqlgraph.CreateSpec) {
	var (
		u     = &Unpaybill{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: unpaybill.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unpaybill.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unpaybill.FieldStatus,
		})
		u.Status = value
	}
	if nodes := uc.mutation.TreatmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   unpaybill.TreatmentTable,
			Columns: []string{unpaybill.TreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: treatment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   unpaybill.BillsTable,
			Columns: []string{unpaybill.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return u, _spec
}
