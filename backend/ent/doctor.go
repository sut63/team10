// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team10/app/ent/doctor"
	"github.com/team10/app/ent/doctorinfo"
	"github.com/team10/app/ent/user"
)

// Doctor is the model entity for the Doctor schema.
type Doctor struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DoctorQuery when eager-loading is set.
	Edges         DoctorEdges `json:"edges"`
	doctorinfo_id *int
	user_id       *int
}

// DoctorEdges holds the relations/edges for other nodes in the graph.
type DoctorEdges struct {
	// Doctorinfo holds the value of the doctorinfo edge.
	Doctorinfo *Doctorinfo
	// User holds the value of the user edge.
	User *User
	// Treatment holds the value of the treatment edge.
	Treatment []*Treatment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DoctorinfoOrErr returns the Doctorinfo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DoctorEdges) DoctorinfoOrErr() (*Doctorinfo, error) {
	if e.loadedTypes[0] {
		if e.Doctorinfo == nil {
			// The edge doctorinfo was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: doctorinfo.Label}
		}
		return e.Doctorinfo, nil
	}
	return nil, &NotLoadedError{edge: "doctorinfo"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DoctorEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TreatmentOrErr returns the Treatment value or an error if the edge
// was not loaded in eager-loading.
func (e DoctorEdges) TreatmentOrErr() ([]*Treatment, error) {
	if e.loadedTypes[2] {
		return e.Treatment, nil
	}
	return nil, &NotLoadedError{edge: "treatment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Doctor) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Doctor) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // doctorinfo_id
		&sql.NullInt64{}, // user_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Doctor fields.
func (d *Doctor) assignValues(values ...interface{}) error {
	if m, n := len(values), len(doctor.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	values = values[0:]
	if len(values) == len(doctor.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field doctorinfo_id", value)
		} else if value.Valid {
			d.doctorinfo_id = new(int)
			*d.doctorinfo_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_id", value)
		} else if value.Valid {
			d.user_id = new(int)
			*d.user_id = int(value.Int64)
		}
	}
	return nil
}

// QueryDoctorinfo queries the doctorinfo edge of the Doctor.
func (d *Doctor) QueryDoctorinfo() *DoctorinfoQuery {
	return (&DoctorClient{config: d.config}).QueryDoctorinfo(d)
}

// QueryUser queries the user edge of the Doctor.
func (d *Doctor) QueryUser() *UserQuery {
	return (&DoctorClient{config: d.config}).QueryUser(d)
}

// QueryTreatment queries the treatment edge of the Doctor.
func (d *Doctor) QueryTreatment() *TreatmentQuery {
	return (&DoctorClient{config: d.config}).QueryTreatment(d)
}

// Update returns a builder for updating this Doctor.
// Note that, you need to call Doctor.Unwrap() before calling this method, if this Doctor
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Doctor) Update() *DoctorUpdateOne {
	return (&DoctorClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Doctor) Unwrap() *Doctor {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Doctor is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Doctor) String() string {
	var builder strings.Builder
	builder.WriteString("Doctor(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Doctors is a parsable slice of Doctor.
type Doctors []*Doctor

func (d Doctors) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
