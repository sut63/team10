// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team10/app/ent/historytaking"
	"github.com/team10/app/ent/symptomseverity"
)

// SymptomseverityCreate is the builder for creating a Symptomseverity entity.
type SymptomseverityCreate struct {
	config
	mutation *SymptomseverityMutation
	hooks    []Hook
}

// SetSymptomseverity sets the symptomseverity field.
func (sc *SymptomseverityCreate) SetSymptomseverity(s string) *SymptomseverityCreate {
	sc.mutation.SetSymptomseverity(s)
	return sc
}

// AddHistorytakingIDs adds the historytaking edge to Historytaking by ids.
func (sc *SymptomseverityCreate) AddHistorytakingIDs(ids ...int) *SymptomseverityCreate {
	sc.mutation.AddHistorytakingIDs(ids...)
	return sc
}

// AddHistorytaking adds the historytaking edges to Historytaking.
func (sc *SymptomseverityCreate) AddHistorytaking(h ...*Historytaking) *SymptomseverityCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return sc.AddHistorytakingIDs(ids...)
}

// Mutation returns the SymptomseverityMutation object of the builder.
func (sc *SymptomseverityCreate) Mutation() *SymptomseverityMutation {
	return sc.mutation
}

// Save creates the Symptomseverity in the database.
func (sc *SymptomseverityCreate) Save(ctx context.Context) (*Symptomseverity, error) {
	if _, ok := sc.mutation.Symptomseverity(); !ok {
		return nil, &ValidationError{Name: "symptomseverity", err: errors.New("ent: missing required field \"symptomseverity\"")}
	}
	var (
		err  error
		node *Symptomseverity
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SymptomseverityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SymptomseverityCreate) SaveX(ctx context.Context) *Symptomseverity {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SymptomseverityCreate) sqlSave(ctx context.Context) (*Symptomseverity, error) {
	s, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}

func (sc *SymptomseverityCreate) createSpec() (*Symptomseverity, *sqlgraph.CreateSpec) {
	var (
		s     = &Symptomseverity{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: symptomseverity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: symptomseverity.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Symptomseverity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: symptomseverity.FieldSymptomseverity,
		})
		s.Symptomseverity = value
	}
	if nodes := sc.mutation.HistorytakingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   symptomseverity.HistorytakingTable,
			Columns: []string{symptomseverity.HistorytakingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: historytaking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return s, _spec
}
