// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team10/app/ent/educationlevel"
)

// Educationlevel is the model entity for the Educationlevel schema.
type Educationlevel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Level holds the value of the "level" field.
	Level string `json:"level,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EducationlevelQuery when eager-loading is set.
	Edges EducationlevelEdges `json:"edges"`
}

// EducationlevelEdges holds the relations/edges for other nodes in the graph.
type EducationlevelEdges struct {
	// EdgesOfEducationlevel2doctorinfo holds the value of the EdgesOfEducationlevel2doctorinfo edge.
	EdgesOfEducationlevel2doctorinfo []*Doctorinfo
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EdgesOfEducationlevel2doctorinfoOrErr returns the EdgesOfEducationlevel2doctorinfo value or an error if the edge
// was not loaded in eager-loading.
func (e EducationlevelEdges) EdgesOfEducationlevel2doctorinfoOrErr() ([]*Doctorinfo, error) {
	if e.loadedTypes[0] {
		return e.EdgesOfEducationlevel2doctorinfo, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfEducationlevel2doctorinfo"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Educationlevel) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // level
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Educationlevel fields.
func (e *Educationlevel) assignValues(values ...interface{}) error {
	if m, n := len(values), len(educationlevel.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field level", values[0])
	} else if value.Valid {
		e.Level = value.String
	}
	return nil
}

// QueryEdgesOfEducationlevel2doctorinfo queries the EdgesOfEducationlevel2doctorinfo edge of the Educationlevel.
func (e *Educationlevel) QueryEdgesOfEducationlevel2doctorinfo() *DoctorinfoQuery {
	return (&EducationlevelClient{config: e.config}).QueryEdgesOfEducationlevel2doctorinfo(e)
}

// Update returns a builder for updating this Educationlevel.
// Note that, you need to call Educationlevel.Unwrap() before calling this method, if this Educationlevel
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Educationlevel) Update() *EducationlevelUpdateOne {
	return (&EducationlevelClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Educationlevel) Unwrap() *Educationlevel {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Educationlevel is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Educationlevel) String() string {
	var builder strings.Builder
	builder.WriteString("Educationlevel(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", level=")
	builder.WriteString(e.Level)
	builder.WriteByte(')')
	return builder.String()
}

// Educationlevels is a parsable slice of Educationlevel.
type Educationlevels []*Educationlevel

func (e Educationlevels) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
