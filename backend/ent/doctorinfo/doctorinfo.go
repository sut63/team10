// Code generated by entc, DO NOT EDIT.

package doctorinfo

const (
	// Label holds the string label denoting the doctorinfo type in the database.
	Label = "doctorinfo"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDoctorname holds the string denoting the doctorname field in the database.
	FieldDoctorname = "doctorname"
	// FieldDoctorsurname holds the string denoting the doctorsurname field in the database.
	FieldDoctorsurname = "doctorsurname"
	// FieldTelephonenumber holds the string denoting the telephonenumber field in the database.
	FieldTelephonenumber = "telephonenumber"
	// FieldLicensenumber holds the string denoting the licensenumber field in the database.
	FieldLicensenumber = "licensenumber"

	// EdgeDepartment holds the string denoting the department edge name in mutations.
	EdgeDepartment = "department"
	// EdgeEducationlevel holds the string denoting the educationlevel edge name in mutations.
	EdgeEducationlevel = "educationlevel"
	// EdgeOfficeroom holds the string denoting the officeroom edge name in mutations.
	EdgeOfficeroom = "officeroom"
	// EdgePrename holds the string denoting the prename edge name in mutations.
	EdgePrename = "prename"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeTreatment holds the string denoting the treatment edge name in mutations.
	EdgeTreatment = "treatment"

	// Table holds the table name of the doctorinfo in the database.
	Table = "doctorinfos"
	// DepartmentTable is the table the holds the department relation/edge.
	DepartmentTable = "doctorinfos"
	// DepartmentInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentInverseTable = "departments"
	// DepartmentColumn is the table column denoting the department relation/edge.
	DepartmentColumn = "department"
	// EducationlevelTable is the table the holds the educationlevel relation/edge.
	EducationlevelTable = "doctorinfos"
	// EducationlevelInverseTable is the table name for the Educationlevel entity.
	// It exists in this package in order to avoid circular dependency with the "educationlevel" package.
	EducationlevelInverseTable = "educationlevels"
	// EducationlevelColumn is the table column denoting the educationlevel relation/edge.
	EducationlevelColumn = "level"
	// OfficeroomTable is the table the holds the officeroom relation/edge.
	OfficeroomTable = "doctorinfos"
	// OfficeroomInverseTable is the table name for the Officeroom entity.
	// It exists in this package in order to avoid circular dependency with the "officeroom" package.
	OfficeroomInverseTable = "officerooms"
	// OfficeroomColumn is the table column denoting the officeroom relation/edge.
	OfficeroomColumn = "roomnumber"
	// PrenameTable is the table the holds the prename relation/edge.
	PrenameTable = "doctorinfos"
	// PrenameInverseTable is the table name for the Prename entity.
	// It exists in this package in order to avoid circular dependency with the "prename" package.
	PrenameInverseTable = "prenames"
	// PrenameColumn is the table column denoting the prename relation/edge.
	PrenameColumn = "prefix"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "doctorinfos"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// TreatmentTable is the table the holds the treatment relation/edge.
	TreatmentTable = "treatments"
	// TreatmentInverseTable is the table name for the Treatment entity.
	// It exists in this package in order to avoid circular dependency with the "treatment" package.
	TreatmentInverseTable = "treatments"
	// TreatmentColumn is the table column denoting the treatment relation/edge.
	TreatmentColumn = "doctorinfo_id"
)

// Columns holds all SQL columns for doctorinfo fields.
var Columns = []string{
	FieldID,
	FieldDoctorname,
	FieldDoctorsurname,
	FieldTelephonenumber,
	FieldLicensenumber,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Doctorinfo type.
var ForeignKeys = []string{
	"department",
	"level",
	"roomnumber",
	"prefix",
	"user_id",
}

var (
	// DoctornameValidator is a validator for the "doctorname" field. It is called by the builders before save.
	DoctornameValidator func(string) error
	// DoctorsurnameValidator is a validator for the "doctorsurname" field. It is called by the builders before save.
	DoctorsurnameValidator func(string) error
	// TelephonenumberValidator is a validator for the "telephonenumber" field. It is called by the builders before save.
	TelephonenumberValidator func(string) error
	// LicensenumberValidator is a validator for the "licensenumber" field. It is called by the builders before save.
	LicensenumberValidator func(string) error
)
