// Code generated by entc, DO NOT EDIT.

package doctorinfo

const (
	// Label holds the string label denoting the doctorinfo type in the database.
	Label = "doctorinfo"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDoctorname holds the string denoting the doctorname field in the database.
	FieldDoctorname = "doctorname"
	// FieldDoctorsurname holds the string denoting the doctorsurname field in the database.
	FieldDoctorsurname = "doctorsurname"
	// FieldTelephonenumber holds the string denoting the telephonenumber field in the database.
	FieldTelephonenumber = "telephonenumber"
	// FieldLicensenumber holds the string denoting the licensenumber field in the database.
	FieldLicensenumber = "licensenumber"

	// EdgeEdgesOfDepartment holds the string denoting the edgesofdepartment edge name in mutations.
	EdgeEdgesOfDepartment = "EdgesOfDepartment"
	// EdgeEdgesOfEducationlevel holds the string denoting the edgesofeducationlevel edge name in mutations.
	EdgeEdgesOfEducationlevel = "EdgesOfEducationlevel"
	// EdgeEdgesOfOfficeroom holds the string denoting the edgesofofficeroom edge name in mutations.
	EdgeEdgesOfOfficeroom = "EdgesOfOfficeroom"
	// EdgeEdgesOfPrename holds the string denoting the edgesofprename edge name in mutations.
	EdgeEdgesOfPrename = "EdgesOfPrename"
	// EdgeEdgesOfDoctor holds the string denoting the edgesofdoctor edge name in mutations.
	EdgeEdgesOfDoctor = "EdgesOfDoctor"

	// Table holds the table name of the doctorinfo in the database.
	Table = "doctorinfos"
	// EdgesOfDepartmentTable is the table the holds the EdgesOfDepartment relation/edge.
	EdgesOfDepartmentTable = "doctorinfos"
	// EdgesOfDepartmentInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	EdgesOfDepartmentInverseTable = "departments"
	// EdgesOfDepartmentColumn is the table column denoting the EdgesOfDepartment relation/edge.
	EdgesOfDepartmentColumn = "department"
	// EdgesOfEducationlevelTable is the table the holds the EdgesOfEducationlevel relation/edge.
	EdgesOfEducationlevelTable = "doctorinfos"
	// EdgesOfEducationlevelInverseTable is the table name for the Educationlevel entity.
	// It exists in this package in order to avoid circular dependency with the "educationlevel" package.
	EdgesOfEducationlevelInverseTable = "educationlevels"
	// EdgesOfEducationlevelColumn is the table column denoting the EdgesOfEducationlevel relation/edge.
	EdgesOfEducationlevelColumn = "level"
	// EdgesOfOfficeroomTable is the table the holds the EdgesOfOfficeroom relation/edge.
	EdgesOfOfficeroomTable = "doctorinfos"
	// EdgesOfOfficeroomInverseTable is the table name for the Officeroom entity.
	// It exists in this package in order to avoid circular dependency with the "officeroom" package.
	EdgesOfOfficeroomInverseTable = "officerooms"
	// EdgesOfOfficeroomColumn is the table column denoting the EdgesOfOfficeroom relation/edge.
	EdgesOfOfficeroomColumn = "roomnumber"
	// EdgesOfPrenameTable is the table the holds the EdgesOfPrename relation/edge.
	EdgesOfPrenameTable = "doctorinfos"
	// EdgesOfPrenameInverseTable is the table name for the Prename entity.
	// It exists in this package in order to avoid circular dependency with the "prename" package.
	EdgesOfPrenameInverseTable = "prenames"
	// EdgesOfPrenameColumn is the table column denoting the EdgesOfPrename relation/edge.
	EdgesOfPrenameColumn = "prefix"
	// EdgesOfDoctorTable is the table the holds the EdgesOfDoctor relation/edge.
	EdgesOfDoctorTable = "doctors"
	// EdgesOfDoctorInverseTable is the table name for the Doctor entity.
	// It exists in this package in order to avoid circular dependency with the "doctor" package.
	EdgesOfDoctorInverseTable = "doctors"
	// EdgesOfDoctorColumn is the table column denoting the EdgesOfDoctor relation/edge.
	EdgesOfDoctorColumn = "doctorinfo_id"
)

// Columns holds all SQL columns for doctorinfo fields.
var Columns = []string{
	FieldID,
	FieldDoctorname,
	FieldDoctorsurname,
	FieldTelephonenumber,
	FieldLicensenumber,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Doctorinfo type.
var ForeignKeys = []string{
	"department",
	"level",
	"roomnumber",
	"prefix",
}

var (
	// DoctornameValidator is a validator for the "doctorname" field. It is called by the builders before save.
	DoctornameValidator func(string) error
	// DoctorsurnameValidator is a validator for the "doctorsurname" field. It is called by the builders before save.
	DoctorsurnameValidator func(string) error
	// TelephonenumberValidator is a validator for the "telephonenumber" field. It is called by the builders before save.
	TelephonenumberValidator func(string) error
	// LicensenumberValidator is a validator for the "licensenumber" field. It is called by the builders before save.
	LicensenumberValidator func(string) error
)
