// Code generated by entc, DO NOT EDIT.

package patientrecord

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team10/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Idcardnumber applies equality check predicate on the "Idcardnumber" field. It's identical to IdcardnumberEQ.
func Idcardnumber(v int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdcardnumber), v))
	})
}

// Age applies equality check predicate on the "Age" field. It's identical to AgeEQ.
func Age(v int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAge), v))
	})
}

// Disease applies equality check predicate on the "Disease" field. It's identical to DiseaseEQ.
func Disease(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisease), v))
	})
}

// Allergic applies equality check predicate on the "Allergic" field. It's identical to AllergicEQ.
func Allergic(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllergic), v))
	})
}

// Phonenumber applies equality check predicate on the "Phonenumber" field. It's identical to PhonenumberEQ.
func Phonenumber(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhonenumber), v))
	})
}

// Email applies equality check predicate on the "Email" field. It's identical to EmailEQ.
func Email(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// Home applies equality check predicate on the "Home" field. It's identical to HomeEQ.
func Home(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHome), v))
	})
}

// Date applies equality check predicate on the "Date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// IdcardnumberEQ applies the EQ predicate on the "Idcardnumber" field.
func IdcardnumberEQ(v int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdcardnumber), v))
	})
}

// IdcardnumberNEQ applies the NEQ predicate on the "Idcardnumber" field.
func IdcardnumberNEQ(v int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIdcardnumber), v))
	})
}

// IdcardnumberIn applies the In predicate on the "Idcardnumber" field.
func IdcardnumberIn(vs ...int) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIdcardnumber), v...))
	})
}

// IdcardnumberNotIn applies the NotIn predicate on the "Idcardnumber" field.
func IdcardnumberNotIn(vs ...int) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIdcardnumber), v...))
	})
}

// IdcardnumberGT applies the GT predicate on the "Idcardnumber" field.
func IdcardnumberGT(v int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIdcardnumber), v))
	})
}

// IdcardnumberGTE applies the GTE predicate on the "Idcardnumber" field.
func IdcardnumberGTE(v int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIdcardnumber), v))
	})
}

// IdcardnumberLT applies the LT predicate on the "Idcardnumber" field.
func IdcardnumberLT(v int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIdcardnumber), v))
	})
}

// IdcardnumberLTE applies the LTE predicate on the "Idcardnumber" field.
func IdcardnumberLTE(v int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIdcardnumber), v))
	})
}

// AgeEQ applies the EQ predicate on the "Age" field.
func AgeEQ(v int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAge), v))
	})
}

// AgeNEQ applies the NEQ predicate on the "Age" field.
func AgeNEQ(v int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAge), v))
	})
}

// AgeIn applies the In predicate on the "Age" field.
func AgeIn(vs ...int) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAge), v...))
	})
}

// AgeNotIn applies the NotIn predicate on the "Age" field.
func AgeNotIn(vs ...int) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAge), v...))
	})
}

// AgeGT applies the GT predicate on the "Age" field.
func AgeGT(v int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAge), v))
	})
}

// AgeGTE applies the GTE predicate on the "Age" field.
func AgeGTE(v int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAge), v))
	})
}

// AgeLT applies the LT predicate on the "Age" field.
func AgeLT(v int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAge), v))
	})
}

// AgeLTE applies the LTE predicate on the "Age" field.
func AgeLTE(v int) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAge), v))
	})
}

// DiseaseEQ applies the EQ predicate on the "Disease" field.
func DiseaseEQ(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisease), v))
	})
}

// DiseaseNEQ applies the NEQ predicate on the "Disease" field.
func DiseaseNEQ(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisease), v))
	})
}

// DiseaseIn applies the In predicate on the "Disease" field.
func DiseaseIn(vs ...string) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDisease), v...))
	})
}

// DiseaseNotIn applies the NotIn predicate on the "Disease" field.
func DiseaseNotIn(vs ...string) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDisease), v...))
	})
}

// DiseaseGT applies the GT predicate on the "Disease" field.
func DiseaseGT(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDisease), v))
	})
}

// DiseaseGTE applies the GTE predicate on the "Disease" field.
func DiseaseGTE(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDisease), v))
	})
}

// DiseaseLT applies the LT predicate on the "Disease" field.
func DiseaseLT(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDisease), v))
	})
}

// DiseaseLTE applies the LTE predicate on the "Disease" field.
func DiseaseLTE(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDisease), v))
	})
}

// DiseaseContains applies the Contains predicate on the "Disease" field.
func DiseaseContains(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDisease), v))
	})
}

// DiseaseHasPrefix applies the HasPrefix predicate on the "Disease" field.
func DiseaseHasPrefix(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDisease), v))
	})
}

// DiseaseHasSuffix applies the HasSuffix predicate on the "Disease" field.
func DiseaseHasSuffix(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDisease), v))
	})
}

// DiseaseEqualFold applies the EqualFold predicate on the "Disease" field.
func DiseaseEqualFold(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDisease), v))
	})
}

// DiseaseContainsFold applies the ContainsFold predicate on the "Disease" field.
func DiseaseContainsFold(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDisease), v))
	})
}

// AllergicEQ applies the EQ predicate on the "Allergic" field.
func AllergicEQ(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllergic), v))
	})
}

// AllergicNEQ applies the NEQ predicate on the "Allergic" field.
func AllergicNEQ(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAllergic), v))
	})
}

// AllergicIn applies the In predicate on the "Allergic" field.
func AllergicIn(vs ...string) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAllergic), v...))
	})
}

// AllergicNotIn applies the NotIn predicate on the "Allergic" field.
func AllergicNotIn(vs ...string) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAllergic), v...))
	})
}

// AllergicGT applies the GT predicate on the "Allergic" field.
func AllergicGT(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAllergic), v))
	})
}

// AllergicGTE applies the GTE predicate on the "Allergic" field.
func AllergicGTE(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAllergic), v))
	})
}

// AllergicLT applies the LT predicate on the "Allergic" field.
func AllergicLT(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAllergic), v))
	})
}

// AllergicLTE applies the LTE predicate on the "Allergic" field.
func AllergicLTE(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAllergic), v))
	})
}

// AllergicContains applies the Contains predicate on the "Allergic" field.
func AllergicContains(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAllergic), v))
	})
}

// AllergicHasPrefix applies the HasPrefix predicate on the "Allergic" field.
func AllergicHasPrefix(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAllergic), v))
	})
}

// AllergicHasSuffix applies the HasSuffix predicate on the "Allergic" field.
func AllergicHasSuffix(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAllergic), v))
	})
}

// AllergicEqualFold applies the EqualFold predicate on the "Allergic" field.
func AllergicEqualFold(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAllergic), v))
	})
}

// AllergicContainsFold applies the ContainsFold predicate on the "Allergic" field.
func AllergicContainsFold(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAllergic), v))
	})
}

// PhonenumberEQ applies the EQ predicate on the "Phonenumber" field.
func PhonenumberEQ(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhonenumber), v))
	})
}

// PhonenumberNEQ applies the NEQ predicate on the "Phonenumber" field.
func PhonenumberNEQ(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhonenumber), v))
	})
}

// PhonenumberIn applies the In predicate on the "Phonenumber" field.
func PhonenumberIn(vs ...string) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhonenumber), v...))
	})
}

// PhonenumberNotIn applies the NotIn predicate on the "Phonenumber" field.
func PhonenumberNotIn(vs ...string) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhonenumber), v...))
	})
}

// PhonenumberGT applies the GT predicate on the "Phonenumber" field.
func PhonenumberGT(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhonenumber), v))
	})
}

// PhonenumberGTE applies the GTE predicate on the "Phonenumber" field.
func PhonenumberGTE(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhonenumber), v))
	})
}

// PhonenumberLT applies the LT predicate on the "Phonenumber" field.
func PhonenumberLT(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhonenumber), v))
	})
}

// PhonenumberLTE applies the LTE predicate on the "Phonenumber" field.
func PhonenumberLTE(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhonenumber), v))
	})
}

// PhonenumberContains applies the Contains predicate on the "Phonenumber" field.
func PhonenumberContains(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhonenumber), v))
	})
}

// PhonenumberHasPrefix applies the HasPrefix predicate on the "Phonenumber" field.
func PhonenumberHasPrefix(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhonenumber), v))
	})
}

// PhonenumberHasSuffix applies the HasSuffix predicate on the "Phonenumber" field.
func PhonenumberHasSuffix(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhonenumber), v))
	})
}

// PhonenumberEqualFold applies the EqualFold predicate on the "Phonenumber" field.
func PhonenumberEqualFold(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhonenumber), v))
	})
}

// PhonenumberContainsFold applies the ContainsFold predicate on the "Phonenumber" field.
func PhonenumberContainsFold(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhonenumber), v))
	})
}

// EmailEQ applies the EQ predicate on the "Email" field.
func EmailEQ(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "Email" field.
func EmailNEQ(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "Email" field.
func EmailIn(vs ...string) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "Email" field.
func EmailNotIn(vs ...string) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "Email" field.
func EmailGT(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "Email" field.
func EmailGTE(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "Email" field.
func EmailLT(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "Email" field.
func EmailLTE(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "Email" field.
func EmailContains(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "Email" field.
func EmailHasPrefix(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "Email" field.
func EmailHasSuffix(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "Email" field.
func EmailEqualFold(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "Email" field.
func EmailContainsFold(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// HomeEQ applies the EQ predicate on the "Home" field.
func HomeEQ(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHome), v))
	})
}

// HomeNEQ applies the NEQ predicate on the "Home" field.
func HomeNEQ(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHome), v))
	})
}

// HomeIn applies the In predicate on the "Home" field.
func HomeIn(vs ...string) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHome), v...))
	})
}

// HomeNotIn applies the NotIn predicate on the "Home" field.
func HomeNotIn(vs ...string) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHome), v...))
	})
}

// HomeGT applies the GT predicate on the "Home" field.
func HomeGT(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHome), v))
	})
}

// HomeGTE applies the GTE predicate on the "Home" field.
func HomeGTE(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHome), v))
	})
}

// HomeLT applies the LT predicate on the "Home" field.
func HomeLT(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHome), v))
	})
}

// HomeLTE applies the LTE predicate on the "Home" field.
func HomeLTE(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHome), v))
	})
}

// HomeContains applies the Contains predicate on the "Home" field.
func HomeContains(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHome), v))
	})
}

// HomeHasPrefix applies the HasPrefix predicate on the "Home" field.
func HomeHasPrefix(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHome), v))
	})
}

// HomeHasSuffix applies the HasSuffix predicate on the "Home" field.
func HomeHasSuffix(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHome), v))
	})
}

// HomeEqualFold applies the EqualFold predicate on the "Home" field.
func HomeEqualFold(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHome), v))
	})
}

// HomeContainsFold applies the ContainsFold predicate on the "Home" field.
func HomeContainsFold(v string) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHome), v))
	})
}

// DateEQ applies the EQ predicate on the "Date" field.
func DateEQ(v time.Time) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// DateNEQ applies the NEQ predicate on the "Date" field.
func DateNEQ(v time.Time) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDate), v))
	})
}

// DateIn applies the In predicate on the "Date" field.
func DateIn(vs ...time.Time) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDate), v...))
	})
}

// DateNotIn applies the NotIn predicate on the "Date" field.
func DateNotIn(vs ...time.Time) predicate.Patientrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Patientrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDate), v...))
	})
}

// DateGT applies the GT predicate on the "Date" field.
func DateGT(v time.Time) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDate), v))
	})
}

// DateGTE applies the GTE predicate on the "Date" field.
func DateGTE(v time.Time) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDate), v))
	})
}

// DateLT applies the LT predicate on the "Date" field.
func DateLT(v time.Time) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDate), v))
	})
}

// DateLTE applies the LTE predicate on the "Date" field.
func DateLTE(v time.Time) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDate), v))
	})
}

// HasEdgesOfGender applies the HasEdge predicate on the "EdgesOfGender" edge.
func HasEdgesOfGender() predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfGenderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfGenderTable, EdgesOfGenderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfGenderWith applies the HasEdge predicate on the "EdgesOfGender" edge with a given conditions (other predicates).
func HasEdgesOfGenderWith(preds ...predicate.Gender) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfGenderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfGenderTable, EdgesOfGenderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEdgesOfBloodtype applies the HasEdge predicate on the "EdgesOfBloodtype" edge.
func HasEdgesOfBloodtype() predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfBloodtypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfBloodtypeTable, EdgesOfBloodtypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfBloodtypeWith applies the HasEdge predicate on the "EdgesOfBloodtype" edge with a given conditions (other predicates).
func HasEdgesOfBloodtypeWith(preds ...predicate.Bloodtype) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfBloodtypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfBloodtypeTable, EdgesOfBloodtypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEdgesOfMedicalrecordstaff applies the HasEdge predicate on the "EdgesOfMedicalrecordstaff" edge.
func HasEdgesOfMedicalrecordstaff() predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfMedicalrecordstaffTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfMedicalrecordstaffTable, EdgesOfMedicalrecordstaffColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfMedicalrecordstaffWith applies the HasEdge predicate on the "EdgesOfMedicalrecordstaff" edge with a given conditions (other predicates).
func HasEdgesOfMedicalrecordstaffWith(preds ...predicate.Medicalrecordstaff) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfMedicalrecordstaffInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfMedicalrecordstaffTable, EdgesOfMedicalrecordstaffColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEdgesOfPrename applies the HasEdge predicate on the "EdgesOfPrename" edge.
func HasEdgesOfPrename() predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfPrenameTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfPrenameTable, EdgesOfPrenameColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfPrenameWith applies the HasEdge predicate on the "EdgesOfPrename" edge with a given conditions (other predicates).
func HasEdgesOfPrenameWith(preds ...predicate.Prename) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfPrenameInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EdgesOfPrenameTable, EdgesOfPrenameColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEdgesOfHistorytaking applies the HasEdge predicate on the "EdgesOfHistorytaking" edge.
func HasEdgesOfHistorytaking() predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfHistorytakingTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EdgesOfHistorytakingTable, EdgesOfHistorytakingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfHistorytakingWith applies the HasEdge predicate on the "EdgesOfHistorytaking" edge with a given conditions (other predicates).
func HasEdgesOfHistorytakingWith(preds ...predicate.Historytaking) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfHistorytakingInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EdgesOfHistorytakingTable, EdgesOfHistorytakingColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEdgesOfTreatment applies the HasEdge predicate on the "EdgesOfTreatment" edge.
func HasEdgesOfTreatment() predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfTreatmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EdgesOfTreatmentTable, EdgesOfTreatmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfTreatmentWith applies the HasEdge predicate on the "EdgesOfTreatment" edge with a given conditions (other predicates).
func HasEdgesOfTreatmentWith(preds ...predicate.Treatment) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfTreatmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EdgesOfTreatmentTable, EdgesOfTreatmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEdgesOfPatientrecordPatientrights applies the HasEdge predicate on the "EdgesOfPatientrecordPatientrights" edge.
func HasEdgesOfPatientrecordPatientrights() predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfPatientrecordPatientrightsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EdgesOfPatientrecordPatientrightsTable, EdgesOfPatientrecordPatientrightsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfPatientrecordPatientrightsWith applies the HasEdge predicate on the "EdgesOfPatientrecordPatientrights" edge with a given conditions (other predicates).
func HasEdgesOfPatientrecordPatientrightsWith(preds ...predicate.Patientrights) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfPatientrecordPatientrightsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EdgesOfPatientrecordPatientrightsTable, EdgesOfPatientrecordPatientrightsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Patientrecord) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Patientrecord) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Patientrecord) predicate.Patientrecord {
	return predicate.Patientrecord(func(s *sql.Selector) {
		p(s.Not())
	})
}
