// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team10/app/ent/medicalrecordstaff"
	"github.com/team10/app/ent/patientrecord"
	"github.com/team10/app/ent/patientrights"
	"github.com/team10/app/ent/predicate"
	"github.com/team10/app/ent/user"
)

// MedicalrecordstaffUpdate is the builder for updating Medicalrecordstaff entities.
type MedicalrecordstaffUpdate struct {
	config
	hooks      []Hook
	mutation   *MedicalrecordstaffMutation
	predicates []predicate.Medicalrecordstaff
}

// Where adds a new predicate for the builder.
func (mu *MedicalrecordstaffUpdate) Where(ps ...predicate.Medicalrecordstaff) *MedicalrecordstaffUpdate {
	mu.predicates = append(mu.predicates, ps...)
	return mu
}

// SetName sets the Name field.
func (mu *MedicalrecordstaffUpdate) SetName(s string) *MedicalrecordstaffUpdate {
	mu.mutation.SetName(s)
	return mu
}

// AddEdgesOfPatientrecordIDs adds the EdgesOfPatientrecord edge to Patientrecord by ids.
func (mu *MedicalrecordstaffUpdate) AddEdgesOfPatientrecordIDs(ids ...int) *MedicalrecordstaffUpdate {
	mu.mutation.AddEdgesOfPatientrecordIDs(ids...)
	return mu
}

// AddEdgesOfPatientrecord adds the EdgesOfPatientrecord edges to Patientrecord.
func (mu *MedicalrecordstaffUpdate) AddEdgesOfPatientrecord(p ...*Patientrecord) *MedicalrecordstaffUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.AddEdgesOfPatientrecordIDs(ids...)
}

// AddEdgesOfMedicalrecordstaffPatientrightIDs adds the EdgesOfMedicalrecordstaffPatientrights edge to Patientrights by ids.
func (mu *MedicalrecordstaffUpdate) AddEdgesOfMedicalrecordstaffPatientrightIDs(ids ...int) *MedicalrecordstaffUpdate {
	mu.mutation.AddEdgesOfMedicalrecordstaffPatientrightIDs(ids...)
	return mu
}

// AddEdgesOfMedicalrecordstaffPatientrights adds the EdgesOfMedicalrecordstaffPatientrights edges to Patientrights.
func (mu *MedicalrecordstaffUpdate) AddEdgesOfMedicalrecordstaffPatientrights(p ...*Patientrights) *MedicalrecordstaffUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.AddEdgesOfMedicalrecordstaffPatientrightIDs(ids...)
}

// SetEdgesOfUserID sets the EdgesOfUser edge to User by id.
func (mu *MedicalrecordstaffUpdate) SetEdgesOfUserID(id int) *MedicalrecordstaffUpdate {
	mu.mutation.SetEdgesOfUserID(id)
	return mu
}

// SetNillableEdgesOfUserID sets the EdgesOfUser edge to User by id if the given value is not nil.
func (mu *MedicalrecordstaffUpdate) SetNillableEdgesOfUserID(id *int) *MedicalrecordstaffUpdate {
	if id != nil {
		mu = mu.SetEdgesOfUserID(*id)
	}
	return mu
}

// SetEdgesOfUser sets the EdgesOfUser edge to User.
func (mu *MedicalrecordstaffUpdate) SetEdgesOfUser(u *User) *MedicalrecordstaffUpdate {
	return mu.SetEdgesOfUserID(u.ID)
}

// Mutation returns the MedicalrecordstaffMutation object of the builder.
func (mu *MedicalrecordstaffUpdate) Mutation() *MedicalrecordstaffMutation {
	return mu.mutation
}

// RemoveEdgesOfPatientrecordIDs removes the EdgesOfPatientrecord edge to Patientrecord by ids.
func (mu *MedicalrecordstaffUpdate) RemoveEdgesOfPatientrecordIDs(ids ...int) *MedicalrecordstaffUpdate {
	mu.mutation.RemoveEdgesOfPatientrecordIDs(ids...)
	return mu
}

// RemoveEdgesOfPatientrecord removes EdgesOfPatientrecord edges to Patientrecord.
func (mu *MedicalrecordstaffUpdate) RemoveEdgesOfPatientrecord(p ...*Patientrecord) *MedicalrecordstaffUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.RemoveEdgesOfPatientrecordIDs(ids...)
}

// RemoveEdgesOfMedicalrecordstaffPatientrightIDs removes the EdgesOfMedicalrecordstaffPatientrights edge to Patientrights by ids.
func (mu *MedicalrecordstaffUpdate) RemoveEdgesOfMedicalrecordstaffPatientrightIDs(ids ...int) *MedicalrecordstaffUpdate {
	mu.mutation.RemoveEdgesOfMedicalrecordstaffPatientrightIDs(ids...)
	return mu
}

// RemoveEdgesOfMedicalrecordstaffPatientrights removes EdgesOfMedicalrecordstaffPatientrights edges to Patientrights.
func (mu *MedicalrecordstaffUpdate) RemoveEdgesOfMedicalrecordstaffPatientrights(p ...*Patientrights) *MedicalrecordstaffUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.RemoveEdgesOfMedicalrecordstaffPatientrightIDs(ids...)
}

// ClearEdgesOfUser clears the EdgesOfUser edge to User.
func (mu *MedicalrecordstaffUpdate) ClearEdgesOfUser() *MedicalrecordstaffUpdate {
	mu.mutation.ClearEdgesOfUser()
	return mu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mu *MedicalrecordstaffUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalrecordstaffMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MedicalrecordstaffUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MedicalrecordstaffUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MedicalrecordstaffUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MedicalrecordstaffUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medicalrecordstaff.Table,
			Columns: medicalrecordstaff.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medicalrecordstaff.FieldID,
			},
		},
	}
	if ps := mu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalrecordstaff.FieldName,
		})
	}
	if nodes := mu.mutation.RemovedEdgesOfPatientrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalrecordstaff.EdgesOfPatientrecordTable,
			Columns: []string{medicalrecordstaff.EdgesOfPatientrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.EdgesOfPatientrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalrecordstaff.EdgesOfPatientrecordTable,
			Columns: []string{medicalrecordstaff.EdgesOfPatientrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := mu.mutation.RemovedEdgesOfMedicalrecordstaffPatientrightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalrecordstaff.EdgesOfMedicalrecordstaffPatientrightsTable,
			Columns: []string{medicalrecordstaff.EdgesOfMedicalrecordstaffPatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrights.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.EdgesOfMedicalrecordstaffPatientrightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalrecordstaff.EdgesOfMedicalrecordstaffPatientrightsTable,
			Columns: []string{medicalrecordstaff.EdgesOfMedicalrecordstaffPatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrights.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.EdgesOfUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   medicalrecordstaff.EdgesOfUserTable,
			Columns: []string{medicalrecordstaff.EdgesOfUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.EdgesOfUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   medicalrecordstaff.EdgesOfUserTable,
			Columns: []string{medicalrecordstaff.EdgesOfUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalrecordstaff.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MedicalrecordstaffUpdateOne is the builder for updating a single Medicalrecordstaff entity.
type MedicalrecordstaffUpdateOne struct {
	config
	hooks    []Hook
	mutation *MedicalrecordstaffMutation
}

// SetName sets the Name field.
func (muo *MedicalrecordstaffUpdateOne) SetName(s string) *MedicalrecordstaffUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// AddEdgesOfPatientrecordIDs adds the EdgesOfPatientrecord edge to Patientrecord by ids.
func (muo *MedicalrecordstaffUpdateOne) AddEdgesOfPatientrecordIDs(ids ...int) *MedicalrecordstaffUpdateOne {
	muo.mutation.AddEdgesOfPatientrecordIDs(ids...)
	return muo
}

// AddEdgesOfPatientrecord adds the EdgesOfPatientrecord edges to Patientrecord.
func (muo *MedicalrecordstaffUpdateOne) AddEdgesOfPatientrecord(p ...*Patientrecord) *MedicalrecordstaffUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.AddEdgesOfPatientrecordIDs(ids...)
}

// AddEdgesOfMedicalrecordstaffPatientrightIDs adds the EdgesOfMedicalrecordstaffPatientrights edge to Patientrights by ids.
func (muo *MedicalrecordstaffUpdateOne) AddEdgesOfMedicalrecordstaffPatientrightIDs(ids ...int) *MedicalrecordstaffUpdateOne {
	muo.mutation.AddEdgesOfMedicalrecordstaffPatientrightIDs(ids...)
	return muo
}

// AddEdgesOfMedicalrecordstaffPatientrights adds the EdgesOfMedicalrecordstaffPatientrights edges to Patientrights.
func (muo *MedicalrecordstaffUpdateOne) AddEdgesOfMedicalrecordstaffPatientrights(p ...*Patientrights) *MedicalrecordstaffUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.AddEdgesOfMedicalrecordstaffPatientrightIDs(ids...)
}

// SetEdgesOfUserID sets the EdgesOfUser edge to User by id.
func (muo *MedicalrecordstaffUpdateOne) SetEdgesOfUserID(id int) *MedicalrecordstaffUpdateOne {
	muo.mutation.SetEdgesOfUserID(id)
	return muo
}

// SetNillableEdgesOfUserID sets the EdgesOfUser edge to User by id if the given value is not nil.
func (muo *MedicalrecordstaffUpdateOne) SetNillableEdgesOfUserID(id *int) *MedicalrecordstaffUpdateOne {
	if id != nil {
		muo = muo.SetEdgesOfUserID(*id)
	}
	return muo
}

// SetEdgesOfUser sets the EdgesOfUser edge to User.
func (muo *MedicalrecordstaffUpdateOne) SetEdgesOfUser(u *User) *MedicalrecordstaffUpdateOne {
	return muo.SetEdgesOfUserID(u.ID)
}

// Mutation returns the MedicalrecordstaffMutation object of the builder.
func (muo *MedicalrecordstaffUpdateOne) Mutation() *MedicalrecordstaffMutation {
	return muo.mutation
}

// RemoveEdgesOfPatientrecordIDs removes the EdgesOfPatientrecord edge to Patientrecord by ids.
func (muo *MedicalrecordstaffUpdateOne) RemoveEdgesOfPatientrecordIDs(ids ...int) *MedicalrecordstaffUpdateOne {
	muo.mutation.RemoveEdgesOfPatientrecordIDs(ids...)
	return muo
}

// RemoveEdgesOfPatientrecord removes EdgesOfPatientrecord edges to Patientrecord.
func (muo *MedicalrecordstaffUpdateOne) RemoveEdgesOfPatientrecord(p ...*Patientrecord) *MedicalrecordstaffUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.RemoveEdgesOfPatientrecordIDs(ids...)
}

// RemoveEdgesOfMedicalrecordstaffPatientrightIDs removes the EdgesOfMedicalrecordstaffPatientrights edge to Patientrights by ids.
func (muo *MedicalrecordstaffUpdateOne) RemoveEdgesOfMedicalrecordstaffPatientrightIDs(ids ...int) *MedicalrecordstaffUpdateOne {
	muo.mutation.RemoveEdgesOfMedicalrecordstaffPatientrightIDs(ids...)
	return muo
}

// RemoveEdgesOfMedicalrecordstaffPatientrights removes EdgesOfMedicalrecordstaffPatientrights edges to Patientrights.
func (muo *MedicalrecordstaffUpdateOne) RemoveEdgesOfMedicalrecordstaffPatientrights(p ...*Patientrights) *MedicalrecordstaffUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.RemoveEdgesOfMedicalrecordstaffPatientrightIDs(ids...)
}

// ClearEdgesOfUser clears the EdgesOfUser edge to User.
func (muo *MedicalrecordstaffUpdateOne) ClearEdgesOfUser() *MedicalrecordstaffUpdateOne {
	muo.mutation.ClearEdgesOfUser()
	return muo
}

// Save executes the query and returns the updated entity.
func (muo *MedicalrecordstaffUpdateOne) Save(ctx context.Context) (*Medicalrecordstaff, error) {

	var (
		err  error
		node *Medicalrecordstaff
	)
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalrecordstaffMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MedicalrecordstaffUpdateOne) SaveX(ctx context.Context) *Medicalrecordstaff {
	m, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return m
}

// Exec executes the query on the entity.
func (muo *MedicalrecordstaffUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MedicalrecordstaffUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MedicalrecordstaffUpdateOne) sqlSave(ctx context.Context) (m *Medicalrecordstaff, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medicalrecordstaff.Table,
			Columns: medicalrecordstaff.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medicalrecordstaff.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Medicalrecordstaff.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalrecordstaff.FieldName,
		})
	}
	if nodes := muo.mutation.RemovedEdgesOfPatientrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalrecordstaff.EdgesOfPatientrecordTable,
			Columns: []string{medicalrecordstaff.EdgesOfPatientrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.EdgesOfPatientrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalrecordstaff.EdgesOfPatientrecordTable,
			Columns: []string{medicalrecordstaff.EdgesOfPatientrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := muo.mutation.RemovedEdgesOfMedicalrecordstaffPatientrightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalrecordstaff.EdgesOfMedicalrecordstaffPatientrightsTable,
			Columns: []string{medicalrecordstaff.EdgesOfMedicalrecordstaffPatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrights.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.EdgesOfMedicalrecordstaffPatientrightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalrecordstaff.EdgesOfMedicalrecordstaffPatientrightsTable,
			Columns: []string{medicalrecordstaff.EdgesOfMedicalrecordstaffPatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrights.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.EdgesOfUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   medicalrecordstaff.EdgesOfUserTable,
			Columns: []string{medicalrecordstaff.EdgesOfUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.EdgesOfUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   medicalrecordstaff.EdgesOfUserTable,
			Columns: []string{medicalrecordstaff.EdgesOfUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	m = &Medicalrecordstaff{config: muo.config}
	_spec.Assign = m.assignValues
	_spec.ScanValues = m.scanValues()
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalrecordstaff.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return m, nil
}
