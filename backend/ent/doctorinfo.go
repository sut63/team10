// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team10/app/ent/department"
	"github.com/team10/app/ent/doctorinfo"
	"github.com/team10/app/ent/educationlevel"
	"github.com/team10/app/ent/officeroom"
	"github.com/team10/app/ent/prename"
	"github.com/team10/app/ent/user"
)

// Doctorinfo is the model entity for the Doctorinfo schema.
type Doctorinfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Doctorname holds the value of the "doctorname" field.
	Doctorname string `json:"doctorname,omitempty"`
	// Doctorsurname holds the value of the "doctorsurname" field.
	Doctorsurname string `json:"doctorsurname,omitempty"`
	// Telephonenumber holds the value of the "telephonenumber" field.
	Telephonenumber string `json:"telephonenumber,omitempty"`
	// Licensenumber holds the value of the "licensenumber" field.
	Licensenumber string `json:"licensenumber,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DoctorinfoQuery when eager-loading is set.
	Edges      DoctorinfoEdges `json:"edges"`
	department *int
	level      *int
	roomnumber *int
	prefix     *int
	user_id    *int
}

// DoctorinfoEdges holds the relations/edges for other nodes in the graph.
type DoctorinfoEdges struct {
	// Department holds the value of the department edge.
	Department *Department
	// Educationlevel holds the value of the educationlevel edge.
	Educationlevel *Educationlevel
	// Officeroom holds the value of the officeroom edge.
	Officeroom *Officeroom
	// Prename holds the value of the prename edge.
	Prename *Prename
	// User holds the value of the user edge.
	User *User
	// Treatment holds the value of the treatment edge.
	Treatment []*Treatment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DoctorinfoEdges) DepartmentOrErr() (*Department, error) {
	if e.loadedTypes[0] {
		if e.Department == nil {
			// The edge department was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "department"}
}

// EducationlevelOrErr returns the Educationlevel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DoctorinfoEdges) EducationlevelOrErr() (*Educationlevel, error) {
	if e.loadedTypes[1] {
		if e.Educationlevel == nil {
			// The edge educationlevel was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: educationlevel.Label}
		}
		return e.Educationlevel, nil
	}
	return nil, &NotLoadedError{edge: "educationlevel"}
}

// OfficeroomOrErr returns the Officeroom value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DoctorinfoEdges) OfficeroomOrErr() (*Officeroom, error) {
	if e.loadedTypes[2] {
		if e.Officeroom == nil {
			// The edge officeroom was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: officeroom.Label}
		}
		return e.Officeroom, nil
	}
	return nil, &NotLoadedError{edge: "officeroom"}
}

// PrenameOrErr returns the Prename value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DoctorinfoEdges) PrenameOrErr() (*Prename, error) {
	if e.loadedTypes[3] {
		if e.Prename == nil {
			// The edge prename was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: prename.Label}
		}
		return e.Prename, nil
	}
	return nil, &NotLoadedError{edge: "prename"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DoctorinfoEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[4] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TreatmentOrErr returns the Treatment value or an error if the edge
// was not loaded in eager-loading.
func (e DoctorinfoEdges) TreatmentOrErr() ([]*Treatment, error) {
	if e.loadedTypes[5] {
		return e.Treatment, nil
	}
	return nil, &NotLoadedError{edge: "treatment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Doctorinfo) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // doctorname
		&sql.NullString{}, // doctorsurname
		&sql.NullString{}, // telephonenumber
		&sql.NullString{}, // licensenumber
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Doctorinfo) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // department
		&sql.NullInt64{}, // level
		&sql.NullInt64{}, // roomnumber
		&sql.NullInt64{}, // prefix
		&sql.NullInt64{}, // user_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Doctorinfo fields.
func (d *Doctorinfo) assignValues(values ...interface{}) error {
	if m, n := len(values), len(doctorinfo.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field doctorname", values[0])
	} else if value.Valid {
		d.Doctorname = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field doctorsurname", values[1])
	} else if value.Valid {
		d.Doctorsurname = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field telephonenumber", values[2])
	} else if value.Valid {
		d.Telephonenumber = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field licensenumber", values[3])
	} else if value.Valid {
		d.Licensenumber = value.String
	}
	values = values[4:]
	if len(values) == len(doctorinfo.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field department", value)
		} else if value.Valid {
			d.department = new(int)
			*d.department = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field level", value)
		} else if value.Valid {
			d.level = new(int)
			*d.level = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field roomnumber", value)
		} else if value.Valid {
			d.roomnumber = new(int)
			*d.roomnumber = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field prefix", value)
		} else if value.Valid {
			d.prefix = new(int)
			*d.prefix = int(value.Int64)
		}
		if value, ok := values[4].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_id", value)
		} else if value.Valid {
			d.user_id = new(int)
			*d.user_id = int(value.Int64)
		}
	}
	return nil
}

// QueryDepartment queries the department edge of the Doctorinfo.
func (d *Doctorinfo) QueryDepartment() *DepartmentQuery {
	return (&DoctorinfoClient{config: d.config}).QueryDepartment(d)
}

// QueryEducationlevel queries the educationlevel edge of the Doctorinfo.
func (d *Doctorinfo) QueryEducationlevel() *EducationlevelQuery {
	return (&DoctorinfoClient{config: d.config}).QueryEducationlevel(d)
}

// QueryOfficeroom queries the officeroom edge of the Doctorinfo.
func (d *Doctorinfo) QueryOfficeroom() *OfficeroomQuery {
	return (&DoctorinfoClient{config: d.config}).QueryOfficeroom(d)
}

// QueryPrename queries the prename edge of the Doctorinfo.
func (d *Doctorinfo) QueryPrename() *PrenameQuery {
	return (&DoctorinfoClient{config: d.config}).QueryPrename(d)
}

// QueryUser queries the user edge of the Doctorinfo.
func (d *Doctorinfo) QueryUser() *UserQuery {
	return (&DoctorinfoClient{config: d.config}).QueryUser(d)
}

// QueryTreatment queries the treatment edge of the Doctorinfo.
func (d *Doctorinfo) QueryTreatment() *TreatmentQuery {
	return (&DoctorinfoClient{config: d.config}).QueryTreatment(d)
}

// Update returns a builder for updating this Doctorinfo.
// Note that, you need to call Doctorinfo.Unwrap() before calling this method, if this Doctorinfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Doctorinfo) Update() *DoctorinfoUpdateOne {
	return (&DoctorinfoClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Doctorinfo) Unwrap() *Doctorinfo {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Doctorinfo is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Doctorinfo) String() string {
	var builder strings.Builder
	builder.WriteString("Doctorinfo(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", doctorname=")
	builder.WriteString(d.Doctorname)
	builder.WriteString(", doctorsurname=")
	builder.WriteString(d.Doctorsurname)
	builder.WriteString(", telephonenumber=")
	builder.WriteString(d.Telephonenumber)
	builder.WriteString(", licensenumber=")
	builder.WriteString(d.Licensenumber)
	builder.WriteByte(')')
	return builder.String()
}

// Doctorinfos is a parsable slice of Doctorinfo.
type Doctorinfos []*Doctorinfo

func (d Doctorinfos) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
