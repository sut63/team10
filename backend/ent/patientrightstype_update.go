// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team10/app/ent/abilitypatientrights"
	"github.com/team10/app/ent/patientrights"
	"github.com/team10/app/ent/patientrightstype"
	"github.com/team10/app/ent/predicate"
)

// PatientrightstypeUpdate is the builder for updating Patientrightstype entities.
type PatientrightstypeUpdate struct {
	config
	hooks      []Hook
	mutation   *PatientrightstypeMutation
	predicates []predicate.Patientrightstype
}

// Where adds a new predicate for the builder.
func (pu *PatientrightstypeUpdate) Where(ps ...predicate.Patientrightstype) *PatientrightstypeUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetPermission sets the Permission field.
func (pu *PatientrightstypeUpdate) SetPermission(s string) *PatientrightstypeUpdate {
	pu.mutation.SetPermission(s)
	return pu
}

// SetPermissionArea sets the PermissionArea field.
func (pu *PatientrightstypeUpdate) SetPermissionArea(s string) *PatientrightstypeUpdate {
	pu.mutation.SetPermissionArea(s)
	return pu
}

// SetResponsible sets the Responsible field.
func (pu *PatientrightstypeUpdate) SetResponsible(s string) *PatientrightstypeUpdate {
	pu.mutation.SetResponsible(s)
	return pu
}

// AddEdgesOfPatientrightstypePatientrightIDs adds the EdgesOfPatientrightstypePatientrights edge to Patientrights by ids.
func (pu *PatientrightstypeUpdate) AddEdgesOfPatientrightstypePatientrightIDs(ids ...int) *PatientrightstypeUpdate {
	pu.mutation.AddEdgesOfPatientrightstypePatientrightIDs(ids...)
	return pu
}

// AddEdgesOfPatientrightstypePatientrights adds the EdgesOfPatientrightstypePatientrights edges to Patientrights.
func (pu *PatientrightstypeUpdate) AddEdgesOfPatientrightstypePatientrights(p ...*Patientrights) *PatientrightstypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddEdgesOfPatientrightstypePatientrightIDs(ids...)
}

// SetEdgesOfPatientrightstypeAbilitypatientrightsID sets the EdgesOfPatientrightstypeAbilitypatientrights edge to Abilitypatientrights by id.
func (pu *PatientrightstypeUpdate) SetEdgesOfPatientrightstypeAbilitypatientrightsID(id int) *PatientrightstypeUpdate {
	pu.mutation.SetEdgesOfPatientrightstypeAbilitypatientrightsID(id)
	return pu
}

// SetNillableEdgesOfPatientrightstypeAbilitypatientrightsID sets the EdgesOfPatientrightstypeAbilitypatientrights edge to Abilitypatientrights by id if the given value is not nil.
func (pu *PatientrightstypeUpdate) SetNillableEdgesOfPatientrightstypeAbilitypatientrightsID(id *int) *PatientrightstypeUpdate {
	if id != nil {
		pu = pu.SetEdgesOfPatientrightstypeAbilitypatientrightsID(*id)
	}
	return pu
}

// SetEdgesOfPatientrightstypeAbilitypatientrights sets the EdgesOfPatientrightstypeAbilitypatientrights edge to Abilitypatientrights.
func (pu *PatientrightstypeUpdate) SetEdgesOfPatientrightstypeAbilitypatientrights(a *Abilitypatientrights) *PatientrightstypeUpdate {
	return pu.SetEdgesOfPatientrightstypeAbilitypatientrightsID(a.ID)
}

// Mutation returns the PatientrightstypeMutation object of the builder.
func (pu *PatientrightstypeUpdate) Mutation() *PatientrightstypeMutation {
	return pu.mutation
}

// RemoveEdgesOfPatientrightstypePatientrightIDs removes the EdgesOfPatientrightstypePatientrights edge to Patientrights by ids.
func (pu *PatientrightstypeUpdate) RemoveEdgesOfPatientrightstypePatientrightIDs(ids ...int) *PatientrightstypeUpdate {
	pu.mutation.RemoveEdgesOfPatientrightstypePatientrightIDs(ids...)
	return pu
}

// RemoveEdgesOfPatientrightstypePatientrights removes EdgesOfPatientrightstypePatientrights edges to Patientrights.
func (pu *PatientrightstypeUpdate) RemoveEdgesOfPatientrightstypePatientrights(p ...*Patientrights) *PatientrightstypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveEdgesOfPatientrightstypePatientrightIDs(ids...)
}

// ClearEdgesOfPatientrightstypeAbilitypatientrights clears the EdgesOfPatientrightstypeAbilitypatientrights edge to Abilitypatientrights.
func (pu *PatientrightstypeUpdate) ClearEdgesOfPatientrightstypeAbilitypatientrights() *PatientrightstypeUpdate {
	pu.mutation.ClearEdgesOfPatientrightstypeAbilitypatientrights()
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PatientrightstypeUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientrightstypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PatientrightstypeUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PatientrightstypeUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PatientrightstypeUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PatientrightstypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   patientrightstype.Table,
			Columns: patientrightstype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patientrightstype.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Permission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrightstype.FieldPermission,
		})
	}
	if value, ok := pu.mutation.PermissionArea(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrightstype.FieldPermissionArea,
		})
	}
	if value, ok := pu.mutation.Responsible(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrightstype.FieldResponsible,
		})
	}
	if nodes := pu.mutation.RemovedEdgesOfPatientrightstypePatientrightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patientrightstype.EdgesOfPatientrightstypePatientrightsTable,
			Columns: []string{patientrightstype.EdgesOfPatientrightstypePatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrights.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EdgesOfPatientrightstypePatientrightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patientrightstype.EdgesOfPatientrightstypePatientrightsTable,
			Columns: []string{patientrightstype.EdgesOfPatientrightstypePatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrights.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EdgesOfPatientrightstypeAbilitypatientrightsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrightstype.EdgesOfPatientrightstypeAbilitypatientrightsTable,
			Columns: []string{patientrightstype.EdgesOfPatientrightstypeAbilitypatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilitypatientrights.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EdgesOfPatientrightstypeAbilitypatientrightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrightstype.EdgesOfPatientrightstypeAbilitypatientrightsTable,
			Columns: []string{patientrightstype.EdgesOfPatientrightstypeAbilitypatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilitypatientrights.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patientrightstype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PatientrightstypeUpdateOne is the builder for updating a single Patientrightstype entity.
type PatientrightstypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *PatientrightstypeMutation
}

// SetPermission sets the Permission field.
func (puo *PatientrightstypeUpdateOne) SetPermission(s string) *PatientrightstypeUpdateOne {
	puo.mutation.SetPermission(s)
	return puo
}

// SetPermissionArea sets the PermissionArea field.
func (puo *PatientrightstypeUpdateOne) SetPermissionArea(s string) *PatientrightstypeUpdateOne {
	puo.mutation.SetPermissionArea(s)
	return puo
}

// SetResponsible sets the Responsible field.
func (puo *PatientrightstypeUpdateOne) SetResponsible(s string) *PatientrightstypeUpdateOne {
	puo.mutation.SetResponsible(s)
	return puo
}

// AddEdgesOfPatientrightstypePatientrightIDs adds the EdgesOfPatientrightstypePatientrights edge to Patientrights by ids.
func (puo *PatientrightstypeUpdateOne) AddEdgesOfPatientrightstypePatientrightIDs(ids ...int) *PatientrightstypeUpdateOne {
	puo.mutation.AddEdgesOfPatientrightstypePatientrightIDs(ids...)
	return puo
}

// AddEdgesOfPatientrightstypePatientrights adds the EdgesOfPatientrightstypePatientrights edges to Patientrights.
func (puo *PatientrightstypeUpdateOne) AddEdgesOfPatientrightstypePatientrights(p ...*Patientrights) *PatientrightstypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddEdgesOfPatientrightstypePatientrightIDs(ids...)
}

// SetEdgesOfPatientrightstypeAbilitypatientrightsID sets the EdgesOfPatientrightstypeAbilitypatientrights edge to Abilitypatientrights by id.
func (puo *PatientrightstypeUpdateOne) SetEdgesOfPatientrightstypeAbilitypatientrightsID(id int) *PatientrightstypeUpdateOne {
	puo.mutation.SetEdgesOfPatientrightstypeAbilitypatientrightsID(id)
	return puo
}

// SetNillableEdgesOfPatientrightstypeAbilitypatientrightsID sets the EdgesOfPatientrightstypeAbilitypatientrights edge to Abilitypatientrights by id if the given value is not nil.
func (puo *PatientrightstypeUpdateOne) SetNillableEdgesOfPatientrightstypeAbilitypatientrightsID(id *int) *PatientrightstypeUpdateOne {
	if id != nil {
		puo = puo.SetEdgesOfPatientrightstypeAbilitypatientrightsID(*id)
	}
	return puo
}

// SetEdgesOfPatientrightstypeAbilitypatientrights sets the EdgesOfPatientrightstypeAbilitypatientrights edge to Abilitypatientrights.
func (puo *PatientrightstypeUpdateOne) SetEdgesOfPatientrightstypeAbilitypatientrights(a *Abilitypatientrights) *PatientrightstypeUpdateOne {
	return puo.SetEdgesOfPatientrightstypeAbilitypatientrightsID(a.ID)
}

// Mutation returns the PatientrightstypeMutation object of the builder.
func (puo *PatientrightstypeUpdateOne) Mutation() *PatientrightstypeMutation {
	return puo.mutation
}

// RemoveEdgesOfPatientrightstypePatientrightIDs removes the EdgesOfPatientrightstypePatientrights edge to Patientrights by ids.
func (puo *PatientrightstypeUpdateOne) RemoveEdgesOfPatientrightstypePatientrightIDs(ids ...int) *PatientrightstypeUpdateOne {
	puo.mutation.RemoveEdgesOfPatientrightstypePatientrightIDs(ids...)
	return puo
}

// RemoveEdgesOfPatientrightstypePatientrights removes EdgesOfPatientrightstypePatientrights edges to Patientrights.
func (puo *PatientrightstypeUpdateOne) RemoveEdgesOfPatientrightstypePatientrights(p ...*Patientrights) *PatientrightstypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveEdgesOfPatientrightstypePatientrightIDs(ids...)
}

// ClearEdgesOfPatientrightstypeAbilitypatientrights clears the EdgesOfPatientrightstypeAbilitypatientrights edge to Abilitypatientrights.
func (puo *PatientrightstypeUpdateOne) ClearEdgesOfPatientrightstypeAbilitypatientrights() *PatientrightstypeUpdateOne {
	puo.mutation.ClearEdgesOfPatientrightstypeAbilitypatientrights()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PatientrightstypeUpdateOne) Save(ctx context.Context) (*Patientrightstype, error) {

	var (
		err  error
		node *Patientrightstype
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientrightstypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PatientrightstypeUpdateOne) SaveX(ctx context.Context) *Patientrightstype {
	pa, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pa
}

// Exec executes the query on the entity.
func (puo *PatientrightstypeUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PatientrightstypeUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PatientrightstypeUpdateOne) sqlSave(ctx context.Context) (pa *Patientrightstype, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   patientrightstype.Table,
			Columns: patientrightstype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patientrightstype.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Patientrightstype.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.Permission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrightstype.FieldPermission,
		})
	}
	if value, ok := puo.mutation.PermissionArea(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrightstype.FieldPermissionArea,
		})
	}
	if value, ok := puo.mutation.Responsible(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrightstype.FieldResponsible,
		})
	}
	if nodes := puo.mutation.RemovedEdgesOfPatientrightstypePatientrightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patientrightstype.EdgesOfPatientrightstypePatientrightsTable,
			Columns: []string{patientrightstype.EdgesOfPatientrightstypePatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrights.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EdgesOfPatientrightstypePatientrightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patientrightstype.EdgesOfPatientrightstypePatientrightsTable,
			Columns: []string{patientrightstype.EdgesOfPatientrightstypePatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrights.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EdgesOfPatientrightstypeAbilitypatientrightsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrightstype.EdgesOfPatientrightstypeAbilitypatientrightsTable,
			Columns: []string{patientrightstype.EdgesOfPatientrightstypeAbilitypatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilitypatientrights.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EdgesOfPatientrightstypeAbilitypatientrightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrightstype.EdgesOfPatientrightstypeAbilitypatientrightsTable,
			Columns: []string{patientrightstype.EdgesOfPatientrightstypeAbilitypatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilitypatientrights.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pa = &Patientrightstype{config: puo.config}
	_spec.Assign = pa.assignValues
	_spec.ScanValues = pa.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patientrightstype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pa, nil
}
