// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team10/app/ent/predicate"
	"github.com/team10/app/ent/registrar"
	"github.com/team10/app/ent/user"
)

// RegistrarUpdate is the builder for updating Registrar entities.
type RegistrarUpdate struct {
	config
	hooks      []Hook
	mutation   *RegistrarMutation
	predicates []predicate.Registrar
}

// Where adds a new predicate for the builder.
func (ru *RegistrarUpdate) Where(ps ...predicate.Registrar) *RegistrarUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetName sets the Name field.
func (ru *RegistrarUpdate) SetName(s string) *RegistrarUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetUserID sets the user edge to User by id.
func (ru *RegistrarUpdate) SetUserID(id int) *RegistrarUpdate {
	ru.mutation.SetUserID(id)
	return ru
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (ru *RegistrarUpdate) SetNillableUserID(id *int) *RegistrarUpdate {
	if id != nil {
		ru = ru.SetUserID(*id)
	}
	return ru
}

// SetUser sets the user edge to User.
func (ru *RegistrarUpdate) SetUser(u *User) *RegistrarUpdate {
	return ru.SetUserID(u.ID)
}

// Mutation returns the RegistrarMutation object of the builder.
func (ru *RegistrarUpdate) Mutation() *RegistrarMutation {
	return ru.mutation
}

// ClearUser clears the user edge to User.
func (ru *RegistrarUpdate) ClearUser() *RegistrarUpdate {
	ru.mutation.ClearUser()
	return ru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RegistrarUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RegistrarMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RegistrarUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RegistrarUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RegistrarUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RegistrarUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   registrar.Table,
			Columns: registrar.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: registrar.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: registrar.FieldName,
		})
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   registrar.UserTable,
			Columns: []string{registrar.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   registrar.UserTable,
			Columns: []string{registrar.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{registrar.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RegistrarUpdateOne is the builder for updating a single Registrar entity.
type RegistrarUpdateOne struct {
	config
	hooks    []Hook
	mutation *RegistrarMutation
}

// SetName sets the Name field.
func (ruo *RegistrarUpdateOne) SetName(s string) *RegistrarUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetUserID sets the user edge to User by id.
func (ruo *RegistrarUpdateOne) SetUserID(id int) *RegistrarUpdateOne {
	ruo.mutation.SetUserID(id)
	return ruo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (ruo *RegistrarUpdateOne) SetNillableUserID(id *int) *RegistrarUpdateOne {
	if id != nil {
		ruo = ruo.SetUserID(*id)
	}
	return ruo
}

// SetUser sets the user edge to User.
func (ruo *RegistrarUpdateOne) SetUser(u *User) *RegistrarUpdateOne {
	return ruo.SetUserID(u.ID)
}

// Mutation returns the RegistrarMutation object of the builder.
func (ruo *RegistrarUpdateOne) Mutation() *RegistrarMutation {
	return ruo.mutation
}

// ClearUser clears the user edge to User.
func (ruo *RegistrarUpdateOne) ClearUser() *RegistrarUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// Save executes the query and returns the updated entity.
func (ruo *RegistrarUpdateOne) Save(ctx context.Context) (*Registrar, error) {

	var (
		err  error
		node *Registrar
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RegistrarMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RegistrarUpdateOne) SaveX(ctx context.Context) *Registrar {
	r, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return r
}

// Exec executes the query on the entity.
func (ruo *RegistrarUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RegistrarUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RegistrarUpdateOne) sqlSave(ctx context.Context) (r *Registrar, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   registrar.Table,
			Columns: registrar.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: registrar.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Registrar.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: registrar.FieldName,
		})
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   registrar.UserTable,
			Columns: []string{registrar.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   registrar.UserTable,
			Columns: []string{registrar.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	r = &Registrar{config: ruo.config}
	_spec.Assign = r.assignValues
	_spec.ScanValues = r.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{registrar.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return r, nil
}
