// Code generated by entc, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"

	// EdgeFinancier holds the string denoting the financier edge name in mutations.
	EdgeFinancier = "financier"
	// EdgeHistorytaking holds the string denoting the historytaking edge name in mutations.
	EdgeHistorytaking = "historytaking"
	// EdgeUserPatientrights holds the string denoting the userpatientrights edge name in mutations.
	EdgeUserPatientrights = "UserPatientrights"
	// EdgeMedicalrecordstaff holds the string denoting the medicalrecordstaff edge name in mutations.
	EdgeMedicalrecordstaff = "medicalrecordstaff"
	// EdgeUser2registrar holds the string denoting the user2registrar edge name in mutations.
	EdgeUser2registrar = "user2registrar"
	// EdgeUserstatus holds the string denoting the userstatus edge name in mutations.
	EdgeUserstatus = "userstatus"

	// Table holds the table name of the user in the database.
	Table = "users"
	// FinancierTable is the table the holds the financier relation/edge.
	FinancierTable = "financiers"
	// FinancierInverseTable is the table name for the Financier entity.
	// It exists in this package in order to avoid circular dependency with the "financier" package.
	FinancierInverseTable = "financiers"
	// FinancierColumn is the table column denoting the financier relation/edge.
	FinancierColumn = "user_id"
	// HistorytakingTable is the table the holds the historytaking relation/edge.
	HistorytakingTable = "nurses"
	// HistorytakingInverseTable is the table name for the Nurse entity.
	// It exists in this package in order to avoid circular dependency with the "nurse" package.
	HistorytakingInverseTable = "nurses"
	// HistorytakingColumn is the table column denoting the historytaking relation/edge.
	HistorytakingColumn = "user_id"
	// UserPatientrightsTable is the table the holds the UserPatientrights relation/edge.
	UserPatientrightsTable = "users"
	// UserPatientrightsInverseTable is the table name for the Patientrights entity.
	// It exists in this package in order to avoid circular dependency with the "patientrights" package.
	UserPatientrightsInverseTable = "patientrights"
	// UserPatientrightsColumn is the table column denoting the UserPatientrights relation/edge.
	UserPatientrightsColumn = "user_id"
	// MedicalrecordstaffTable is the table the holds the medicalrecordstaff relation/edge.
	MedicalrecordstaffTable = "medicalrecordstaffs"
	// MedicalrecordstaffInverseTable is the table name for the Medicalrecordstaff entity.
	// It exists in this package in order to avoid circular dependency with the "medicalrecordstaff" package.
	MedicalrecordstaffInverseTable = "medicalrecordstaffs"
	// MedicalrecordstaffColumn is the table column denoting the medicalrecordstaff relation/edge.
	MedicalrecordstaffColumn = "user_id"
	// User2registrarTable is the table the holds the user2registrar relation/edge.
	User2registrarTable = "registrars"
	// User2registrarInverseTable is the table name for the Registrar entity.
	// It exists in this package in order to avoid circular dependency with the "registrar" package.
	User2registrarInverseTable = "registrars"
	// User2registrarColumn is the table column denoting the user2registrar relation/edge.
	User2registrarColumn = "user_id"
	// UserstatusTable is the table the holds the userstatus relation/edge.
	UserstatusTable = "users"
	// UserstatusInverseTable is the table name for the Userstatus entity.
	// It exists in this package in order to avoid circular dependency with the "userstatus" package.
	UserstatusInverseTable = "userstatuses"
	// UserstatusColumn is the table column denoting the userstatus relation/edge.
	UserstatusColumn = "userstatus_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldPassword,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the User type.
var ForeignKeys = []string{
	"user_id",
	"userstatus_id",
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
)
