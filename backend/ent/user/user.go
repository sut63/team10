// Code generated by entc, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldImages holds the string denoting the images field in the database.
	FieldImages = "images"

	// EdgeEdgesOfFinancier holds the string denoting the edgesoffinancier edge name in mutations.
	EdgeEdgesOfFinancier = "EdgesOfFinancier"
	// EdgeEdgesOfNurse holds the string denoting the edgesofnurse edge name in mutations.
	EdgeEdgesOfNurse = "EdgesOfNurse"
	// EdgeEdgesOfUserPatientrights holds the string denoting the edgesofuserpatientrights edge name in mutations.
	EdgeEdgesOfUserPatientrights = "EdgesOfUserPatientrights"
	// EdgeEdgesOfMedicalrecordstaff holds the string denoting the edgesofmedicalrecordstaff edge name in mutations.
	EdgeEdgesOfMedicalrecordstaff = "EdgesOfMedicalrecordstaff"
	// EdgeEdgesOfUser2registrar holds the string denoting the edgesofuser2registrar edge name in mutations.
	EdgeEdgesOfUser2registrar = "EdgesOfUser2registrar"
	// EdgeEdgesOfDoctor holds the string denoting the edgesofdoctor edge name in mutations.
	EdgeEdgesOfDoctor = "EdgesOfDoctor"

	// Table holds the table name of the user in the database.
	Table = "users"
	// EdgesOfFinancierTable is the table the holds the EdgesOfFinancier relation/edge.
	EdgesOfFinancierTable = "financiers"
	// EdgesOfFinancierInverseTable is the table name for the Financier entity.
	// It exists in this package in order to avoid circular dependency with the "financier" package.
	EdgesOfFinancierInverseTable = "financiers"
	// EdgesOfFinancierColumn is the table column denoting the EdgesOfFinancier relation/edge.
	EdgesOfFinancierColumn = "user_id"
	// EdgesOfNurseTable is the table the holds the EdgesOfNurse relation/edge.
	EdgesOfNurseTable = "nurses"
	// EdgesOfNurseInverseTable is the table name for the Nurse entity.
	// It exists in this package in order to avoid circular dependency with the "nurse" package.
	EdgesOfNurseInverseTable = "nurses"
	// EdgesOfNurseColumn is the table column denoting the EdgesOfNurse relation/edge.
	EdgesOfNurseColumn = "user_id"
	// EdgesOfUserPatientrightsTable is the table the holds the EdgesOfUserPatientrights relation/edge.
	EdgesOfUserPatientrightsTable = "users"
	// EdgesOfUserPatientrightsInverseTable is the table name for the Patientrights entity.
	// It exists in this package in order to avoid circular dependency with the "patientrights" package.
	EdgesOfUserPatientrightsInverseTable = "patientrights"
	// EdgesOfUserPatientrightsColumn is the table column denoting the EdgesOfUserPatientrights relation/edge.
	EdgesOfUserPatientrightsColumn = "user_id"
	// EdgesOfMedicalrecordstaffTable is the table the holds the EdgesOfMedicalrecordstaff relation/edge.
	EdgesOfMedicalrecordstaffTable = "medicalrecordstaffs"
	// EdgesOfMedicalrecordstaffInverseTable is the table name for the Medicalrecordstaff entity.
	// It exists in this package in order to avoid circular dependency with the "medicalrecordstaff" package.
	EdgesOfMedicalrecordstaffInverseTable = "medicalrecordstaffs"
	// EdgesOfMedicalrecordstaffColumn is the table column denoting the EdgesOfMedicalrecordstaff relation/edge.
	EdgesOfMedicalrecordstaffColumn = "user_id"
	// EdgesOfUser2registrarTable is the table the holds the EdgesOfUser2registrar relation/edge.
	EdgesOfUser2registrarTable = "registrars"
	// EdgesOfUser2registrarInverseTable is the table name for the Registrar entity.
	// It exists in this package in order to avoid circular dependency with the "registrar" package.
	EdgesOfUser2registrarInverseTable = "registrars"
	// EdgesOfUser2registrarColumn is the table column denoting the EdgesOfUser2registrar relation/edge.
	EdgesOfUser2registrarColumn = "user_id"
	// EdgesOfDoctorTable is the table the holds the EdgesOfDoctor relation/edge.
	EdgesOfDoctorTable = "doctors"
	// EdgesOfDoctorInverseTable is the table name for the Doctor entity.
	// It exists in this package in order to avoid circular dependency with the "doctor" package.
	EdgesOfDoctorInverseTable = "doctors"
	// EdgesOfDoctorColumn is the table column denoting the EdgesOfDoctor relation/edge.
	EdgesOfDoctorColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldPassword,
	FieldImages,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the User type.
var ForeignKeys = []string{
	"user_id",
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
)
