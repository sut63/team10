// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team10/app/ent/doctorinfo"
	"github.com/team10/app/ent/financier"
	"github.com/team10/app/ent/medicalrecordstaff"
	"github.com/team10/app/ent/nurse"
	"github.com/team10/app/ent/patientrights"
	"github.com/team10/app/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetEmail sets the email field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetPassword sets the password field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetFinancierID sets the financier edge to Financier by id.
func (uc *UserCreate) SetFinancierID(id int) *UserCreate {
	uc.mutation.SetFinancierID(id)
	return uc
}

// SetNillableFinancierID sets the financier edge to Financier by id if the given value is not nil.
func (uc *UserCreate) SetNillableFinancierID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetFinancierID(*id)
	}
	return uc
}

// SetFinancier sets the financier edge to Financier.
func (uc *UserCreate) SetFinancier(f *Financier) *UserCreate {
	return uc.SetFinancierID(f.ID)
}

// SetHistorytakingID sets the historytaking edge to Nurse by id.
func (uc *UserCreate) SetHistorytakingID(id int) *UserCreate {
	uc.mutation.SetHistorytakingID(id)
	return uc
}

// SetNillableHistorytakingID sets the historytaking edge to Nurse by id if the given value is not nil.
func (uc *UserCreate) SetNillableHistorytakingID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetHistorytakingID(*id)
	}
	return uc
}

// SetHistorytaking sets the historytaking edge to Nurse.
func (uc *UserCreate) SetHistorytaking(n *Nurse) *UserCreate {
	return uc.SetHistorytakingID(n.ID)
}

// SetUserPatientrightsID sets the UserPatientrights edge to Patientrights by id.
func (uc *UserCreate) SetUserPatientrightsID(id int) *UserCreate {
	uc.mutation.SetUserPatientrightsID(id)
	return uc
}

// SetNillableUserPatientrightsID sets the UserPatientrights edge to Patientrights by id if the given value is not nil.
func (uc *UserCreate) SetNillableUserPatientrightsID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetUserPatientrightsID(*id)
	}
	return uc
}

// SetUserPatientrights sets the UserPatientrights edge to Patientrights.
func (uc *UserCreate) SetUserPatientrights(p *Patientrights) *UserCreate {
	return uc.SetUserPatientrightsID(p.ID)
}

// SetMedicalrecordstaffID sets the medicalrecordstaff edge to Medicalrecordstaff by id.
func (uc *UserCreate) SetMedicalrecordstaffID(id int) *UserCreate {
	uc.mutation.SetMedicalrecordstaffID(id)
	return uc
}

// SetNillableMedicalrecordstaffID sets the medicalrecordstaff edge to Medicalrecordstaff by id if the given value is not nil.
func (uc *UserCreate) SetNillableMedicalrecordstaffID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetMedicalrecordstaffID(*id)
	}
	return uc
}

// SetMedicalrecordstaff sets the medicalrecordstaff edge to Medicalrecordstaff.
func (uc *UserCreate) SetMedicalrecordstaff(m *Medicalrecordstaff) *UserCreate {
	return uc.SetMedicalrecordstaffID(m.ID)
}

// SetUser2doctorinfoID sets the user2doctorinfo edge to Doctorinfo by id.
func (uc *UserCreate) SetUser2doctorinfoID(id int) *UserCreate {
	uc.mutation.SetUser2doctorinfoID(id)
	return uc
}

// SetNillableUser2doctorinfoID sets the user2doctorinfo edge to Doctorinfo by id if the given value is not nil.
func (uc *UserCreate) SetNillableUser2doctorinfoID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetUser2doctorinfoID(*id)
	}
	return uc
}

// SetUser2doctorinfo sets the user2doctorinfo edge to Doctorinfo.
func (uc *UserCreate) SetUser2doctorinfo(d *Doctorinfo) *UserCreate {
	return uc.SetUser2doctorinfoID(d.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if _, ok := uc.mutation.Email(); !ok {
		return nil, &ValidationError{Name: "email", err: errors.New("ent: missing required field \"email\"")}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return nil, &ValidationError{Name: "password", err: errors.New("ent: missing required field \"password\"")}
	}
	if v, ok := uc.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	var (
		err  error
		node *User
	)
	if len(uc.hooks) == 0 {
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uc.mutation = mutation
			node, err = uc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	u, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	u.ID = int(id)
	return u, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		u     = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
		u.Email = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
		u.Password = value
	}
	if nodes := uc.mutation.FinancierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.FinancierTable,
			Columns: []string{user.FinancierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: financier.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.HistorytakingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.HistorytakingTable,
			Columns: []string{user.HistorytakingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserPatientrightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.UserPatientrightsTable,
			Columns: []string{user.UserPatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrights.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.MedicalrecordstaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.MedicalrecordstaffTable,
			Columns: []string{user.MedicalrecordstaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalrecordstaff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.User2doctorinfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.User2doctorinfoTable,
			Columns: []string{user.User2doctorinfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctorinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return u, _spec
}
