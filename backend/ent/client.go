// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/team10/app/ent/migrate"

	"github.com/team10/app/ent/abilitypatientrights"
	"github.com/team10/app/ent/bill"
	"github.com/team10/app/ent/department"
	"github.com/team10/app/ent/doctorinfo"
	"github.com/team10/app/ent/educationlevel"
	"github.com/team10/app/ent/financier"
	"github.com/team10/app/ent/gender"
	"github.com/team10/app/ent/historytaking"
	"github.com/team10/app/ent/insurance"
	"github.com/team10/app/ent/medicalrecordstaff"
	"github.com/team10/app/ent/nurse"
	"github.com/team10/app/ent/officeroom"
	"github.com/team10/app/ent/patientrecord"
	"github.com/team10/app/ent/patientrights"
	"github.com/team10/app/ent/patientrightstype"
	"github.com/team10/app/ent/paytype"
	"github.com/team10/app/ent/prename"
	"github.com/team10/app/ent/symptomseverity"
	"github.com/team10/app/ent/treatment"
	"github.com/team10/app/ent/typetreatment"
	"github.com/team10/app/ent/unpaybill"
	"github.com/team10/app/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Abilitypatientrights is the client for interacting with the Abilitypatientrights builders.
	Abilitypatientrights *AbilitypatientrightsClient
	// Bill is the client for interacting with the Bill builders.
	Bill *BillClient
	// Department is the client for interacting with the Department builders.
	Department *DepartmentClient
	// Doctorinfo is the client for interacting with the Doctorinfo builders.
	Doctorinfo *DoctorinfoClient
	// Educationlevel is the client for interacting with the Educationlevel builders.
	Educationlevel *EducationlevelClient
	// Financier is the client for interacting with the Financier builders.
	Financier *FinancierClient
	// Gender is the client for interacting with the Gender builders.
	Gender *GenderClient
	// Historytaking is the client for interacting with the Historytaking builders.
	Historytaking *HistorytakingClient
	// Insurance is the client for interacting with the Insurance builders.
	Insurance *InsuranceClient
	// Medicalrecordstaff is the client for interacting with the Medicalrecordstaff builders.
	Medicalrecordstaff *MedicalrecordstaffClient
	// Nurse is the client for interacting with the Nurse builders.
	Nurse *NurseClient
	// Officeroom is the client for interacting with the Officeroom builders.
	Officeroom *OfficeroomClient
	// Patientrecord is the client for interacting with the Patientrecord builders.
	Patientrecord *PatientrecordClient
	// Patientrights is the client for interacting with the Patientrights builders.
	Patientrights *PatientrightsClient
	// Patientrightstype is the client for interacting with the Patientrightstype builders.
	Patientrightstype *PatientrightstypeClient
	// Paytype is the client for interacting with the Paytype builders.
	Paytype *PaytypeClient
	// Prename is the client for interacting with the Prename builders.
	Prename *PrenameClient
	// Symptomseverity is the client for interacting with the Symptomseverity builders.
	Symptomseverity *SymptomseverityClient
	// Treatment is the client for interacting with the Treatment builders.
	Treatment *TreatmentClient
	// Typetreatment is the client for interacting with the Typetreatment builders.
	Typetreatment *TypetreatmentClient
	// Unpaybill is the client for interacting with the Unpaybill builders.
	Unpaybill *UnpaybillClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Abilitypatientrights = NewAbilitypatientrightsClient(c.config)
	c.Bill = NewBillClient(c.config)
	c.Department = NewDepartmentClient(c.config)
	c.Doctorinfo = NewDoctorinfoClient(c.config)
	c.Educationlevel = NewEducationlevelClient(c.config)
	c.Financier = NewFinancierClient(c.config)
	c.Gender = NewGenderClient(c.config)
	c.Historytaking = NewHistorytakingClient(c.config)
	c.Insurance = NewInsuranceClient(c.config)
	c.Medicalrecordstaff = NewMedicalrecordstaffClient(c.config)
	c.Nurse = NewNurseClient(c.config)
	c.Officeroom = NewOfficeroomClient(c.config)
	c.Patientrecord = NewPatientrecordClient(c.config)
	c.Patientrights = NewPatientrightsClient(c.config)
	c.Patientrightstype = NewPatientrightstypeClient(c.config)
	c.Paytype = NewPaytypeClient(c.config)
	c.Prename = NewPrenameClient(c.config)
	c.Symptomseverity = NewSymptomseverityClient(c.config)
	c.Treatment = NewTreatmentClient(c.config)
	c.Typetreatment = NewTypetreatmentClient(c.config)
	c.Unpaybill = NewUnpaybillClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Abilitypatientrights: NewAbilitypatientrightsClient(cfg),
		Bill:                 NewBillClient(cfg),
		Department:           NewDepartmentClient(cfg),
		Doctorinfo:           NewDoctorinfoClient(cfg),
		Educationlevel:       NewEducationlevelClient(cfg),
		Financier:            NewFinancierClient(cfg),
		Gender:               NewGenderClient(cfg),
		Historytaking:        NewHistorytakingClient(cfg),
		Insurance:            NewInsuranceClient(cfg),
		Medicalrecordstaff:   NewMedicalrecordstaffClient(cfg),
		Nurse:                NewNurseClient(cfg),
		Officeroom:           NewOfficeroomClient(cfg),
		Patientrecord:        NewPatientrecordClient(cfg),
		Patientrights:        NewPatientrightsClient(cfg),
		Patientrightstype:    NewPatientrightstypeClient(cfg),
		Paytype:              NewPaytypeClient(cfg),
		Prename:              NewPrenameClient(cfg),
		Symptomseverity:      NewSymptomseverityClient(cfg),
		Treatment:            NewTreatmentClient(cfg),
		Typetreatment:        NewTypetreatmentClient(cfg),
		Unpaybill:            NewUnpaybillClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:               cfg,
		Abilitypatientrights: NewAbilitypatientrightsClient(cfg),
		Bill:                 NewBillClient(cfg),
		Department:           NewDepartmentClient(cfg),
		Doctorinfo:           NewDoctorinfoClient(cfg),
		Educationlevel:       NewEducationlevelClient(cfg),
		Financier:            NewFinancierClient(cfg),
		Gender:               NewGenderClient(cfg),
		Historytaking:        NewHistorytakingClient(cfg),
		Insurance:            NewInsuranceClient(cfg),
		Medicalrecordstaff:   NewMedicalrecordstaffClient(cfg),
		Nurse:                NewNurseClient(cfg),
		Officeroom:           NewOfficeroomClient(cfg),
		Patientrecord:        NewPatientrecordClient(cfg),
		Patientrights:        NewPatientrightsClient(cfg),
		Patientrightstype:    NewPatientrightstypeClient(cfg),
		Paytype:              NewPaytypeClient(cfg),
		Prename:              NewPrenameClient(cfg),
		Symptomseverity:      NewSymptomseverityClient(cfg),
		Treatment:            NewTreatmentClient(cfg),
		Typetreatment:        NewTypetreatmentClient(cfg),
		Unpaybill:            NewUnpaybillClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Abilitypatientrights.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Abilitypatientrights.Use(hooks...)
	c.Bill.Use(hooks...)
	c.Department.Use(hooks...)
	c.Doctorinfo.Use(hooks...)
	c.Educationlevel.Use(hooks...)
	c.Financier.Use(hooks...)
	c.Gender.Use(hooks...)
	c.Historytaking.Use(hooks...)
	c.Insurance.Use(hooks...)
	c.Medicalrecordstaff.Use(hooks...)
	c.Nurse.Use(hooks...)
	c.Officeroom.Use(hooks...)
	c.Patientrecord.Use(hooks...)
	c.Patientrights.Use(hooks...)
	c.Patientrightstype.Use(hooks...)
	c.Paytype.Use(hooks...)
	c.Prename.Use(hooks...)
	c.Symptomseverity.Use(hooks...)
	c.Treatment.Use(hooks...)
	c.Typetreatment.Use(hooks...)
	c.Unpaybill.Use(hooks...)
	c.User.Use(hooks...)
}

// AbilitypatientrightsClient is a client for the Abilitypatientrights schema.
type AbilitypatientrightsClient struct {
	config
}

// NewAbilitypatientrightsClient returns a client for the Abilitypatientrights from the given config.
func NewAbilitypatientrightsClient(c config) *AbilitypatientrightsClient {
	return &AbilitypatientrightsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `abilitypatientrights.Hooks(f(g(h())))`.
func (c *AbilitypatientrightsClient) Use(hooks ...Hook) {
	c.hooks.Abilitypatientrights = append(c.hooks.Abilitypatientrights, hooks...)
}

// Create returns a create builder for Abilitypatientrights.
func (c *AbilitypatientrightsClient) Create() *AbilitypatientrightsCreate {
	mutation := newAbilitypatientrightsMutation(c.config, OpCreate)
	return &AbilitypatientrightsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Abilitypatientrights.
func (c *AbilitypatientrightsClient) Update() *AbilitypatientrightsUpdate {
	mutation := newAbilitypatientrightsMutation(c.config, OpUpdate)
	return &AbilitypatientrightsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AbilitypatientrightsClient) UpdateOne(a *Abilitypatientrights) *AbilitypatientrightsUpdateOne {
	mutation := newAbilitypatientrightsMutation(c.config, OpUpdateOne, withAbilitypatientrights(a))
	return &AbilitypatientrightsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AbilitypatientrightsClient) UpdateOneID(id int) *AbilitypatientrightsUpdateOne {
	mutation := newAbilitypatientrightsMutation(c.config, OpUpdateOne, withAbilitypatientrightsID(id))
	return &AbilitypatientrightsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Abilitypatientrights.
func (c *AbilitypatientrightsClient) Delete() *AbilitypatientrightsDelete {
	mutation := newAbilitypatientrightsMutation(c.config, OpDelete)
	return &AbilitypatientrightsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AbilitypatientrightsClient) DeleteOne(a *Abilitypatientrights) *AbilitypatientrightsDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AbilitypatientrightsClient) DeleteOneID(id int) *AbilitypatientrightsDeleteOne {
	builder := c.Delete().Where(abilitypatientrights.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AbilitypatientrightsDeleteOne{builder}
}

// Create returns a query builder for Abilitypatientrights.
func (c *AbilitypatientrightsClient) Query() *AbilitypatientrightsQuery {
	return &AbilitypatientrightsQuery{config: c.config}
}

// Get returns a Abilitypatientrights entity by its id.
func (c *AbilitypatientrightsClient) Get(ctx context.Context, id int) (*Abilitypatientrights, error) {
	return c.Query().Where(abilitypatientrights.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AbilitypatientrightsClient) GetX(ctx context.Context, id int) *Abilitypatientrights {
	a, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return a
}

// QueryAbilitypatientrightsPatientrightstype queries the AbilitypatientrightsPatientrightstype edge of a Abilitypatientrights.
func (c *AbilitypatientrightsClient) QueryAbilitypatientrightsPatientrightstype(a *Abilitypatientrights) *PatientrightstypeQuery {
	query := &PatientrightstypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abilitypatientrights.Table, abilitypatientrights.FieldID, id),
			sqlgraph.To(patientrightstype.Table, patientrightstype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, abilitypatientrights.AbilitypatientrightsPatientrightstypeTable, abilitypatientrights.AbilitypatientrightsPatientrightstypeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AbilitypatientrightsClient) Hooks() []Hook {
	return c.hooks.Abilitypatientrights
}

// BillClient is a client for the Bill schema.
type BillClient struct {
	config
}

// NewBillClient returns a client for the Bill from the given config.
func NewBillClient(c config) *BillClient {
	return &BillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bill.Hooks(f(g(h())))`.
func (c *BillClient) Use(hooks ...Hook) {
	c.hooks.Bill = append(c.hooks.Bill, hooks...)
}

// Create returns a create builder for Bill.
func (c *BillClient) Create() *BillCreate {
	mutation := newBillMutation(c.config, OpCreate)
	return &BillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Bill.
func (c *BillClient) Update() *BillUpdate {
	mutation := newBillMutation(c.config, OpUpdate)
	return &BillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillClient) UpdateOne(b *Bill) *BillUpdateOne {
	mutation := newBillMutation(c.config, OpUpdateOne, withBill(b))
	return &BillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillClient) UpdateOneID(id int) *BillUpdateOne {
	mutation := newBillMutation(c.config, OpUpdateOne, withBillID(id))
	return &BillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bill.
func (c *BillClient) Delete() *BillDelete {
	mutation := newBillMutation(c.config, OpDelete)
	return &BillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BillClient) DeleteOne(b *Bill) *BillDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BillClient) DeleteOneID(id int) *BillDeleteOne {
	builder := c.Delete().Where(bill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillDeleteOne{builder}
}

// Create returns a query builder for Bill.
func (c *BillClient) Query() *BillQuery {
	return &BillQuery{config: c.config}
}

// Get returns a Bill entity by its id.
func (c *BillClient) Get(ctx context.Context, id int) (*Bill, error) {
	return c.Query().Where(bill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillClient) GetX(ctx context.Context, id int) *Bill {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// QueryPaytype queries the paytype edge of a Bill.
func (c *BillClient) QueryPaytype(b *Bill) *PaytypeQuery {
	query := &PaytypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, id),
			sqlgraph.To(paytype.Table, paytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bill.PaytypeTable, bill.PaytypeColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOfficer queries the officer edge of a Bill.
func (c *BillClient) QueryOfficer(b *Bill) *FinancierQuery {
	query := &FinancierQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, id),
			sqlgraph.To(financier.Table, financier.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bill.OfficerTable, bill.OfficerColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTreatment queries the treatment edge of a Bill.
func (c *BillClient) QueryTreatment(b *Bill) *UnpaybillQuery {
	query := &UnpaybillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, id),
			sqlgraph.To(unpaybill.Table, unpaybill.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, bill.TreatmentTable, bill.TreatmentColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillClient) Hooks() []Hook {
	return c.hooks.Bill
}

// DepartmentClient is a client for the Department schema.
type DepartmentClient struct {
	config
}

// NewDepartmentClient returns a client for the Department from the given config.
func NewDepartmentClient(c config) *DepartmentClient {
	return &DepartmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `department.Hooks(f(g(h())))`.
func (c *DepartmentClient) Use(hooks ...Hook) {
	c.hooks.Department = append(c.hooks.Department, hooks...)
}

// Create returns a create builder for Department.
func (c *DepartmentClient) Create() *DepartmentCreate {
	mutation := newDepartmentMutation(c.config, OpCreate)
	return &DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Department.
func (c *DepartmentClient) Update() *DepartmentUpdate {
	mutation := newDepartmentMutation(c.config, OpUpdate)
	return &DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepartmentClient) UpdateOne(d *Department) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartment(d))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepartmentClient) UpdateOneID(id int) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartmentID(id))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Department.
func (c *DepartmentClient) Delete() *DepartmentDelete {
	mutation := newDepartmentMutation(c.config, OpDelete)
	return &DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DepartmentClient) DeleteOne(d *Department) *DepartmentDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DepartmentClient) DeleteOneID(id int) *DepartmentDeleteOne {
	builder := c.Delete().Where(department.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepartmentDeleteOne{builder}
}

// Create returns a query builder for Department.
func (c *DepartmentClient) Query() *DepartmentQuery {
	return &DepartmentQuery{config: c.config}
}

// Get returns a Department entity by its id.
func (c *DepartmentClient) Get(ctx context.Context, id int) (*Department, error) {
	return c.Query().Where(department.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepartmentClient) GetX(ctx context.Context, id int) *Department {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryDepartment2doctorinfo queries the department2doctorinfo edge of a Department.
func (c *DepartmentClient) QueryDepartment2doctorinfo(d *Department) *DoctorinfoQuery {
	query := &DoctorinfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(doctorinfo.Table, doctorinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, department.Department2doctorinfoTable, department.Department2doctorinfoColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHistorytaking queries the historytaking edge of a Department.
func (c *DepartmentClient) QueryHistorytaking(d *Department) *HistorytakingQuery {
	query := &HistorytakingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(historytaking.Table, historytaking.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, department.HistorytakingTable, department.HistorytakingColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DepartmentClient) Hooks() []Hook {
	return c.hooks.Department
}

// DoctorinfoClient is a client for the Doctorinfo schema.
type DoctorinfoClient struct {
	config
}

// NewDoctorinfoClient returns a client for the Doctorinfo from the given config.
func NewDoctorinfoClient(c config) *DoctorinfoClient {
	return &DoctorinfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `doctorinfo.Hooks(f(g(h())))`.
func (c *DoctorinfoClient) Use(hooks ...Hook) {
	c.hooks.Doctorinfo = append(c.hooks.Doctorinfo, hooks...)
}

// Create returns a create builder for Doctorinfo.
func (c *DoctorinfoClient) Create() *DoctorinfoCreate {
	mutation := newDoctorinfoMutation(c.config, OpCreate)
	return &DoctorinfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Doctorinfo.
func (c *DoctorinfoClient) Update() *DoctorinfoUpdate {
	mutation := newDoctorinfoMutation(c.config, OpUpdate)
	return &DoctorinfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DoctorinfoClient) UpdateOne(d *Doctorinfo) *DoctorinfoUpdateOne {
	mutation := newDoctorinfoMutation(c.config, OpUpdateOne, withDoctorinfo(d))
	return &DoctorinfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DoctorinfoClient) UpdateOneID(id int) *DoctorinfoUpdateOne {
	mutation := newDoctorinfoMutation(c.config, OpUpdateOne, withDoctorinfoID(id))
	return &DoctorinfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Doctorinfo.
func (c *DoctorinfoClient) Delete() *DoctorinfoDelete {
	mutation := newDoctorinfoMutation(c.config, OpDelete)
	return &DoctorinfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DoctorinfoClient) DeleteOne(d *Doctorinfo) *DoctorinfoDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DoctorinfoClient) DeleteOneID(id int) *DoctorinfoDeleteOne {
	builder := c.Delete().Where(doctorinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DoctorinfoDeleteOne{builder}
}

// Create returns a query builder for Doctorinfo.
func (c *DoctorinfoClient) Query() *DoctorinfoQuery {
	return &DoctorinfoQuery{config: c.config}
}

// Get returns a Doctorinfo entity by its id.
func (c *DoctorinfoClient) Get(ctx context.Context, id int) (*Doctorinfo, error) {
	return c.Query().Where(doctorinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DoctorinfoClient) GetX(ctx context.Context, id int) *Doctorinfo {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryDepartment queries the department edge of a Doctorinfo.
func (c *DoctorinfoClient) QueryDepartment(d *Doctorinfo) *DepartmentQuery {
	query := &DepartmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctorinfo.Table, doctorinfo.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, doctorinfo.DepartmentTable, doctorinfo.DepartmentColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEducationlevel queries the educationlevel edge of a Doctorinfo.
func (c *DoctorinfoClient) QueryEducationlevel(d *Doctorinfo) *EducationlevelQuery {
	query := &EducationlevelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctorinfo.Table, doctorinfo.FieldID, id),
			sqlgraph.To(educationlevel.Table, educationlevel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, doctorinfo.EducationlevelTable, doctorinfo.EducationlevelColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOfficeroom queries the officeroom edge of a Doctorinfo.
func (c *DoctorinfoClient) QueryOfficeroom(d *Doctorinfo) *OfficeroomQuery {
	query := &OfficeroomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctorinfo.Table, doctorinfo.FieldID, id),
			sqlgraph.To(officeroom.Table, officeroom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, doctorinfo.OfficeroomTable, doctorinfo.OfficeroomColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrename queries the prename edge of a Doctorinfo.
func (c *DoctorinfoClient) QueryPrename(d *Doctorinfo) *PrenameQuery {
	query := &PrenameQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctorinfo.Table, doctorinfo.FieldID, id),
			sqlgraph.To(prename.Table, prename.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, doctorinfo.PrenameTable, doctorinfo.PrenameColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Doctorinfo.
func (c *DoctorinfoClient) QueryUser(d *Doctorinfo) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctorinfo.Table, doctorinfo.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, doctorinfo.UserTable, doctorinfo.UserColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTreatment queries the treatment edge of a Doctorinfo.
func (c *DoctorinfoClient) QueryTreatment(d *Doctorinfo) *TreatmentQuery {
	query := &TreatmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctorinfo.Table, doctorinfo.FieldID, id),
			sqlgraph.To(treatment.Table, treatment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, doctorinfo.TreatmentTable, doctorinfo.TreatmentColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DoctorinfoClient) Hooks() []Hook {
	return c.hooks.Doctorinfo
}

// EducationlevelClient is a client for the Educationlevel schema.
type EducationlevelClient struct {
	config
}

// NewEducationlevelClient returns a client for the Educationlevel from the given config.
func NewEducationlevelClient(c config) *EducationlevelClient {
	return &EducationlevelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `educationlevel.Hooks(f(g(h())))`.
func (c *EducationlevelClient) Use(hooks ...Hook) {
	c.hooks.Educationlevel = append(c.hooks.Educationlevel, hooks...)
}

// Create returns a create builder for Educationlevel.
func (c *EducationlevelClient) Create() *EducationlevelCreate {
	mutation := newEducationlevelMutation(c.config, OpCreate)
	return &EducationlevelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Educationlevel.
func (c *EducationlevelClient) Update() *EducationlevelUpdate {
	mutation := newEducationlevelMutation(c.config, OpUpdate)
	return &EducationlevelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EducationlevelClient) UpdateOne(e *Educationlevel) *EducationlevelUpdateOne {
	mutation := newEducationlevelMutation(c.config, OpUpdateOne, withEducationlevel(e))
	return &EducationlevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EducationlevelClient) UpdateOneID(id int) *EducationlevelUpdateOne {
	mutation := newEducationlevelMutation(c.config, OpUpdateOne, withEducationlevelID(id))
	return &EducationlevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Educationlevel.
func (c *EducationlevelClient) Delete() *EducationlevelDelete {
	mutation := newEducationlevelMutation(c.config, OpDelete)
	return &EducationlevelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EducationlevelClient) DeleteOne(e *Educationlevel) *EducationlevelDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EducationlevelClient) DeleteOneID(id int) *EducationlevelDeleteOne {
	builder := c.Delete().Where(educationlevel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EducationlevelDeleteOne{builder}
}

// Create returns a query builder for Educationlevel.
func (c *EducationlevelClient) Query() *EducationlevelQuery {
	return &EducationlevelQuery{config: c.config}
}

// Get returns a Educationlevel entity by its id.
func (c *EducationlevelClient) Get(ctx context.Context, id int) (*Educationlevel, error) {
	return c.Query().Where(educationlevel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EducationlevelClient) GetX(ctx context.Context, id int) *Educationlevel {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryEducationlevel2doctorinfo queries the educationlevel2doctorinfo edge of a Educationlevel.
func (c *EducationlevelClient) QueryEducationlevel2doctorinfo(e *Educationlevel) *DoctorinfoQuery {
	query := &DoctorinfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(educationlevel.Table, educationlevel.FieldID, id),
			sqlgraph.To(doctorinfo.Table, doctorinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, educationlevel.Educationlevel2doctorinfoTable, educationlevel.Educationlevel2doctorinfoColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EducationlevelClient) Hooks() []Hook {
	return c.hooks.Educationlevel
}

// FinancierClient is a client for the Financier schema.
type FinancierClient struct {
	config
}

// NewFinancierClient returns a client for the Financier from the given config.
func NewFinancierClient(c config) *FinancierClient {
	return &FinancierClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `financier.Hooks(f(g(h())))`.
func (c *FinancierClient) Use(hooks ...Hook) {
	c.hooks.Financier = append(c.hooks.Financier, hooks...)
}

// Create returns a create builder for Financier.
func (c *FinancierClient) Create() *FinancierCreate {
	mutation := newFinancierMutation(c.config, OpCreate)
	return &FinancierCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Financier.
func (c *FinancierClient) Update() *FinancierUpdate {
	mutation := newFinancierMutation(c.config, OpUpdate)
	return &FinancierUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FinancierClient) UpdateOne(f *Financier) *FinancierUpdateOne {
	mutation := newFinancierMutation(c.config, OpUpdateOne, withFinancier(f))
	return &FinancierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FinancierClient) UpdateOneID(id int) *FinancierUpdateOne {
	mutation := newFinancierMutation(c.config, OpUpdateOne, withFinancierID(id))
	return &FinancierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Financier.
func (c *FinancierClient) Delete() *FinancierDelete {
	mutation := newFinancierMutation(c.config, OpDelete)
	return &FinancierDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FinancierClient) DeleteOne(f *Financier) *FinancierDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FinancierClient) DeleteOneID(id int) *FinancierDeleteOne {
	builder := c.Delete().Where(financier.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FinancierDeleteOne{builder}
}

// Create returns a query builder for Financier.
func (c *FinancierClient) Query() *FinancierQuery {
	return &FinancierQuery{config: c.config}
}

// Get returns a Financier entity by its id.
func (c *FinancierClient) Get(ctx context.Context, id int) (*Financier, error) {
	return c.Query().Where(financier.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FinancierClient) GetX(ctx context.Context, id int) *Financier {
	f, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return f
}

// QueryBills queries the bills edge of a Financier.
func (c *FinancierClient) QueryBills(f *Financier) *BillQuery {
	query := &BillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(financier.Table, financier.FieldID, id),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, financier.BillsTable, financier.BillsColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Financier.
func (c *FinancierClient) QueryUser(f *Financier) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(financier.Table, financier.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, financier.UserTable, financier.UserColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FinancierClient) Hooks() []Hook {
	return c.hooks.Financier
}

// GenderClient is a client for the Gender schema.
type GenderClient struct {
	config
}

// NewGenderClient returns a client for the Gender from the given config.
func NewGenderClient(c config) *GenderClient {
	return &GenderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gender.Hooks(f(g(h())))`.
func (c *GenderClient) Use(hooks ...Hook) {
	c.hooks.Gender = append(c.hooks.Gender, hooks...)
}

// Create returns a create builder for Gender.
func (c *GenderClient) Create() *GenderCreate {
	mutation := newGenderMutation(c.config, OpCreate)
	return &GenderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Gender.
func (c *GenderClient) Update() *GenderUpdate {
	mutation := newGenderMutation(c.config, OpUpdate)
	return &GenderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GenderClient) UpdateOne(ge *Gender) *GenderUpdateOne {
	mutation := newGenderMutation(c.config, OpUpdateOne, withGender(ge))
	return &GenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GenderClient) UpdateOneID(id int) *GenderUpdateOne {
	mutation := newGenderMutation(c.config, OpUpdateOne, withGenderID(id))
	return &GenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Gender.
func (c *GenderClient) Delete() *GenderDelete {
	mutation := newGenderMutation(c.config, OpDelete)
	return &GenderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GenderClient) DeleteOne(ge *Gender) *GenderDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GenderClient) DeleteOneID(id int) *GenderDeleteOne {
	builder := c.Delete().Where(gender.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GenderDeleteOne{builder}
}

// Create returns a query builder for Gender.
func (c *GenderClient) Query() *GenderQuery {
	return &GenderQuery{config: c.config}
}

// Get returns a Gender entity by its id.
func (c *GenderClient) Get(ctx context.Context, id int) (*Gender, error) {
	return c.Query().Where(gender.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GenderClient) GetX(ctx context.Context, id int) *Gender {
	ge, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ge
}

// QueryPatientrecord queries the patientrecord edge of a Gender.
func (c *GenderClient) QueryPatientrecord(ge *Gender) *PatientrecordQuery {
	query := &PatientrecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gender.Table, gender.FieldID, id),
			sqlgraph.To(patientrecord.Table, patientrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gender.PatientrecordTable, gender.PatientrecordColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GenderClient) Hooks() []Hook {
	return c.hooks.Gender
}

// HistorytakingClient is a client for the Historytaking schema.
type HistorytakingClient struct {
	config
}

// NewHistorytakingClient returns a client for the Historytaking from the given config.
func NewHistorytakingClient(c config) *HistorytakingClient {
	return &HistorytakingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `historytaking.Hooks(f(g(h())))`.
func (c *HistorytakingClient) Use(hooks ...Hook) {
	c.hooks.Historytaking = append(c.hooks.Historytaking, hooks...)
}

// Create returns a create builder for Historytaking.
func (c *HistorytakingClient) Create() *HistorytakingCreate {
	mutation := newHistorytakingMutation(c.config, OpCreate)
	return &HistorytakingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Historytaking.
func (c *HistorytakingClient) Update() *HistorytakingUpdate {
	mutation := newHistorytakingMutation(c.config, OpUpdate)
	return &HistorytakingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HistorytakingClient) UpdateOne(h *Historytaking) *HistorytakingUpdateOne {
	mutation := newHistorytakingMutation(c.config, OpUpdateOne, withHistorytaking(h))
	return &HistorytakingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HistorytakingClient) UpdateOneID(id int) *HistorytakingUpdateOne {
	mutation := newHistorytakingMutation(c.config, OpUpdateOne, withHistorytakingID(id))
	return &HistorytakingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Historytaking.
func (c *HistorytakingClient) Delete() *HistorytakingDelete {
	mutation := newHistorytakingMutation(c.config, OpDelete)
	return &HistorytakingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HistorytakingClient) DeleteOne(h *Historytaking) *HistorytakingDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HistorytakingClient) DeleteOneID(id int) *HistorytakingDeleteOne {
	builder := c.Delete().Where(historytaking.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HistorytakingDeleteOne{builder}
}

// Create returns a query builder for Historytaking.
func (c *HistorytakingClient) Query() *HistorytakingQuery {
	return &HistorytakingQuery{config: c.config}
}

// Get returns a Historytaking entity by its id.
func (c *HistorytakingClient) Get(ctx context.Context, id int) (*Historytaking, error) {
	return c.Query().Where(historytaking.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HistorytakingClient) GetX(ctx context.Context, id int) *Historytaking {
	h, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return h
}

// QueryNurse queries the nurse edge of a Historytaking.
func (c *HistorytakingClient) QueryNurse(h *Historytaking) *NurseQuery {
	query := &NurseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(historytaking.Table, historytaking.FieldID, id),
			sqlgraph.To(nurse.Table, nurse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, historytaking.NurseTable, historytaking.NurseColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDepartment queries the department edge of a Historytaking.
func (c *HistorytakingClient) QueryDepartment(h *Historytaking) *DepartmentQuery {
	query := &DepartmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(historytaking.Table, historytaking.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, historytaking.DepartmentTable, historytaking.DepartmentColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySymptomseverity queries the symptomseverity edge of a Historytaking.
func (c *HistorytakingClient) QuerySymptomseverity(h *Historytaking) *SymptomseverityQuery {
	query := &SymptomseverityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(historytaking.Table, historytaking.FieldID, id),
			sqlgraph.To(symptomseverity.Table, symptomseverity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, historytaking.SymptomseverityTable, historytaking.SymptomseverityColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientrecord queries the patientrecord edge of a Historytaking.
func (c *HistorytakingClient) QueryPatientrecord(h *Historytaking) *PatientrecordQuery {
	query := &PatientrecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(historytaking.Table, historytaking.FieldID, id),
			sqlgraph.To(patientrecord.Table, patientrecord.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, historytaking.PatientrecordTable, historytaking.PatientrecordColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HistorytakingClient) Hooks() []Hook {
	return c.hooks.Historytaking
}

// InsuranceClient is a client for the Insurance schema.
type InsuranceClient struct {
	config
}

// NewInsuranceClient returns a client for the Insurance from the given config.
func NewInsuranceClient(c config) *InsuranceClient {
	return &InsuranceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `insurance.Hooks(f(g(h())))`.
func (c *InsuranceClient) Use(hooks ...Hook) {
	c.hooks.Insurance = append(c.hooks.Insurance, hooks...)
}

// Create returns a create builder for Insurance.
func (c *InsuranceClient) Create() *InsuranceCreate {
	mutation := newInsuranceMutation(c.config, OpCreate)
	return &InsuranceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Insurance.
func (c *InsuranceClient) Update() *InsuranceUpdate {
	mutation := newInsuranceMutation(c.config, OpUpdate)
	return &InsuranceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InsuranceClient) UpdateOne(i *Insurance) *InsuranceUpdateOne {
	mutation := newInsuranceMutation(c.config, OpUpdateOne, withInsurance(i))
	return &InsuranceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InsuranceClient) UpdateOneID(id int) *InsuranceUpdateOne {
	mutation := newInsuranceMutation(c.config, OpUpdateOne, withInsuranceID(id))
	return &InsuranceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Insurance.
func (c *InsuranceClient) Delete() *InsuranceDelete {
	mutation := newInsuranceMutation(c.config, OpDelete)
	return &InsuranceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InsuranceClient) DeleteOne(i *Insurance) *InsuranceDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InsuranceClient) DeleteOneID(id int) *InsuranceDeleteOne {
	builder := c.Delete().Where(insurance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InsuranceDeleteOne{builder}
}

// Create returns a query builder for Insurance.
func (c *InsuranceClient) Query() *InsuranceQuery {
	return &InsuranceQuery{config: c.config}
}

// Get returns a Insurance entity by its id.
func (c *InsuranceClient) Get(ctx context.Context, id int) (*Insurance, error) {
	return c.Query().Where(insurance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InsuranceClient) GetX(ctx context.Context, id int) *Insurance {
	i, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return i
}

// QueryInsurancePatientrights queries the InsurancePatientrights edge of a Insurance.
func (c *InsuranceClient) QueryInsurancePatientrights(i *Insurance) *PatientrightsQuery {
	query := &PatientrightsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(insurance.Table, insurance.FieldID, id),
			sqlgraph.To(patientrights.Table, patientrights.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, insurance.InsurancePatientrightsTable, insurance.InsurancePatientrightsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InsuranceClient) Hooks() []Hook {
	return c.hooks.Insurance
}

// MedicalrecordstaffClient is a client for the Medicalrecordstaff schema.
type MedicalrecordstaffClient struct {
	config
}

// NewMedicalrecordstaffClient returns a client for the Medicalrecordstaff from the given config.
func NewMedicalrecordstaffClient(c config) *MedicalrecordstaffClient {
	return &MedicalrecordstaffClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `medicalrecordstaff.Hooks(f(g(h())))`.
func (c *MedicalrecordstaffClient) Use(hooks ...Hook) {
	c.hooks.Medicalrecordstaff = append(c.hooks.Medicalrecordstaff, hooks...)
}

// Create returns a create builder for Medicalrecordstaff.
func (c *MedicalrecordstaffClient) Create() *MedicalrecordstaffCreate {
	mutation := newMedicalrecordstaffMutation(c.config, OpCreate)
	return &MedicalrecordstaffCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Medicalrecordstaff.
func (c *MedicalrecordstaffClient) Update() *MedicalrecordstaffUpdate {
	mutation := newMedicalrecordstaffMutation(c.config, OpUpdate)
	return &MedicalrecordstaffUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MedicalrecordstaffClient) UpdateOne(m *Medicalrecordstaff) *MedicalrecordstaffUpdateOne {
	mutation := newMedicalrecordstaffMutation(c.config, OpUpdateOne, withMedicalrecordstaff(m))
	return &MedicalrecordstaffUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MedicalrecordstaffClient) UpdateOneID(id int) *MedicalrecordstaffUpdateOne {
	mutation := newMedicalrecordstaffMutation(c.config, OpUpdateOne, withMedicalrecordstaffID(id))
	return &MedicalrecordstaffUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Medicalrecordstaff.
func (c *MedicalrecordstaffClient) Delete() *MedicalrecordstaffDelete {
	mutation := newMedicalrecordstaffMutation(c.config, OpDelete)
	return &MedicalrecordstaffDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MedicalrecordstaffClient) DeleteOne(m *Medicalrecordstaff) *MedicalrecordstaffDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MedicalrecordstaffClient) DeleteOneID(id int) *MedicalrecordstaffDeleteOne {
	builder := c.Delete().Where(medicalrecordstaff.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MedicalrecordstaffDeleteOne{builder}
}

// Create returns a query builder for Medicalrecordstaff.
func (c *MedicalrecordstaffClient) Query() *MedicalrecordstaffQuery {
	return &MedicalrecordstaffQuery{config: c.config}
}

// Get returns a Medicalrecordstaff entity by its id.
func (c *MedicalrecordstaffClient) Get(ctx context.Context, id int) (*Medicalrecordstaff, error) {
	return c.Query().Where(medicalrecordstaff.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MedicalrecordstaffClient) GetX(ctx context.Context, id int) *Medicalrecordstaff {
	m, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return m
}

// QueryPatientrecord queries the patientrecord edge of a Medicalrecordstaff.
func (c *MedicalrecordstaffClient) QueryPatientrecord(m *Medicalrecordstaff) *PatientrecordQuery {
	query := &PatientrecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicalrecordstaff.Table, medicalrecordstaff.FieldID, id),
			sqlgraph.To(patientrecord.Table, patientrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, medicalrecordstaff.PatientrecordTable, medicalrecordstaff.PatientrecordColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMedicalrecordstaffPatientrights queries the MedicalrecordstaffPatientrights edge of a Medicalrecordstaff.
func (c *MedicalrecordstaffClient) QueryMedicalrecordstaffPatientrights(m *Medicalrecordstaff) *PatientrightsQuery {
	query := &PatientrightsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicalrecordstaff.Table, medicalrecordstaff.FieldID, id),
			sqlgraph.To(patientrights.Table, patientrights.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, medicalrecordstaff.MedicalrecordstaffPatientrightsTable, medicalrecordstaff.MedicalrecordstaffPatientrightsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Medicalrecordstaff.
func (c *MedicalrecordstaffClient) QueryUser(m *Medicalrecordstaff) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicalrecordstaff.Table, medicalrecordstaff.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, medicalrecordstaff.UserTable, medicalrecordstaff.UserColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MedicalrecordstaffClient) Hooks() []Hook {
	return c.hooks.Medicalrecordstaff
}

// NurseClient is a client for the Nurse schema.
type NurseClient struct {
	config
}

// NewNurseClient returns a client for the Nurse from the given config.
func NewNurseClient(c config) *NurseClient {
	return &NurseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nurse.Hooks(f(g(h())))`.
func (c *NurseClient) Use(hooks ...Hook) {
	c.hooks.Nurse = append(c.hooks.Nurse, hooks...)
}

// Create returns a create builder for Nurse.
func (c *NurseClient) Create() *NurseCreate {
	mutation := newNurseMutation(c.config, OpCreate)
	return &NurseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Nurse.
func (c *NurseClient) Update() *NurseUpdate {
	mutation := newNurseMutation(c.config, OpUpdate)
	return &NurseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NurseClient) UpdateOne(n *Nurse) *NurseUpdateOne {
	mutation := newNurseMutation(c.config, OpUpdateOne, withNurse(n))
	return &NurseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NurseClient) UpdateOneID(id int) *NurseUpdateOne {
	mutation := newNurseMutation(c.config, OpUpdateOne, withNurseID(id))
	return &NurseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Nurse.
func (c *NurseClient) Delete() *NurseDelete {
	mutation := newNurseMutation(c.config, OpDelete)
	return &NurseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NurseClient) DeleteOne(n *Nurse) *NurseDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NurseClient) DeleteOneID(id int) *NurseDeleteOne {
	builder := c.Delete().Where(nurse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NurseDeleteOne{builder}
}

// Create returns a query builder for Nurse.
func (c *NurseClient) Query() *NurseQuery {
	return &NurseQuery{config: c.config}
}

// Get returns a Nurse entity by its id.
func (c *NurseClient) Get(ctx context.Context, id int) (*Nurse, error) {
	return c.Query().Where(nurse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NurseClient) GetX(ctx context.Context, id int) *Nurse {
	n, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return n
}

// QueryHistorytaking queries the historytaking edge of a Nurse.
func (c *NurseClient) QueryHistorytaking(n *Nurse) *HistorytakingQuery {
	query := &HistorytakingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nurse.Table, nurse.FieldID, id),
			sqlgraph.To(historytaking.Table, historytaking.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, nurse.HistorytakingTable, nurse.HistorytakingColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Nurse.
func (c *NurseClient) QueryUser(n *Nurse) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nurse.Table, nurse.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, nurse.UserTable, nurse.UserColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NurseClient) Hooks() []Hook {
	return c.hooks.Nurse
}

// OfficeroomClient is a client for the Officeroom schema.
type OfficeroomClient struct {
	config
}

// NewOfficeroomClient returns a client for the Officeroom from the given config.
func NewOfficeroomClient(c config) *OfficeroomClient {
	return &OfficeroomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `officeroom.Hooks(f(g(h())))`.
func (c *OfficeroomClient) Use(hooks ...Hook) {
	c.hooks.Officeroom = append(c.hooks.Officeroom, hooks...)
}

// Create returns a create builder for Officeroom.
func (c *OfficeroomClient) Create() *OfficeroomCreate {
	mutation := newOfficeroomMutation(c.config, OpCreate)
	return &OfficeroomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Officeroom.
func (c *OfficeroomClient) Update() *OfficeroomUpdate {
	mutation := newOfficeroomMutation(c.config, OpUpdate)
	return &OfficeroomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OfficeroomClient) UpdateOne(o *Officeroom) *OfficeroomUpdateOne {
	mutation := newOfficeroomMutation(c.config, OpUpdateOne, withOfficeroom(o))
	return &OfficeroomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OfficeroomClient) UpdateOneID(id int) *OfficeroomUpdateOne {
	mutation := newOfficeroomMutation(c.config, OpUpdateOne, withOfficeroomID(id))
	return &OfficeroomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Officeroom.
func (c *OfficeroomClient) Delete() *OfficeroomDelete {
	mutation := newOfficeroomMutation(c.config, OpDelete)
	return &OfficeroomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OfficeroomClient) DeleteOne(o *Officeroom) *OfficeroomDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OfficeroomClient) DeleteOneID(id int) *OfficeroomDeleteOne {
	builder := c.Delete().Where(officeroom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OfficeroomDeleteOne{builder}
}

// Create returns a query builder for Officeroom.
func (c *OfficeroomClient) Query() *OfficeroomQuery {
	return &OfficeroomQuery{config: c.config}
}

// Get returns a Officeroom entity by its id.
func (c *OfficeroomClient) Get(ctx context.Context, id int) (*Officeroom, error) {
	return c.Query().Where(officeroom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OfficeroomClient) GetX(ctx context.Context, id int) *Officeroom {
	o, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return o
}

// QueryOfficeroom2doctorinfo queries the officeroom2doctorinfo edge of a Officeroom.
func (c *OfficeroomClient) QueryOfficeroom2doctorinfo(o *Officeroom) *DoctorinfoQuery {
	query := &DoctorinfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(officeroom.Table, officeroom.FieldID, id),
			sqlgraph.To(doctorinfo.Table, doctorinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, officeroom.Officeroom2doctorinfoTable, officeroom.Officeroom2doctorinfoColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OfficeroomClient) Hooks() []Hook {
	return c.hooks.Officeroom
}

// PatientrecordClient is a client for the Patientrecord schema.
type PatientrecordClient struct {
	config
}

// NewPatientrecordClient returns a client for the Patientrecord from the given config.
func NewPatientrecordClient(c config) *PatientrecordClient {
	return &PatientrecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patientrecord.Hooks(f(g(h())))`.
func (c *PatientrecordClient) Use(hooks ...Hook) {
	c.hooks.Patientrecord = append(c.hooks.Patientrecord, hooks...)
}

// Create returns a create builder for Patientrecord.
func (c *PatientrecordClient) Create() *PatientrecordCreate {
	mutation := newPatientrecordMutation(c.config, OpCreate)
	return &PatientrecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patientrecord.
func (c *PatientrecordClient) Update() *PatientrecordUpdate {
	mutation := newPatientrecordMutation(c.config, OpUpdate)
	return &PatientrecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientrecordClient) UpdateOne(pa *Patientrecord) *PatientrecordUpdateOne {
	mutation := newPatientrecordMutation(c.config, OpUpdateOne, withPatientrecord(pa))
	return &PatientrecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientrecordClient) UpdateOneID(id int) *PatientrecordUpdateOne {
	mutation := newPatientrecordMutation(c.config, OpUpdateOne, withPatientrecordID(id))
	return &PatientrecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patientrecord.
func (c *PatientrecordClient) Delete() *PatientrecordDelete {
	mutation := newPatientrecordMutation(c.config, OpDelete)
	return &PatientrecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientrecordClient) DeleteOne(pa *Patientrecord) *PatientrecordDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientrecordClient) DeleteOneID(id int) *PatientrecordDeleteOne {
	builder := c.Delete().Where(patientrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientrecordDeleteOne{builder}
}

// Create returns a query builder for Patientrecord.
func (c *PatientrecordClient) Query() *PatientrecordQuery {
	return &PatientrecordQuery{config: c.config}
}

// Get returns a Patientrecord entity by its id.
func (c *PatientrecordClient) Get(ctx context.Context, id int) (*Patientrecord, error) {
	return c.Query().Where(patientrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientrecordClient) GetX(ctx context.Context, id int) *Patientrecord {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryGender queries the gender edge of a Patientrecord.
func (c *PatientrecordClient) QueryGender(pa *Patientrecord) *GenderQuery {
	query := &GenderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrecord.Table, patientrecord.FieldID, id),
			sqlgraph.To(gender.Table, gender.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patientrecord.GenderTable, patientrecord.GenderColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMedicalrecordstaff queries the medicalrecordstaff edge of a Patientrecord.
func (c *PatientrecordClient) QueryMedicalrecordstaff(pa *Patientrecord) *MedicalrecordstaffQuery {
	query := &MedicalrecordstaffQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrecord.Table, patientrecord.FieldID, id),
			sqlgraph.To(medicalrecordstaff.Table, medicalrecordstaff.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patientrecord.MedicalrecordstaffTable, patientrecord.MedicalrecordstaffColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrename queries the prename edge of a Patientrecord.
func (c *PatientrecordClient) QueryPrename(pa *Patientrecord) *PrenameQuery {
	query := &PrenameQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrecord.Table, patientrecord.FieldID, id),
			sqlgraph.To(prename.Table, prename.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patientrecord.PrenameTable, patientrecord.PrenameColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHistorytaking queries the historytaking edge of a Patientrecord.
func (c *PatientrecordClient) QueryHistorytaking(pa *Patientrecord) *HistorytakingQuery {
	query := &HistorytakingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrecord.Table, patientrecord.FieldID, id),
			sqlgraph.To(historytaking.Table, historytaking.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patientrecord.HistorytakingTable, patientrecord.HistorytakingColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTreatment queries the treatment edge of a Patientrecord.
func (c *PatientrecordClient) QueryTreatment(pa *Patientrecord) *TreatmentQuery {
	query := &TreatmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrecord.Table, patientrecord.FieldID, id),
			sqlgraph.To(treatment.Table, treatment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patientrecord.TreatmentTable, patientrecord.TreatmentColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientrecordPatientrights queries the PatientrecordPatientrights edge of a Patientrecord.
func (c *PatientrecordClient) QueryPatientrecordPatientrights(pa *Patientrecord) *PatientrightsQuery {
	query := &PatientrightsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrecord.Table, patientrecord.FieldID, id),
			sqlgraph.To(patientrights.Table, patientrights.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patientrecord.PatientrecordPatientrightsTable, patientrecord.PatientrecordPatientrightsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientrecordClient) Hooks() []Hook {
	return c.hooks.Patientrecord
}

// PatientrightsClient is a client for the Patientrights schema.
type PatientrightsClient struct {
	config
}

// NewPatientrightsClient returns a client for the Patientrights from the given config.
func NewPatientrightsClient(c config) *PatientrightsClient {
	return &PatientrightsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patientrights.Hooks(f(g(h())))`.
func (c *PatientrightsClient) Use(hooks ...Hook) {
	c.hooks.Patientrights = append(c.hooks.Patientrights, hooks...)
}

// Create returns a create builder for Patientrights.
func (c *PatientrightsClient) Create() *PatientrightsCreate {
	mutation := newPatientrightsMutation(c.config, OpCreate)
	return &PatientrightsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patientrights.
func (c *PatientrightsClient) Update() *PatientrightsUpdate {
	mutation := newPatientrightsMutation(c.config, OpUpdate)
	return &PatientrightsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientrightsClient) UpdateOne(pa *Patientrights) *PatientrightsUpdateOne {
	mutation := newPatientrightsMutation(c.config, OpUpdateOne, withPatientrights(pa))
	return &PatientrightsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientrightsClient) UpdateOneID(id int) *PatientrightsUpdateOne {
	mutation := newPatientrightsMutation(c.config, OpUpdateOne, withPatientrightsID(id))
	return &PatientrightsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patientrights.
func (c *PatientrightsClient) Delete() *PatientrightsDelete {
	mutation := newPatientrightsMutation(c.config, OpDelete)
	return &PatientrightsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientrightsClient) DeleteOne(pa *Patientrights) *PatientrightsDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientrightsClient) DeleteOneID(id int) *PatientrightsDeleteOne {
	builder := c.Delete().Where(patientrights.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientrightsDeleteOne{builder}
}

// Create returns a query builder for Patientrights.
func (c *PatientrightsClient) Query() *PatientrightsQuery {
	return &PatientrightsQuery{config: c.config}
}

// Get returns a Patientrights entity by its id.
func (c *PatientrightsClient) Get(ctx context.Context, id int) (*Patientrights, error) {
	return c.Query().Where(patientrights.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientrightsClient) GetX(ctx context.Context, id int) *Patientrights {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryPatientrightsPatientrightstype queries the PatientrightsPatientrightstype edge of a Patientrights.
func (c *PatientrightsClient) QueryPatientrightsPatientrightstype(pa *Patientrights) *PatientrightstypeQuery {
	query := &PatientrightstypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrights.Table, patientrights.FieldID, id),
			sqlgraph.To(patientrightstype.Table, patientrightstype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patientrights.PatientrightsPatientrightstypeTable, patientrights.PatientrightsPatientrightstypeColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientrightsInsurance queries the PatientrightsInsurance edge of a Patientrights.
func (c *PatientrightsClient) QueryPatientrightsInsurance(pa *Patientrights) *InsuranceQuery {
	query := &InsuranceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrights.Table, patientrights.FieldID, id),
			sqlgraph.To(insurance.Table, insurance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patientrights.PatientrightsInsuranceTable, patientrights.PatientrightsInsuranceColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientrightsPatientrecord queries the PatientrightsPatientrecord edge of a Patientrights.
func (c *PatientrightsClient) QueryPatientrightsPatientrecord(pa *Patientrights) *PatientrecordQuery {
	query := &PatientrecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrights.Table, patientrights.FieldID, id),
			sqlgraph.To(patientrecord.Table, patientrecord.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patientrights.PatientrightsPatientrecordTable, patientrights.PatientrightsPatientrecordColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientrightsMedicalrecordstaff queries the PatientrightsMedicalrecordstaff edge of a Patientrights.
func (c *PatientrightsClient) QueryPatientrightsMedicalrecordstaff(pa *Patientrights) *MedicalrecordstaffQuery {
	query := &MedicalrecordstaffQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrights.Table, patientrights.FieldID, id),
			sqlgraph.To(medicalrecordstaff.Table, medicalrecordstaff.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patientrights.PatientrightsMedicalrecordstaffTable, patientrights.PatientrightsMedicalrecordstaffColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientrightsClient) Hooks() []Hook {
	return c.hooks.Patientrights
}

// PatientrightstypeClient is a client for the Patientrightstype schema.
type PatientrightstypeClient struct {
	config
}

// NewPatientrightstypeClient returns a client for the Patientrightstype from the given config.
func NewPatientrightstypeClient(c config) *PatientrightstypeClient {
	return &PatientrightstypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patientrightstype.Hooks(f(g(h())))`.
func (c *PatientrightstypeClient) Use(hooks ...Hook) {
	c.hooks.Patientrightstype = append(c.hooks.Patientrightstype, hooks...)
}

// Create returns a create builder for Patientrightstype.
func (c *PatientrightstypeClient) Create() *PatientrightstypeCreate {
	mutation := newPatientrightstypeMutation(c.config, OpCreate)
	return &PatientrightstypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patientrightstype.
func (c *PatientrightstypeClient) Update() *PatientrightstypeUpdate {
	mutation := newPatientrightstypeMutation(c.config, OpUpdate)
	return &PatientrightstypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientrightstypeClient) UpdateOne(pa *Patientrightstype) *PatientrightstypeUpdateOne {
	mutation := newPatientrightstypeMutation(c.config, OpUpdateOne, withPatientrightstype(pa))
	return &PatientrightstypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientrightstypeClient) UpdateOneID(id int) *PatientrightstypeUpdateOne {
	mutation := newPatientrightstypeMutation(c.config, OpUpdateOne, withPatientrightstypeID(id))
	return &PatientrightstypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patientrightstype.
func (c *PatientrightstypeClient) Delete() *PatientrightstypeDelete {
	mutation := newPatientrightstypeMutation(c.config, OpDelete)
	return &PatientrightstypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientrightstypeClient) DeleteOne(pa *Patientrightstype) *PatientrightstypeDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientrightstypeClient) DeleteOneID(id int) *PatientrightstypeDeleteOne {
	builder := c.Delete().Where(patientrightstype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientrightstypeDeleteOne{builder}
}

// Create returns a query builder for Patientrightstype.
func (c *PatientrightstypeClient) Query() *PatientrightstypeQuery {
	return &PatientrightstypeQuery{config: c.config}
}

// Get returns a Patientrightstype entity by its id.
func (c *PatientrightstypeClient) Get(ctx context.Context, id int) (*Patientrightstype, error) {
	return c.Query().Where(patientrightstype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientrightstypeClient) GetX(ctx context.Context, id int) *Patientrightstype {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryPatientrightstypePatientrights queries the PatientrightstypePatientrights edge of a Patientrightstype.
func (c *PatientrightstypeClient) QueryPatientrightstypePatientrights(pa *Patientrightstype) *PatientrightsQuery {
	query := &PatientrightsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrightstype.Table, patientrightstype.FieldID, id),
			sqlgraph.To(patientrights.Table, patientrights.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patientrightstype.PatientrightstypePatientrightsTable, patientrightstype.PatientrightstypePatientrightsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientrightstypeAbilitypatientrights queries the PatientrightstypeAbilitypatientrights edge of a Patientrightstype.
func (c *PatientrightstypeClient) QueryPatientrightstypeAbilitypatientrights(pa *Patientrightstype) *AbilitypatientrightsQuery {
	query := &AbilitypatientrightsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientrightstype.Table, patientrightstype.FieldID, id),
			sqlgraph.To(abilitypatientrights.Table, abilitypatientrights.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patientrightstype.PatientrightstypeAbilitypatientrightsTable, patientrightstype.PatientrightstypeAbilitypatientrightsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientrightstypeClient) Hooks() []Hook {
	return c.hooks.Patientrightstype
}

// PaytypeClient is a client for the Paytype schema.
type PaytypeClient struct {
	config
}

// NewPaytypeClient returns a client for the Paytype from the given config.
func NewPaytypeClient(c config) *PaytypeClient {
	return &PaytypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paytype.Hooks(f(g(h())))`.
func (c *PaytypeClient) Use(hooks ...Hook) {
	c.hooks.Paytype = append(c.hooks.Paytype, hooks...)
}

// Create returns a create builder for Paytype.
func (c *PaytypeClient) Create() *PaytypeCreate {
	mutation := newPaytypeMutation(c.config, OpCreate)
	return &PaytypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Paytype.
func (c *PaytypeClient) Update() *PaytypeUpdate {
	mutation := newPaytypeMutation(c.config, OpUpdate)
	return &PaytypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaytypeClient) UpdateOne(pa *Paytype) *PaytypeUpdateOne {
	mutation := newPaytypeMutation(c.config, OpUpdateOne, withPaytype(pa))
	return &PaytypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaytypeClient) UpdateOneID(id int) *PaytypeUpdateOne {
	mutation := newPaytypeMutation(c.config, OpUpdateOne, withPaytypeID(id))
	return &PaytypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Paytype.
func (c *PaytypeClient) Delete() *PaytypeDelete {
	mutation := newPaytypeMutation(c.config, OpDelete)
	return &PaytypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PaytypeClient) DeleteOne(pa *Paytype) *PaytypeDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PaytypeClient) DeleteOneID(id int) *PaytypeDeleteOne {
	builder := c.Delete().Where(paytype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaytypeDeleteOne{builder}
}

// Create returns a query builder for Paytype.
func (c *PaytypeClient) Query() *PaytypeQuery {
	return &PaytypeQuery{config: c.config}
}

// Get returns a Paytype entity by its id.
func (c *PaytypeClient) Get(ctx context.Context, id int) (*Paytype, error) {
	return c.Query().Where(paytype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaytypeClient) GetX(ctx context.Context, id int) *Paytype {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryBills queries the bills edge of a Paytype.
func (c *PaytypeClient) QueryBills(pa *Paytype) *BillQuery {
	query := &BillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paytype.Table, paytype.FieldID, id),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, paytype.BillsTable, paytype.BillsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaytypeClient) Hooks() []Hook {
	return c.hooks.Paytype
}

// PrenameClient is a client for the Prename schema.
type PrenameClient struct {
	config
}

// NewPrenameClient returns a client for the Prename from the given config.
func NewPrenameClient(c config) *PrenameClient {
	return &PrenameClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prename.Hooks(f(g(h())))`.
func (c *PrenameClient) Use(hooks ...Hook) {
	c.hooks.Prename = append(c.hooks.Prename, hooks...)
}

// Create returns a create builder for Prename.
func (c *PrenameClient) Create() *PrenameCreate {
	mutation := newPrenameMutation(c.config, OpCreate)
	return &PrenameCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Prename.
func (c *PrenameClient) Update() *PrenameUpdate {
	mutation := newPrenameMutation(c.config, OpUpdate)
	return &PrenameUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrenameClient) UpdateOne(pr *Prename) *PrenameUpdateOne {
	mutation := newPrenameMutation(c.config, OpUpdateOne, withPrename(pr))
	return &PrenameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrenameClient) UpdateOneID(id int) *PrenameUpdateOne {
	mutation := newPrenameMutation(c.config, OpUpdateOne, withPrenameID(id))
	return &PrenameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Prename.
func (c *PrenameClient) Delete() *PrenameDelete {
	mutation := newPrenameMutation(c.config, OpDelete)
	return &PrenameDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PrenameClient) DeleteOne(pr *Prename) *PrenameDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PrenameClient) DeleteOneID(id int) *PrenameDeleteOne {
	builder := c.Delete().Where(prename.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrenameDeleteOne{builder}
}

// Create returns a query builder for Prename.
func (c *PrenameClient) Query() *PrenameQuery {
	return &PrenameQuery{config: c.config}
}

// Get returns a Prename entity by its id.
func (c *PrenameClient) Get(ctx context.Context, id int) (*Prename, error) {
	return c.Query().Where(prename.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrenameClient) GetX(ctx context.Context, id int) *Prename {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// QueryPrename2doctorinfo queries the prename2doctorinfo edge of a Prename.
func (c *PrenameClient) QueryPrename2doctorinfo(pr *Prename) *DoctorinfoQuery {
	query := &DoctorinfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prename.Table, prename.FieldID, id),
			sqlgraph.To(doctorinfo.Table, doctorinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, prename.Prename2doctorinfoTable, prename.Prename2doctorinfoColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientrecord queries the patientrecord edge of a Prename.
func (c *PrenameClient) QueryPatientrecord(pr *Prename) *PatientrecordQuery {
	query := &PatientrecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prename.Table, prename.FieldID, id),
			sqlgraph.To(patientrecord.Table, patientrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, prename.PatientrecordTable, prename.PatientrecordColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PrenameClient) Hooks() []Hook {
	return c.hooks.Prename
}

// SymptomseverityClient is a client for the Symptomseverity schema.
type SymptomseverityClient struct {
	config
}

// NewSymptomseverityClient returns a client for the Symptomseverity from the given config.
func NewSymptomseverityClient(c config) *SymptomseverityClient {
	return &SymptomseverityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `symptomseverity.Hooks(f(g(h())))`.
func (c *SymptomseverityClient) Use(hooks ...Hook) {
	c.hooks.Symptomseverity = append(c.hooks.Symptomseverity, hooks...)
}

// Create returns a create builder for Symptomseverity.
func (c *SymptomseverityClient) Create() *SymptomseverityCreate {
	mutation := newSymptomseverityMutation(c.config, OpCreate)
	return &SymptomseverityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Symptomseverity.
func (c *SymptomseverityClient) Update() *SymptomseverityUpdate {
	mutation := newSymptomseverityMutation(c.config, OpUpdate)
	return &SymptomseverityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SymptomseverityClient) UpdateOne(s *Symptomseverity) *SymptomseverityUpdateOne {
	mutation := newSymptomseverityMutation(c.config, OpUpdateOne, withSymptomseverity(s))
	return &SymptomseverityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SymptomseverityClient) UpdateOneID(id int) *SymptomseverityUpdateOne {
	mutation := newSymptomseverityMutation(c.config, OpUpdateOne, withSymptomseverityID(id))
	return &SymptomseverityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Symptomseverity.
func (c *SymptomseverityClient) Delete() *SymptomseverityDelete {
	mutation := newSymptomseverityMutation(c.config, OpDelete)
	return &SymptomseverityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SymptomseverityClient) DeleteOne(s *Symptomseverity) *SymptomseverityDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SymptomseverityClient) DeleteOneID(id int) *SymptomseverityDeleteOne {
	builder := c.Delete().Where(symptomseverity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SymptomseverityDeleteOne{builder}
}

// Create returns a query builder for Symptomseverity.
func (c *SymptomseverityClient) Query() *SymptomseverityQuery {
	return &SymptomseverityQuery{config: c.config}
}

// Get returns a Symptomseverity entity by its id.
func (c *SymptomseverityClient) Get(ctx context.Context, id int) (*Symptomseverity, error) {
	return c.Query().Where(symptomseverity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SymptomseverityClient) GetX(ctx context.Context, id int) *Symptomseverity {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryHistorytaking queries the historytaking edge of a Symptomseverity.
func (c *SymptomseverityClient) QueryHistorytaking(s *Symptomseverity) *HistorytakingQuery {
	query := &HistorytakingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(symptomseverity.Table, symptomseverity.FieldID, id),
			sqlgraph.To(historytaking.Table, historytaking.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, symptomseverity.HistorytakingTable, symptomseverity.HistorytakingColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SymptomseverityClient) Hooks() []Hook {
	return c.hooks.Symptomseverity
}

// TreatmentClient is a client for the Treatment schema.
type TreatmentClient struct {
	config
}

// NewTreatmentClient returns a client for the Treatment from the given config.
func NewTreatmentClient(c config) *TreatmentClient {
	return &TreatmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `treatment.Hooks(f(g(h())))`.
func (c *TreatmentClient) Use(hooks ...Hook) {
	c.hooks.Treatment = append(c.hooks.Treatment, hooks...)
}

// Create returns a create builder for Treatment.
func (c *TreatmentClient) Create() *TreatmentCreate {
	mutation := newTreatmentMutation(c.config, OpCreate)
	return &TreatmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Treatment.
func (c *TreatmentClient) Update() *TreatmentUpdate {
	mutation := newTreatmentMutation(c.config, OpUpdate)
	return &TreatmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TreatmentClient) UpdateOne(t *Treatment) *TreatmentUpdateOne {
	mutation := newTreatmentMutation(c.config, OpUpdateOne, withTreatment(t))
	return &TreatmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TreatmentClient) UpdateOneID(id int) *TreatmentUpdateOne {
	mutation := newTreatmentMutation(c.config, OpUpdateOne, withTreatmentID(id))
	return &TreatmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Treatment.
func (c *TreatmentClient) Delete() *TreatmentDelete {
	mutation := newTreatmentMutation(c.config, OpDelete)
	return &TreatmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TreatmentClient) DeleteOne(t *Treatment) *TreatmentDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TreatmentClient) DeleteOneID(id int) *TreatmentDeleteOne {
	builder := c.Delete().Where(treatment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TreatmentDeleteOne{builder}
}

// Create returns a query builder for Treatment.
func (c *TreatmentClient) Query() *TreatmentQuery {
	return &TreatmentQuery{config: c.config}
}

// Get returns a Treatment entity by its id.
func (c *TreatmentClient) Get(ctx context.Context, id int) (*Treatment, error) {
	return c.Query().Where(treatment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TreatmentClient) GetX(ctx context.Context, id int) *Treatment {
	t, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return t
}

// QueryTypetreatment queries the typetreatment edge of a Treatment.
func (c *TreatmentClient) QueryTypetreatment(t *Treatment) *TypetreatmentQuery {
	query := &TypetreatmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(treatment.Table, treatment.FieldID, id),
			sqlgraph.To(typetreatment.Table, typetreatment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, treatment.TypetreatmentTable, treatment.TypetreatmentColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientrecord queries the patientrecord edge of a Treatment.
func (c *TreatmentClient) QueryPatientrecord(t *Treatment) *PatientrecordQuery {
	query := &PatientrecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(treatment.Table, treatment.FieldID, id),
			sqlgraph.To(patientrecord.Table, patientrecord.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, treatment.PatientrecordTable, treatment.PatientrecordColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDoctorinfo queries the doctorinfo edge of a Treatment.
func (c *TreatmentClient) QueryDoctorinfo(t *Treatment) *DoctorinfoQuery {
	query := &DoctorinfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(treatment.Table, treatment.FieldID, id),
			sqlgraph.To(doctorinfo.Table, doctorinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, treatment.DoctorinfoTable, treatment.DoctorinfoColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUnpaybills queries the unpaybills edge of a Treatment.
func (c *TreatmentClient) QueryUnpaybills(t *Treatment) *UnpaybillQuery {
	query := &UnpaybillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(treatment.Table, treatment.FieldID, id),
			sqlgraph.To(unpaybill.Table, unpaybill.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, treatment.UnpaybillsTable, treatment.UnpaybillsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TreatmentClient) Hooks() []Hook {
	return c.hooks.Treatment
}

// TypetreatmentClient is a client for the Typetreatment schema.
type TypetreatmentClient struct {
	config
}

// NewTypetreatmentClient returns a client for the Typetreatment from the given config.
func NewTypetreatmentClient(c config) *TypetreatmentClient {
	return &TypetreatmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `typetreatment.Hooks(f(g(h())))`.
func (c *TypetreatmentClient) Use(hooks ...Hook) {
	c.hooks.Typetreatment = append(c.hooks.Typetreatment, hooks...)
}

// Create returns a create builder for Typetreatment.
func (c *TypetreatmentClient) Create() *TypetreatmentCreate {
	mutation := newTypetreatmentMutation(c.config, OpCreate)
	return &TypetreatmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Typetreatment.
func (c *TypetreatmentClient) Update() *TypetreatmentUpdate {
	mutation := newTypetreatmentMutation(c.config, OpUpdate)
	return &TypetreatmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TypetreatmentClient) UpdateOne(t *Typetreatment) *TypetreatmentUpdateOne {
	mutation := newTypetreatmentMutation(c.config, OpUpdateOne, withTypetreatment(t))
	return &TypetreatmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TypetreatmentClient) UpdateOneID(id int) *TypetreatmentUpdateOne {
	mutation := newTypetreatmentMutation(c.config, OpUpdateOne, withTypetreatmentID(id))
	return &TypetreatmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Typetreatment.
func (c *TypetreatmentClient) Delete() *TypetreatmentDelete {
	mutation := newTypetreatmentMutation(c.config, OpDelete)
	return &TypetreatmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TypetreatmentClient) DeleteOne(t *Typetreatment) *TypetreatmentDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TypetreatmentClient) DeleteOneID(id int) *TypetreatmentDeleteOne {
	builder := c.Delete().Where(typetreatment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TypetreatmentDeleteOne{builder}
}

// Create returns a query builder for Typetreatment.
func (c *TypetreatmentClient) Query() *TypetreatmentQuery {
	return &TypetreatmentQuery{config: c.config}
}

// Get returns a Typetreatment entity by its id.
func (c *TypetreatmentClient) Get(ctx context.Context, id int) (*Typetreatment, error) {
	return c.Query().Where(typetreatment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TypetreatmentClient) GetX(ctx context.Context, id int) *Typetreatment {
	t, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return t
}

// QueryTreatment queries the treatment edge of a Typetreatment.
func (c *TypetreatmentClient) QueryTreatment(t *Typetreatment) *TreatmentQuery {
	query := &TreatmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(typetreatment.Table, typetreatment.FieldID, id),
			sqlgraph.To(treatment.Table, treatment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, typetreatment.TreatmentTable, typetreatment.TreatmentColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TypetreatmentClient) Hooks() []Hook {
	return c.hooks.Typetreatment
}

// UnpaybillClient is a client for the Unpaybill schema.
type UnpaybillClient struct {
	config
}

// NewUnpaybillClient returns a client for the Unpaybill from the given config.
func NewUnpaybillClient(c config) *UnpaybillClient {
	return &UnpaybillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `unpaybill.Hooks(f(g(h())))`.
func (c *UnpaybillClient) Use(hooks ...Hook) {
	c.hooks.Unpaybill = append(c.hooks.Unpaybill, hooks...)
}

// Create returns a create builder for Unpaybill.
func (c *UnpaybillClient) Create() *UnpaybillCreate {
	mutation := newUnpaybillMutation(c.config, OpCreate)
	return &UnpaybillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Unpaybill.
func (c *UnpaybillClient) Update() *UnpaybillUpdate {
	mutation := newUnpaybillMutation(c.config, OpUpdate)
	return &UnpaybillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UnpaybillClient) UpdateOne(u *Unpaybill) *UnpaybillUpdateOne {
	mutation := newUnpaybillMutation(c.config, OpUpdateOne, withUnpaybill(u))
	return &UnpaybillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UnpaybillClient) UpdateOneID(id int) *UnpaybillUpdateOne {
	mutation := newUnpaybillMutation(c.config, OpUpdateOne, withUnpaybillID(id))
	return &UnpaybillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Unpaybill.
func (c *UnpaybillClient) Delete() *UnpaybillDelete {
	mutation := newUnpaybillMutation(c.config, OpDelete)
	return &UnpaybillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UnpaybillClient) DeleteOne(u *Unpaybill) *UnpaybillDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UnpaybillClient) DeleteOneID(id int) *UnpaybillDeleteOne {
	builder := c.Delete().Where(unpaybill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UnpaybillDeleteOne{builder}
}

// Create returns a query builder for Unpaybill.
func (c *UnpaybillClient) Query() *UnpaybillQuery {
	return &UnpaybillQuery{config: c.config}
}

// Get returns a Unpaybill entity by its id.
func (c *UnpaybillClient) Get(ctx context.Context, id int) (*Unpaybill, error) {
	return c.Query().Where(unpaybill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UnpaybillClient) GetX(ctx context.Context, id int) *Unpaybill {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryTreatment queries the treatment edge of a Unpaybill.
func (c *UnpaybillClient) QueryTreatment(u *Unpaybill) *TreatmentQuery {
	query := &TreatmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(unpaybill.Table, unpaybill.FieldID, id),
			sqlgraph.To(treatment.Table, treatment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, unpaybill.TreatmentTable, unpaybill.TreatmentColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBills queries the bills edge of a Unpaybill.
func (c *UnpaybillClient) QueryBills(u *Unpaybill) *BillQuery {
	query := &BillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(unpaybill.Table, unpaybill.FieldID, id),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, unpaybill.BillsTable, unpaybill.BillsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UnpaybillClient) Hooks() []Hook {
	return c.hooks.Unpaybill
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryFinancier queries the financier edge of a User.
func (c *UserClient) QueryFinancier(u *User) *FinancierQuery {
	query := &FinancierQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(financier.Table, financier.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.FinancierTable, user.FinancierColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHistorytaking queries the historytaking edge of a User.
func (c *UserClient) QueryHistorytaking(u *User) *NurseQuery {
	query := &NurseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(nurse.Table, nurse.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.HistorytakingTable, user.HistorytakingColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserPatientrights queries the UserPatientrights edge of a User.
func (c *UserClient) QueryUserPatientrights(u *User) *PatientrightsQuery {
	query := &PatientrightsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(patientrights.Table, patientrights.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.UserPatientrightsTable, user.UserPatientrightsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMedicalrecordstaff queries the medicalrecordstaff edge of a User.
func (c *UserClient) QueryMedicalrecordstaff(u *User) *MedicalrecordstaffQuery {
	query := &MedicalrecordstaffQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(medicalrecordstaff.Table, medicalrecordstaff.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.MedicalrecordstaffTable, user.MedicalrecordstaffColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser2doctorinfo queries the user2doctorinfo edge of a User.
func (c *UserClient) QueryUser2doctorinfo(u *User) *DoctorinfoQuery {
	query := &DoctorinfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(doctorinfo.Table, doctorinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.User2doctorinfoTable, user.User2doctorinfoColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
