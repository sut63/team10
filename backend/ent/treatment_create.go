// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team10/app/ent/doctor"
	"github.com/team10/app/ent/patientrecord"
	"github.com/team10/app/ent/treatment"
	"github.com/team10/app/ent/typetreatment"
	"github.com/team10/app/ent/unpaybill"
)

// TreatmentCreate is the builder for creating a Treatment entity.
type TreatmentCreate struct {
	config
	mutation *TreatmentMutation
	hooks    []Hook
}

// SetTreatment sets the Treatment field.
func (tc *TreatmentCreate) SetTreatment(s string) *TreatmentCreate {
	tc.mutation.SetTreatment(s)
	return tc
}

// SetDatetreat sets the Datetreat field.
func (tc *TreatmentCreate) SetDatetreat(t time.Time) *TreatmentCreate {
	tc.mutation.SetDatetreat(t)
	return tc
}

// SetEdgesOfTypetreatmentID sets the EdgesOfTypetreatment edge to Typetreatment by id.
func (tc *TreatmentCreate) SetEdgesOfTypetreatmentID(id int) *TreatmentCreate {
	tc.mutation.SetEdgesOfTypetreatmentID(id)
	return tc
}

// SetNillableEdgesOfTypetreatmentID sets the EdgesOfTypetreatment edge to Typetreatment by id if the given value is not nil.
func (tc *TreatmentCreate) SetNillableEdgesOfTypetreatmentID(id *int) *TreatmentCreate {
	if id != nil {
		tc = tc.SetEdgesOfTypetreatmentID(*id)
	}
	return tc
}

// SetEdgesOfTypetreatment sets the EdgesOfTypetreatment edge to Typetreatment.
func (tc *TreatmentCreate) SetEdgesOfTypetreatment(t *Typetreatment) *TreatmentCreate {
	return tc.SetEdgesOfTypetreatmentID(t.ID)
}

// SetEdgesOfPatientrecordID sets the EdgesOfPatientrecord edge to Patientrecord by id.
func (tc *TreatmentCreate) SetEdgesOfPatientrecordID(id int) *TreatmentCreate {
	tc.mutation.SetEdgesOfPatientrecordID(id)
	return tc
}

// SetNillableEdgesOfPatientrecordID sets the EdgesOfPatientrecord edge to Patientrecord by id if the given value is not nil.
func (tc *TreatmentCreate) SetNillableEdgesOfPatientrecordID(id *int) *TreatmentCreate {
	if id != nil {
		tc = tc.SetEdgesOfPatientrecordID(*id)
	}
	return tc
}

// SetEdgesOfPatientrecord sets the EdgesOfPatientrecord edge to Patientrecord.
func (tc *TreatmentCreate) SetEdgesOfPatientrecord(p *Patientrecord) *TreatmentCreate {
	return tc.SetEdgesOfPatientrecordID(p.ID)
}

// SetEdgesOfDoctorID sets the EdgesOfDoctor edge to Doctor by id.
func (tc *TreatmentCreate) SetEdgesOfDoctorID(id int) *TreatmentCreate {
	tc.mutation.SetEdgesOfDoctorID(id)
	return tc
}

// SetNillableEdgesOfDoctorID sets the EdgesOfDoctor edge to Doctor by id if the given value is not nil.
func (tc *TreatmentCreate) SetNillableEdgesOfDoctorID(id *int) *TreatmentCreate {
	if id != nil {
		tc = tc.SetEdgesOfDoctorID(*id)
	}
	return tc
}

// SetEdgesOfDoctor sets the EdgesOfDoctor edge to Doctor.
func (tc *TreatmentCreate) SetEdgesOfDoctor(d *Doctor) *TreatmentCreate {
	return tc.SetEdgesOfDoctorID(d.ID)
}

// SetEdgesOfUnpaybillsID sets the EdgesOfUnpaybills edge to Unpaybill by id.
func (tc *TreatmentCreate) SetEdgesOfUnpaybillsID(id int) *TreatmentCreate {
	tc.mutation.SetEdgesOfUnpaybillsID(id)
	return tc
}

// SetNillableEdgesOfUnpaybillsID sets the EdgesOfUnpaybills edge to Unpaybill by id if the given value is not nil.
func (tc *TreatmentCreate) SetNillableEdgesOfUnpaybillsID(id *int) *TreatmentCreate {
	if id != nil {
		tc = tc.SetEdgesOfUnpaybillsID(*id)
	}
	return tc
}

// SetEdgesOfUnpaybills sets the EdgesOfUnpaybills edge to Unpaybill.
func (tc *TreatmentCreate) SetEdgesOfUnpaybills(u *Unpaybill) *TreatmentCreate {
	return tc.SetEdgesOfUnpaybillsID(u.ID)
}

// Mutation returns the TreatmentMutation object of the builder.
func (tc *TreatmentCreate) Mutation() *TreatmentMutation {
	return tc.mutation
}

// Save creates the Treatment in the database.
func (tc *TreatmentCreate) Save(ctx context.Context) (*Treatment, error) {
	if _, ok := tc.mutation.Treatment(); !ok {
		return nil, &ValidationError{Name: "Treatment", err: errors.New("ent: missing required field \"Treatment\"")}
	}
	if v, ok := tc.mutation.Treatment(); ok {
		if err := treatment.TreatmentValidator(v); err != nil {
			return nil, &ValidationError{Name: "Treatment", err: fmt.Errorf("ent: validator failed for field \"Treatment\": %w", err)}
		}
	}
	if _, ok := tc.mutation.Datetreat(); !ok {
		return nil, &ValidationError{Name: "Datetreat", err: errors.New("ent: missing required field \"Datetreat\"")}
	}
	var (
		err  error
		node *Treatment
	)
	if len(tc.hooks) == 0 {
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TreatmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tc.mutation = mutation
			node, err = tc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TreatmentCreate) SaveX(ctx context.Context) *Treatment {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TreatmentCreate) sqlSave(ctx context.Context) (*Treatment, error) {
	t, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	t.ID = int(id)
	return t, nil
}

func (tc *TreatmentCreate) createSpec() (*Treatment, *sqlgraph.CreateSpec) {
	var (
		t     = &Treatment{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: treatment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: treatment.FieldID,
			},
		}
	)
	if value, ok := tc.mutation.Treatment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: treatment.FieldTreatment,
		})
		t.Treatment = value
	}
	if value, ok := tc.mutation.Datetreat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: treatment.FieldDatetreat,
		})
		t.Datetreat = value
	}
	if nodes := tc.mutation.EdgesOfTypetreatmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.EdgesOfTypetreatmentTable,
			Columns: []string{treatment.EdgesOfTypetreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typetreatment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.EdgesOfPatientrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.EdgesOfPatientrecordTable,
			Columns: []string{treatment.EdgesOfPatientrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.EdgesOfDoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.EdgesOfDoctorTable,
			Columns: []string{treatment.EdgesOfDoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.EdgesOfUnpaybillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   treatment.EdgesOfUnpaybillsTable,
			Columns: []string{treatment.EdgesOfUnpaybillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unpaybill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return t, _spec
}
