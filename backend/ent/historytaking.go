// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team10/app/ent/department"
	"github.com/team10/app/ent/historytaking"
	"github.com/team10/app/ent/nurse"
	"github.com/team10/app/ent/patientrecord"
	"github.com/team10/app/ent/symptomseverity"
)

// Historytaking is the model entity for the Historytaking schema.
type Historytaking struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Hight holds the value of the "hight" field.
	Hight float32 `json:"hight,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight float32 `json:"weight,omitempty"`
	// Temp holds the value of the "temp" field.
	Temp float32 `json:"temp,omitempty"`
	// Pulse holds the value of the "pulse" field.
	Pulse int `json:"pulse,omitempty"`
	// Respiration holds the value of the "respiration" field.
	Respiration int `json:"respiration,omitempty"`
	// Bp holds the value of the "bp" field.
	Bp int `json:"bp,omitempty"`
	// Oxygen holds the value of the "oxygen" field.
	Oxygen string `json:"oxygen,omitempty"`
	// Symptom holds the value of the "symptom" field.
	Symptom string `json:"symptom,omitempty"`
	// Datetime holds the value of the "datetime" field.
	Datetime time.Time `json:"datetime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HistorytakingQuery when eager-loading is set.
	Edges              HistorytakingEdges `json:"edges"`
	department_id      *int
	nurse_id           *int
	patientrecord_id   *int
	symptomseverity_id *int
}

// HistorytakingEdges holds the relations/edges for other nodes in the graph.
type HistorytakingEdges struct {
	// EdgesOfNurse holds the value of the EdgesOfNurse edge.
	EdgesOfNurse *Nurse
	// EdgesOfDepartment holds the value of the EdgesOfDepartment edge.
	EdgesOfDepartment *Department
	// EdgesOfSymptomseverity holds the value of the EdgesOfSymptomseverity edge.
	EdgesOfSymptomseverity *Symptomseverity
	// EdgesOfPatientrecord holds the value of the EdgesOfPatientrecord edge.
	EdgesOfPatientrecord *Patientrecord
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// EdgesOfNurseOrErr returns the EdgesOfNurse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HistorytakingEdges) EdgesOfNurseOrErr() (*Nurse, error) {
	if e.loadedTypes[0] {
		if e.EdgesOfNurse == nil {
			// The edge EdgesOfNurse was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: nurse.Label}
		}
		return e.EdgesOfNurse, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfNurse"}
}

// EdgesOfDepartmentOrErr returns the EdgesOfDepartment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HistorytakingEdges) EdgesOfDepartmentOrErr() (*Department, error) {
	if e.loadedTypes[1] {
		if e.EdgesOfDepartment == nil {
			// The edge EdgesOfDepartment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.EdgesOfDepartment, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfDepartment"}
}

// EdgesOfSymptomseverityOrErr returns the EdgesOfSymptomseverity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HistorytakingEdges) EdgesOfSymptomseverityOrErr() (*Symptomseverity, error) {
	if e.loadedTypes[2] {
		if e.EdgesOfSymptomseverity == nil {
			// The edge EdgesOfSymptomseverity was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: symptomseverity.Label}
		}
		return e.EdgesOfSymptomseverity, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfSymptomseverity"}
}

// EdgesOfPatientrecordOrErr returns the EdgesOfPatientrecord value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HistorytakingEdges) EdgesOfPatientrecordOrErr() (*Patientrecord, error) {
	if e.loadedTypes[3] {
		if e.EdgesOfPatientrecord == nil {
			// The edge EdgesOfPatientrecord was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patientrecord.Label}
		}
		return e.EdgesOfPatientrecord, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfPatientrecord"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Historytaking) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullFloat64{}, // hight
		&sql.NullFloat64{}, // weight
		&sql.NullFloat64{}, // temp
		&sql.NullInt64{},   // pulse
		&sql.NullInt64{},   // respiration
		&sql.NullInt64{},   // bp
		&sql.NullString{},  // oxygen
		&sql.NullString{},  // symptom
		&sql.NullTime{},    // datetime
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Historytaking) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // department_id
		&sql.NullInt64{}, // nurse_id
		&sql.NullInt64{}, // patientrecord_id
		&sql.NullInt64{}, // symptomseverity_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Historytaking fields.
func (h *Historytaking) assignValues(values ...interface{}) error {
	if m, n := len(values), len(historytaking.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	h.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field hight", values[0])
	} else if value.Valid {
		h.Hight = float32(value.Float64)
	}
	if value, ok := values[1].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field weight", values[1])
	} else if value.Valid {
		h.Weight = float32(value.Float64)
	}
	if value, ok := values[2].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field temp", values[2])
	} else if value.Valid {
		h.Temp = float32(value.Float64)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field pulse", values[3])
	} else if value.Valid {
		h.Pulse = int(value.Int64)
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field respiration", values[4])
	} else if value.Valid {
		h.Respiration = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field bp", values[5])
	} else if value.Valid {
		h.Bp = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field oxygen", values[6])
	} else if value.Valid {
		h.Oxygen = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field symptom", values[7])
	} else if value.Valid {
		h.Symptom = value.String
	}
	if value, ok := values[8].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field datetime", values[8])
	} else if value.Valid {
		h.Datetime = value.Time
	}
	values = values[9:]
	if len(values) == len(historytaking.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field department_id", value)
		} else if value.Valid {
			h.department_id = new(int)
			*h.department_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field nurse_id", value)
		} else if value.Valid {
			h.nurse_id = new(int)
			*h.nurse_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field patientrecord_id", value)
		} else if value.Valid {
			h.patientrecord_id = new(int)
			*h.patientrecord_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field symptomseverity_id", value)
		} else if value.Valid {
			h.symptomseverity_id = new(int)
			*h.symptomseverity_id = int(value.Int64)
		}
	}
	return nil
}

// QueryEdgesOfNurse queries the EdgesOfNurse edge of the Historytaking.
func (h *Historytaking) QueryEdgesOfNurse() *NurseQuery {
	return (&HistorytakingClient{config: h.config}).QueryEdgesOfNurse(h)
}

// QueryEdgesOfDepartment queries the EdgesOfDepartment edge of the Historytaking.
func (h *Historytaking) QueryEdgesOfDepartment() *DepartmentQuery {
	return (&HistorytakingClient{config: h.config}).QueryEdgesOfDepartment(h)
}

// QueryEdgesOfSymptomseverity queries the EdgesOfSymptomseverity edge of the Historytaking.
func (h *Historytaking) QueryEdgesOfSymptomseverity() *SymptomseverityQuery {
	return (&HistorytakingClient{config: h.config}).QueryEdgesOfSymptomseverity(h)
}

// QueryEdgesOfPatientrecord queries the EdgesOfPatientrecord edge of the Historytaking.
func (h *Historytaking) QueryEdgesOfPatientrecord() *PatientrecordQuery {
	return (&HistorytakingClient{config: h.config}).QueryEdgesOfPatientrecord(h)
}

// Update returns a builder for updating this Historytaking.
// Note that, you need to call Historytaking.Unwrap() before calling this method, if this Historytaking
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Historytaking) Update() *HistorytakingUpdateOne {
	return (&HistorytakingClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (h *Historytaking) Unwrap() *Historytaking {
	tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Historytaking is not a transactional entity")
	}
	h.config.driver = tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Historytaking) String() string {
	var builder strings.Builder
	builder.WriteString("Historytaking(")
	builder.WriteString(fmt.Sprintf("id=%v", h.ID))
	builder.WriteString(", hight=")
	builder.WriteString(fmt.Sprintf("%v", h.Hight))
	builder.WriteString(", weight=")
	builder.WriteString(fmt.Sprintf("%v", h.Weight))
	builder.WriteString(", temp=")
	builder.WriteString(fmt.Sprintf("%v", h.Temp))
	builder.WriteString(", pulse=")
	builder.WriteString(fmt.Sprintf("%v", h.Pulse))
	builder.WriteString(", respiration=")
	builder.WriteString(fmt.Sprintf("%v", h.Respiration))
	builder.WriteString(", bp=")
	builder.WriteString(fmt.Sprintf("%v", h.Bp))
	builder.WriteString(", oxygen=")
	builder.WriteString(h.Oxygen)
	builder.WriteString(", symptom=")
	builder.WriteString(h.Symptom)
	builder.WriteString(", datetime=")
	builder.WriteString(h.Datetime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Historytakings is a parsable slice of Historytaking.
type Historytakings []*Historytaking

func (h Historytakings) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
