// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team10/app/ent/doctor"
	"github.com/team10/app/ent/financier"
	"github.com/team10/app/ent/medicalrecordstaff"
	"github.com/team10/app/ent/nurse"
	"github.com/team10/app/ent/patientrights"
	"github.com/team10/app/ent/registrar"
	"github.com/team10/app/ent/user"
	"github.com/team10/app/ent/userstatus"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Images holds the value of the "images" field.
	Images string `json:"images,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges         UserEdges `json:"edges"`
	user_id       *int
	userstatus_id *int
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// EdgesOfFinancier holds the value of the EdgesOfFinancier edge.
	EdgesOfFinancier *Financier
	// EdgesOfNurse holds the value of the EdgesOfNurse edge.
	EdgesOfNurse *Nurse
	// EdgesOfUserPatientrights holds the value of the EdgesOfUserPatientrights edge.
	EdgesOfUserPatientrights *Patientrights
	// EdgesOfMedicalrecordstaff holds the value of the EdgesOfMedicalrecordstaff edge.
	EdgesOfMedicalrecordstaff *Medicalrecordstaff
	// EdgesOfUser2registrar holds the value of the EdgesOfUser2registrar edge.
	EdgesOfUser2registrar *Registrar
	// EdgesOfDoctor holds the value of the EdgesOfDoctor edge.
	EdgesOfDoctor *Doctor
	// EdgesOfUserstatus holds the value of the EdgesOfUserstatus edge.
	EdgesOfUserstatus *Userstatus
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// EdgesOfFinancierOrErr returns the EdgesOfFinancier value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) EdgesOfFinancierOrErr() (*Financier, error) {
	if e.loadedTypes[0] {
		if e.EdgesOfFinancier == nil {
			// The edge EdgesOfFinancier was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: financier.Label}
		}
		return e.EdgesOfFinancier, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfFinancier"}
}

// EdgesOfNurseOrErr returns the EdgesOfNurse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) EdgesOfNurseOrErr() (*Nurse, error) {
	if e.loadedTypes[1] {
		if e.EdgesOfNurse == nil {
			// The edge EdgesOfNurse was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: nurse.Label}
		}
		return e.EdgesOfNurse, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfNurse"}
}

// EdgesOfUserPatientrightsOrErr returns the EdgesOfUserPatientrights value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) EdgesOfUserPatientrightsOrErr() (*Patientrights, error) {
	if e.loadedTypes[2] {
		if e.EdgesOfUserPatientrights == nil {
			// The edge EdgesOfUserPatientrights was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patientrights.Label}
		}
		return e.EdgesOfUserPatientrights, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfUserPatientrights"}
}

// EdgesOfMedicalrecordstaffOrErr returns the EdgesOfMedicalrecordstaff value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) EdgesOfMedicalrecordstaffOrErr() (*Medicalrecordstaff, error) {
	if e.loadedTypes[3] {
		if e.EdgesOfMedicalrecordstaff == nil {
			// The edge EdgesOfMedicalrecordstaff was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: medicalrecordstaff.Label}
		}
		return e.EdgesOfMedicalrecordstaff, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfMedicalrecordstaff"}
}

// EdgesOfUser2registrarOrErr returns the EdgesOfUser2registrar value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) EdgesOfUser2registrarOrErr() (*Registrar, error) {
	if e.loadedTypes[4] {
		if e.EdgesOfUser2registrar == nil {
			// The edge EdgesOfUser2registrar was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: registrar.Label}
		}
		return e.EdgesOfUser2registrar, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfUser2registrar"}
}

// EdgesOfDoctorOrErr returns the EdgesOfDoctor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) EdgesOfDoctorOrErr() (*Doctor, error) {
	if e.loadedTypes[5] {
		if e.EdgesOfDoctor == nil {
			// The edge EdgesOfDoctor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: doctor.Label}
		}
		return e.EdgesOfDoctor, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfDoctor"}
}

// EdgesOfUserstatusOrErr returns the EdgesOfUserstatus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) EdgesOfUserstatusOrErr() (*Userstatus, error) {
	if e.loadedTypes[6] {
		if e.EdgesOfUserstatus == nil {
			// The edge EdgesOfUserstatus was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: userstatus.Label}
		}
		return e.EdgesOfUserstatus, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfUserstatus"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // email
		&sql.NullString{}, // password
		&sql.NullString{}, // images
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*User) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_id
		&sql.NullInt64{}, // userstatus_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(values ...interface{}) error {
	if m, n := len(values), len(user.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	u.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field email", values[0])
	} else if value.Valid {
		u.Email = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field password", values[1])
	} else if value.Valid {
		u.Password = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field images", values[2])
	} else if value.Valid {
		u.Images = value.String
	}
	values = values[3:]
	if len(values) == len(user.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_id", value)
		} else if value.Valid {
			u.user_id = new(int)
			*u.user_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field userstatus_id", value)
		} else if value.Valid {
			u.userstatus_id = new(int)
			*u.userstatus_id = int(value.Int64)
		}
	}
	return nil
}

// QueryEdgesOfFinancier queries the EdgesOfFinancier edge of the User.
func (u *User) QueryEdgesOfFinancier() *FinancierQuery {
	return (&UserClient{config: u.config}).QueryEdgesOfFinancier(u)
}

// QueryEdgesOfNurse queries the EdgesOfNurse edge of the User.
func (u *User) QueryEdgesOfNurse() *NurseQuery {
	return (&UserClient{config: u.config}).QueryEdgesOfNurse(u)
}

// QueryEdgesOfUserPatientrights queries the EdgesOfUserPatientrights edge of the User.
func (u *User) QueryEdgesOfUserPatientrights() *PatientrightsQuery {
	return (&UserClient{config: u.config}).QueryEdgesOfUserPatientrights(u)
}

// QueryEdgesOfMedicalrecordstaff queries the EdgesOfMedicalrecordstaff edge of the User.
func (u *User) QueryEdgesOfMedicalrecordstaff() *MedicalrecordstaffQuery {
	return (&UserClient{config: u.config}).QueryEdgesOfMedicalrecordstaff(u)
}

// QueryEdgesOfUser2registrar queries the EdgesOfUser2registrar edge of the User.
func (u *User) QueryEdgesOfUser2registrar() *RegistrarQuery {
	return (&UserClient{config: u.config}).QueryEdgesOfUser2registrar(u)
}

// QueryEdgesOfDoctor queries the EdgesOfDoctor edge of the User.
func (u *User) QueryEdgesOfDoctor() *DoctorQuery {
	return (&UserClient{config: u.config}).QueryEdgesOfDoctor(u)
}

// QueryEdgesOfUserstatus queries the EdgesOfUserstatus edge of the User.
func (u *User) QueryEdgesOfUserstatus() *UserstatusQuery {
	return (&UserClient{config: u.config}).QueryEdgesOfUserstatus(u)
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", password=")
	builder.WriteString(u.Password)
	builder.WriteString(", images=")
	builder.WriteString(u.Images)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
