// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team10/app/ent/historytaking"
	"github.com/team10/app/ent/nurse"
	"github.com/team10/app/ent/user"
)

// NurseCreate is the builder for creating a Nurse entity.
type NurseCreate struct {
	config
	mutation *NurseMutation
	hooks    []Hook
}

// SetName sets the name field.
func (nc *NurseCreate) SetName(s string) *NurseCreate {
	nc.mutation.SetName(s)
	return nc
}

// SetNursinglicense sets the nursinglicense field.
func (nc *NurseCreate) SetNursinglicense(s string) *NurseCreate {
	nc.mutation.SetNursinglicense(s)
	return nc
}

// SetPosition sets the position field.
func (nc *NurseCreate) SetPosition(s string) *NurseCreate {
	nc.mutation.SetPosition(s)
	return nc
}

// AddHistorytakingIDs adds the historytaking edge to Historytaking by ids.
func (nc *NurseCreate) AddHistorytakingIDs(ids ...int) *NurseCreate {
	nc.mutation.AddHistorytakingIDs(ids...)
	return nc
}

// AddHistorytaking adds the historytaking edges to Historytaking.
func (nc *NurseCreate) AddHistorytaking(h ...*Historytaking) *NurseCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return nc.AddHistorytakingIDs(ids...)
}

// SetUserID sets the user edge to User by id.
func (nc *NurseCreate) SetUserID(id int) *NurseCreate {
	nc.mutation.SetUserID(id)
	return nc
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (nc *NurseCreate) SetNillableUserID(id *int) *NurseCreate {
	if id != nil {
		nc = nc.SetUserID(*id)
	}
	return nc
}

// SetUser sets the user edge to User.
func (nc *NurseCreate) SetUser(u *User) *NurseCreate {
	return nc.SetUserID(u.ID)
}

// Mutation returns the NurseMutation object of the builder.
func (nc *NurseCreate) Mutation() *NurseMutation {
	return nc.mutation
}

// Save creates the Nurse in the database.
func (nc *NurseCreate) Save(ctx context.Context) (*Nurse, error) {
	if _, ok := nc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := nc.mutation.Nursinglicense(); !ok {
		return nil, &ValidationError{Name: "nursinglicense", err: errors.New("ent: missing required field \"nursinglicense\"")}
	}
	if _, ok := nc.mutation.Position(); !ok {
		return nil, &ValidationError{Name: "position", err: errors.New("ent: missing required field \"position\"")}
	}
	var (
		err  error
		node *Nurse
	)
	if len(nc.hooks) == 0 {
		node, err = nc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NurseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nc.mutation = mutation
			node, err = nc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nc.hooks) - 1; i >= 0; i-- {
			mut = nc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NurseCreate) SaveX(ctx context.Context) *Nurse {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (nc *NurseCreate) sqlSave(ctx context.Context) (*Nurse, error) {
	n, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	n.ID = int(id)
	return n, nil
}

func (nc *NurseCreate) createSpec() (*Nurse, *sqlgraph.CreateSpec) {
	var (
		n     = &Nurse{config: nc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: nurse.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nurse.FieldID,
			},
		}
	)
	if value, ok := nc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nurse.FieldName,
		})
		n.Name = value
	}
	if value, ok := nc.mutation.Nursinglicense(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nurse.FieldNursinglicense,
		})
		n.Nursinglicense = value
	}
	if value, ok := nc.mutation.Position(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nurse.FieldPosition,
		})
		n.Position = value
	}
	if nodes := nc.mutation.HistorytakingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nurse.HistorytakingTable,
			Columns: []string{nurse.HistorytakingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: historytaking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   nurse.UserTable,
			Columns: []string{nurse.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return n, _spec
}
