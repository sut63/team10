// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team10/app/ent/abilitypatientrights"
	"github.com/team10/app/ent/insurance"
	"github.com/team10/app/ent/medicalrecordstaff"
	"github.com/team10/app/ent/patientrecord"
	"github.com/team10/app/ent/patientrights"
	"github.com/team10/app/ent/predicate"
)

// PatientrightsUpdate is the builder for updating Patientrights entities.
type PatientrightsUpdate struct {
	config
	hooks      []Hook
	mutation   *PatientrightsMutation
	predicates []predicate.Patientrights
}

// Where adds a new predicate for the builder.
func (pu *PatientrightsUpdate) Where(ps ...predicate.Patientrights) *PatientrightsUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetPermissionDate sets the PermissionDate field.
func (pu *PatientrightsUpdate) SetPermissionDate(t time.Time) *PatientrightsUpdate {
	pu.mutation.SetPermissionDate(t)
	return pu
}

// SetPermission sets the Permission field.
func (pu *PatientrightsUpdate) SetPermission(s string) *PatientrightsUpdate {
	pu.mutation.SetPermission(s)
	return pu
}

// SetPermissionArea sets the PermissionArea field.
func (pu *PatientrightsUpdate) SetPermissionArea(s string) *PatientrightsUpdate {
	pu.mutation.SetPermissionArea(s)
	return pu
}

// SetResponsible sets the Responsible field.
func (pu *PatientrightsUpdate) SetResponsible(s string) *PatientrightsUpdate {
	pu.mutation.SetResponsible(s)
	return pu
}

// SetEdgesOfPatientrightsAbilitypatientrightsID sets the EdgesOfPatientrightsAbilitypatientrights edge to Abilitypatientrights by id.
func (pu *PatientrightsUpdate) SetEdgesOfPatientrightsAbilitypatientrightsID(id int) *PatientrightsUpdate {
	pu.mutation.SetEdgesOfPatientrightsAbilitypatientrightsID(id)
	return pu
}

// SetNillableEdgesOfPatientrightsAbilitypatientrightsID sets the EdgesOfPatientrightsAbilitypatientrights edge to Abilitypatientrights by id if the given value is not nil.
func (pu *PatientrightsUpdate) SetNillableEdgesOfPatientrightsAbilitypatientrightsID(id *int) *PatientrightsUpdate {
	if id != nil {
		pu = pu.SetEdgesOfPatientrightsAbilitypatientrightsID(*id)
	}
	return pu
}

// SetEdgesOfPatientrightsAbilitypatientrights sets the EdgesOfPatientrightsAbilitypatientrights edge to Abilitypatientrights.
func (pu *PatientrightsUpdate) SetEdgesOfPatientrightsAbilitypatientrights(a *Abilitypatientrights) *PatientrightsUpdate {
	return pu.SetEdgesOfPatientrightsAbilitypatientrightsID(a.ID)
}

// SetEdgesOfPatientrightsInsuranceID sets the EdgesOfPatientrightsInsurance edge to Insurance by id.
func (pu *PatientrightsUpdate) SetEdgesOfPatientrightsInsuranceID(id int) *PatientrightsUpdate {
	pu.mutation.SetEdgesOfPatientrightsInsuranceID(id)
	return pu
}

// SetNillableEdgesOfPatientrightsInsuranceID sets the EdgesOfPatientrightsInsurance edge to Insurance by id if the given value is not nil.
func (pu *PatientrightsUpdate) SetNillableEdgesOfPatientrightsInsuranceID(id *int) *PatientrightsUpdate {
	if id != nil {
		pu = pu.SetEdgesOfPatientrightsInsuranceID(*id)
	}
	return pu
}

// SetEdgesOfPatientrightsInsurance sets the EdgesOfPatientrightsInsurance edge to Insurance.
func (pu *PatientrightsUpdate) SetEdgesOfPatientrightsInsurance(i *Insurance) *PatientrightsUpdate {
	return pu.SetEdgesOfPatientrightsInsuranceID(i.ID)
}

// SetEdgesOfPatientrightsPatientrecordID sets the EdgesOfPatientrightsPatientrecord edge to Patientrecord by id.
func (pu *PatientrightsUpdate) SetEdgesOfPatientrightsPatientrecordID(id int) *PatientrightsUpdate {
	pu.mutation.SetEdgesOfPatientrightsPatientrecordID(id)
	return pu
}

// SetNillableEdgesOfPatientrightsPatientrecordID sets the EdgesOfPatientrightsPatientrecord edge to Patientrecord by id if the given value is not nil.
func (pu *PatientrightsUpdate) SetNillableEdgesOfPatientrightsPatientrecordID(id *int) *PatientrightsUpdate {
	if id != nil {
		pu = pu.SetEdgesOfPatientrightsPatientrecordID(*id)
	}
	return pu
}

// SetEdgesOfPatientrightsPatientrecord sets the EdgesOfPatientrightsPatientrecord edge to Patientrecord.
func (pu *PatientrightsUpdate) SetEdgesOfPatientrightsPatientrecord(p *Patientrecord) *PatientrightsUpdate {
	return pu.SetEdgesOfPatientrightsPatientrecordID(p.ID)
}

// SetEdgesOfPatientrightsMedicalrecordstaffID sets the EdgesOfPatientrightsMedicalrecordstaff edge to Medicalrecordstaff by id.
func (pu *PatientrightsUpdate) SetEdgesOfPatientrightsMedicalrecordstaffID(id int) *PatientrightsUpdate {
	pu.mutation.SetEdgesOfPatientrightsMedicalrecordstaffID(id)
	return pu
}

// SetNillableEdgesOfPatientrightsMedicalrecordstaffID sets the EdgesOfPatientrightsMedicalrecordstaff edge to Medicalrecordstaff by id if the given value is not nil.
func (pu *PatientrightsUpdate) SetNillableEdgesOfPatientrightsMedicalrecordstaffID(id *int) *PatientrightsUpdate {
	if id != nil {
		pu = pu.SetEdgesOfPatientrightsMedicalrecordstaffID(*id)
	}
	return pu
}

// SetEdgesOfPatientrightsMedicalrecordstaff sets the EdgesOfPatientrightsMedicalrecordstaff edge to Medicalrecordstaff.
func (pu *PatientrightsUpdate) SetEdgesOfPatientrightsMedicalrecordstaff(m *Medicalrecordstaff) *PatientrightsUpdate {
	return pu.SetEdgesOfPatientrightsMedicalrecordstaffID(m.ID)
}

// Mutation returns the PatientrightsMutation object of the builder.
func (pu *PatientrightsUpdate) Mutation() *PatientrightsMutation {
	return pu.mutation
}

// ClearEdgesOfPatientrightsAbilitypatientrights clears the EdgesOfPatientrightsAbilitypatientrights edge to Abilitypatientrights.
func (pu *PatientrightsUpdate) ClearEdgesOfPatientrightsAbilitypatientrights() *PatientrightsUpdate {
	pu.mutation.ClearEdgesOfPatientrightsAbilitypatientrights()
	return pu
}

// ClearEdgesOfPatientrightsInsurance clears the EdgesOfPatientrightsInsurance edge to Insurance.
func (pu *PatientrightsUpdate) ClearEdgesOfPatientrightsInsurance() *PatientrightsUpdate {
	pu.mutation.ClearEdgesOfPatientrightsInsurance()
	return pu
}

// ClearEdgesOfPatientrightsPatientrecord clears the EdgesOfPatientrightsPatientrecord edge to Patientrecord.
func (pu *PatientrightsUpdate) ClearEdgesOfPatientrightsPatientrecord() *PatientrightsUpdate {
	pu.mutation.ClearEdgesOfPatientrightsPatientrecord()
	return pu
}

// ClearEdgesOfPatientrightsMedicalrecordstaff clears the EdgesOfPatientrightsMedicalrecordstaff edge to Medicalrecordstaff.
func (pu *PatientrightsUpdate) ClearEdgesOfPatientrightsMedicalrecordstaff() *PatientrightsUpdate {
	pu.mutation.ClearEdgesOfPatientrightsMedicalrecordstaff()
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PatientrightsUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := pu.mutation.Permission(); ok {
		if err := patientrights.PermissionValidator(v); err != nil {
			return 0, &ValidationError{Name: "Permission", err: fmt.Errorf("ent: validator failed for field \"Permission\": %w", err)}
		}
	}
	if v, ok := pu.mutation.PermissionArea(); ok {
		if err := patientrights.PermissionAreaValidator(v); err != nil {
			return 0, &ValidationError{Name: "PermissionArea", err: fmt.Errorf("ent: validator failed for field \"PermissionArea\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Responsible(); ok {
		if err := patientrights.ResponsibleValidator(v); err != nil {
			return 0, &ValidationError{Name: "Responsible", err: fmt.Errorf("ent: validator failed for field \"Responsible\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientrightsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PatientrightsUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PatientrightsUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PatientrightsUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PatientrightsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   patientrights.Table,
			Columns: patientrights.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patientrights.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PermissionDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: patientrights.FieldPermissionDate,
		})
	}
	if value, ok := pu.mutation.Permission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrights.FieldPermission,
		})
	}
	if value, ok := pu.mutation.PermissionArea(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrights.FieldPermissionArea,
		})
	}
	if value, ok := pu.mutation.Responsible(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrights.FieldResponsible,
		})
	}
	if pu.mutation.EdgesOfPatientrightsAbilitypatientrightsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.EdgesOfPatientrightsAbilitypatientrightsTable,
			Columns: []string{patientrights.EdgesOfPatientrightsAbilitypatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilitypatientrights.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EdgesOfPatientrightsAbilitypatientrightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.EdgesOfPatientrightsAbilitypatientrightsTable,
			Columns: []string{patientrights.EdgesOfPatientrightsAbilitypatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilitypatientrights.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EdgesOfPatientrightsInsuranceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.EdgesOfPatientrightsInsuranceTable,
			Columns: []string{patientrights.EdgesOfPatientrightsInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EdgesOfPatientrightsInsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.EdgesOfPatientrightsInsuranceTable,
			Columns: []string{patientrights.EdgesOfPatientrightsInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EdgesOfPatientrightsPatientrecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.EdgesOfPatientrightsPatientrecordTable,
			Columns: []string{patientrights.EdgesOfPatientrightsPatientrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EdgesOfPatientrightsPatientrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.EdgesOfPatientrightsPatientrecordTable,
			Columns: []string{patientrights.EdgesOfPatientrightsPatientrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EdgesOfPatientrightsMedicalrecordstaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.EdgesOfPatientrightsMedicalrecordstaffTable,
			Columns: []string{patientrights.EdgesOfPatientrightsMedicalrecordstaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalrecordstaff.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EdgesOfPatientrightsMedicalrecordstaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.EdgesOfPatientrightsMedicalrecordstaffTable,
			Columns: []string{patientrights.EdgesOfPatientrightsMedicalrecordstaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalrecordstaff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patientrights.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PatientrightsUpdateOne is the builder for updating a single Patientrights entity.
type PatientrightsUpdateOne struct {
	config
	hooks    []Hook
	mutation *PatientrightsMutation
}

// SetPermissionDate sets the PermissionDate field.
func (puo *PatientrightsUpdateOne) SetPermissionDate(t time.Time) *PatientrightsUpdateOne {
	puo.mutation.SetPermissionDate(t)
	return puo
}

// SetPermission sets the Permission field.
func (puo *PatientrightsUpdateOne) SetPermission(s string) *PatientrightsUpdateOne {
	puo.mutation.SetPermission(s)
	return puo
}

// SetPermissionArea sets the PermissionArea field.
func (puo *PatientrightsUpdateOne) SetPermissionArea(s string) *PatientrightsUpdateOne {
	puo.mutation.SetPermissionArea(s)
	return puo
}

// SetResponsible sets the Responsible field.
func (puo *PatientrightsUpdateOne) SetResponsible(s string) *PatientrightsUpdateOne {
	puo.mutation.SetResponsible(s)
	return puo
}

// SetEdgesOfPatientrightsAbilitypatientrightsID sets the EdgesOfPatientrightsAbilitypatientrights edge to Abilitypatientrights by id.
func (puo *PatientrightsUpdateOne) SetEdgesOfPatientrightsAbilitypatientrightsID(id int) *PatientrightsUpdateOne {
	puo.mutation.SetEdgesOfPatientrightsAbilitypatientrightsID(id)
	return puo
}

// SetNillableEdgesOfPatientrightsAbilitypatientrightsID sets the EdgesOfPatientrightsAbilitypatientrights edge to Abilitypatientrights by id if the given value is not nil.
func (puo *PatientrightsUpdateOne) SetNillableEdgesOfPatientrightsAbilitypatientrightsID(id *int) *PatientrightsUpdateOne {
	if id != nil {
		puo = puo.SetEdgesOfPatientrightsAbilitypatientrightsID(*id)
	}
	return puo
}

// SetEdgesOfPatientrightsAbilitypatientrights sets the EdgesOfPatientrightsAbilitypatientrights edge to Abilitypatientrights.
func (puo *PatientrightsUpdateOne) SetEdgesOfPatientrightsAbilitypatientrights(a *Abilitypatientrights) *PatientrightsUpdateOne {
	return puo.SetEdgesOfPatientrightsAbilitypatientrightsID(a.ID)
}

// SetEdgesOfPatientrightsInsuranceID sets the EdgesOfPatientrightsInsurance edge to Insurance by id.
func (puo *PatientrightsUpdateOne) SetEdgesOfPatientrightsInsuranceID(id int) *PatientrightsUpdateOne {
	puo.mutation.SetEdgesOfPatientrightsInsuranceID(id)
	return puo
}

// SetNillableEdgesOfPatientrightsInsuranceID sets the EdgesOfPatientrightsInsurance edge to Insurance by id if the given value is not nil.
func (puo *PatientrightsUpdateOne) SetNillableEdgesOfPatientrightsInsuranceID(id *int) *PatientrightsUpdateOne {
	if id != nil {
		puo = puo.SetEdgesOfPatientrightsInsuranceID(*id)
	}
	return puo
}

// SetEdgesOfPatientrightsInsurance sets the EdgesOfPatientrightsInsurance edge to Insurance.
func (puo *PatientrightsUpdateOne) SetEdgesOfPatientrightsInsurance(i *Insurance) *PatientrightsUpdateOne {
	return puo.SetEdgesOfPatientrightsInsuranceID(i.ID)
}

// SetEdgesOfPatientrightsPatientrecordID sets the EdgesOfPatientrightsPatientrecord edge to Patientrecord by id.
func (puo *PatientrightsUpdateOne) SetEdgesOfPatientrightsPatientrecordID(id int) *PatientrightsUpdateOne {
	puo.mutation.SetEdgesOfPatientrightsPatientrecordID(id)
	return puo
}

// SetNillableEdgesOfPatientrightsPatientrecordID sets the EdgesOfPatientrightsPatientrecord edge to Patientrecord by id if the given value is not nil.
func (puo *PatientrightsUpdateOne) SetNillableEdgesOfPatientrightsPatientrecordID(id *int) *PatientrightsUpdateOne {
	if id != nil {
		puo = puo.SetEdgesOfPatientrightsPatientrecordID(*id)
	}
	return puo
}

// SetEdgesOfPatientrightsPatientrecord sets the EdgesOfPatientrightsPatientrecord edge to Patientrecord.
func (puo *PatientrightsUpdateOne) SetEdgesOfPatientrightsPatientrecord(p *Patientrecord) *PatientrightsUpdateOne {
	return puo.SetEdgesOfPatientrightsPatientrecordID(p.ID)
}

// SetEdgesOfPatientrightsMedicalrecordstaffID sets the EdgesOfPatientrightsMedicalrecordstaff edge to Medicalrecordstaff by id.
func (puo *PatientrightsUpdateOne) SetEdgesOfPatientrightsMedicalrecordstaffID(id int) *PatientrightsUpdateOne {
	puo.mutation.SetEdgesOfPatientrightsMedicalrecordstaffID(id)
	return puo
}

// SetNillableEdgesOfPatientrightsMedicalrecordstaffID sets the EdgesOfPatientrightsMedicalrecordstaff edge to Medicalrecordstaff by id if the given value is not nil.
func (puo *PatientrightsUpdateOne) SetNillableEdgesOfPatientrightsMedicalrecordstaffID(id *int) *PatientrightsUpdateOne {
	if id != nil {
		puo = puo.SetEdgesOfPatientrightsMedicalrecordstaffID(*id)
	}
	return puo
}

// SetEdgesOfPatientrightsMedicalrecordstaff sets the EdgesOfPatientrightsMedicalrecordstaff edge to Medicalrecordstaff.
func (puo *PatientrightsUpdateOne) SetEdgesOfPatientrightsMedicalrecordstaff(m *Medicalrecordstaff) *PatientrightsUpdateOne {
	return puo.SetEdgesOfPatientrightsMedicalrecordstaffID(m.ID)
}

// Mutation returns the PatientrightsMutation object of the builder.
func (puo *PatientrightsUpdateOne) Mutation() *PatientrightsMutation {
	return puo.mutation
}

// ClearEdgesOfPatientrightsAbilitypatientrights clears the EdgesOfPatientrightsAbilitypatientrights edge to Abilitypatientrights.
func (puo *PatientrightsUpdateOne) ClearEdgesOfPatientrightsAbilitypatientrights() *PatientrightsUpdateOne {
	puo.mutation.ClearEdgesOfPatientrightsAbilitypatientrights()
	return puo
}

// ClearEdgesOfPatientrightsInsurance clears the EdgesOfPatientrightsInsurance edge to Insurance.
func (puo *PatientrightsUpdateOne) ClearEdgesOfPatientrightsInsurance() *PatientrightsUpdateOne {
	puo.mutation.ClearEdgesOfPatientrightsInsurance()
	return puo
}

// ClearEdgesOfPatientrightsPatientrecord clears the EdgesOfPatientrightsPatientrecord edge to Patientrecord.
func (puo *PatientrightsUpdateOne) ClearEdgesOfPatientrightsPatientrecord() *PatientrightsUpdateOne {
	puo.mutation.ClearEdgesOfPatientrightsPatientrecord()
	return puo
}

// ClearEdgesOfPatientrightsMedicalrecordstaff clears the EdgesOfPatientrightsMedicalrecordstaff edge to Medicalrecordstaff.
func (puo *PatientrightsUpdateOne) ClearEdgesOfPatientrightsMedicalrecordstaff() *PatientrightsUpdateOne {
	puo.mutation.ClearEdgesOfPatientrightsMedicalrecordstaff()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PatientrightsUpdateOne) Save(ctx context.Context) (*Patientrights, error) {
	if v, ok := puo.mutation.Permission(); ok {
		if err := patientrights.PermissionValidator(v); err != nil {
			return nil, &ValidationError{Name: "Permission", err: fmt.Errorf("ent: validator failed for field \"Permission\": %w", err)}
		}
	}
	if v, ok := puo.mutation.PermissionArea(); ok {
		if err := patientrights.PermissionAreaValidator(v); err != nil {
			return nil, &ValidationError{Name: "PermissionArea", err: fmt.Errorf("ent: validator failed for field \"PermissionArea\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Responsible(); ok {
		if err := patientrights.ResponsibleValidator(v); err != nil {
			return nil, &ValidationError{Name: "Responsible", err: fmt.Errorf("ent: validator failed for field \"Responsible\": %w", err)}
		}
	}

	var (
		err  error
		node *Patientrights
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientrightsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PatientrightsUpdateOne) SaveX(ctx context.Context) *Patientrights {
	pa, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pa
}

// Exec executes the query on the entity.
func (puo *PatientrightsUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PatientrightsUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PatientrightsUpdateOne) sqlSave(ctx context.Context) (pa *Patientrights, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   patientrights.Table,
			Columns: patientrights.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patientrights.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Patientrights.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.PermissionDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: patientrights.FieldPermissionDate,
		})
	}
	if value, ok := puo.mutation.Permission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrights.FieldPermission,
		})
	}
	if value, ok := puo.mutation.PermissionArea(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrights.FieldPermissionArea,
		})
	}
	if value, ok := puo.mutation.Responsible(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientrights.FieldResponsible,
		})
	}
	if puo.mutation.EdgesOfPatientrightsAbilitypatientrightsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.EdgesOfPatientrightsAbilitypatientrightsTable,
			Columns: []string{patientrights.EdgesOfPatientrightsAbilitypatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilitypatientrights.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EdgesOfPatientrightsAbilitypatientrightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.EdgesOfPatientrightsAbilitypatientrightsTable,
			Columns: []string{patientrights.EdgesOfPatientrightsAbilitypatientrightsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: abilitypatientrights.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EdgesOfPatientrightsInsuranceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.EdgesOfPatientrightsInsuranceTable,
			Columns: []string{patientrights.EdgesOfPatientrightsInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EdgesOfPatientrightsInsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.EdgesOfPatientrightsInsuranceTable,
			Columns: []string{patientrights.EdgesOfPatientrightsInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EdgesOfPatientrightsPatientrecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.EdgesOfPatientrightsPatientrecordTable,
			Columns: []string{patientrights.EdgesOfPatientrightsPatientrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EdgesOfPatientrightsPatientrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.EdgesOfPatientrightsPatientrecordTable,
			Columns: []string{patientrights.EdgesOfPatientrightsPatientrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EdgesOfPatientrightsMedicalrecordstaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.EdgesOfPatientrightsMedicalrecordstaffTable,
			Columns: []string{patientrights.EdgesOfPatientrightsMedicalrecordstaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalrecordstaff.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EdgesOfPatientrightsMedicalrecordstaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientrights.EdgesOfPatientrightsMedicalrecordstaffTable,
			Columns: []string{patientrights.EdgesOfPatientrightsMedicalrecordstaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalrecordstaff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pa = &Patientrights{config: puo.config}
	_spec.Assign = pa.assignValues
	_spec.ScanValues = pa.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patientrights.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pa, nil
}
