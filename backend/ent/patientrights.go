// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team10/app/ent/abilitypatientrights"
	"github.com/team10/app/ent/insurance"
	"github.com/team10/app/ent/medicalrecordstaff"
	"github.com/team10/app/ent/patientrecord"
	"github.com/team10/app/ent/patientrights"
)

// Patientrights is the model entity for the Patientrights schema.
type Patientrights struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PermissionDate holds the value of the "PermissionDate" field.
	PermissionDate time.Time `json:"PermissionDate,omitempty"`
	// Permission holds the value of the "Permission" field.
	Permission string `json:"Permission,omitempty"`
	// PermissionArea holds the value of the "PermissionArea" field.
	PermissionArea string `json:"PermissionArea,omitempty"`
	// Responsible holds the value of the "Responsible" field.
	Responsible string `json:"Responsible,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PatientrightsQuery when eager-loading is set.
	Edges                   PatientrightsEdges `json:"edges"`
	Abilitypatientrights_id *int
	Insurance_id            *int
	medicalrecordstaff_id   *int
	patientrecord_id        *int
}

// PatientrightsEdges holds the relations/edges for other nodes in the graph.
type PatientrightsEdges struct {
	// EdgesOfPatientrightsAbilitypatientrights holds the value of the EdgesOfPatientrightsAbilitypatientrights edge.
	EdgesOfPatientrightsAbilitypatientrights *Abilitypatientrights
	// EdgesOfPatientrightsInsurance holds the value of the EdgesOfPatientrightsInsurance edge.
	EdgesOfPatientrightsInsurance *Insurance
	// EdgesOfPatientrightsPatientrecord holds the value of the EdgesOfPatientrightsPatientrecord edge.
	EdgesOfPatientrightsPatientrecord *Patientrecord
	// EdgesOfPatientrightsMedicalrecordstaff holds the value of the EdgesOfPatientrightsMedicalrecordstaff edge.
	EdgesOfPatientrightsMedicalrecordstaff *Medicalrecordstaff
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// EdgesOfPatientrightsAbilitypatientrightsOrErr returns the EdgesOfPatientrightsAbilitypatientrights value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientrightsEdges) EdgesOfPatientrightsAbilitypatientrightsOrErr() (*Abilitypatientrights, error) {
	if e.loadedTypes[0] {
		if e.EdgesOfPatientrightsAbilitypatientrights == nil {
			// The edge EdgesOfPatientrightsAbilitypatientrights was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: abilitypatientrights.Label}
		}
		return e.EdgesOfPatientrightsAbilitypatientrights, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfPatientrightsAbilitypatientrights"}
}

// EdgesOfPatientrightsInsuranceOrErr returns the EdgesOfPatientrightsInsurance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientrightsEdges) EdgesOfPatientrightsInsuranceOrErr() (*Insurance, error) {
	if e.loadedTypes[1] {
		if e.EdgesOfPatientrightsInsurance == nil {
			// The edge EdgesOfPatientrightsInsurance was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: insurance.Label}
		}
		return e.EdgesOfPatientrightsInsurance, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfPatientrightsInsurance"}
}

// EdgesOfPatientrightsPatientrecordOrErr returns the EdgesOfPatientrightsPatientrecord value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientrightsEdges) EdgesOfPatientrightsPatientrecordOrErr() (*Patientrecord, error) {
	if e.loadedTypes[2] {
		if e.EdgesOfPatientrightsPatientrecord == nil {
			// The edge EdgesOfPatientrightsPatientrecord was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patientrecord.Label}
		}
		return e.EdgesOfPatientrightsPatientrecord, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfPatientrightsPatientrecord"}
}

// EdgesOfPatientrightsMedicalrecordstaffOrErr returns the EdgesOfPatientrightsMedicalrecordstaff value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientrightsEdges) EdgesOfPatientrightsMedicalrecordstaffOrErr() (*Medicalrecordstaff, error) {
	if e.loadedTypes[3] {
		if e.EdgesOfPatientrightsMedicalrecordstaff == nil {
			// The edge EdgesOfPatientrightsMedicalrecordstaff was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: medicalrecordstaff.Label}
		}
		return e.EdgesOfPatientrightsMedicalrecordstaff, nil
	}
	return nil, &NotLoadedError{edge: "EdgesOfPatientrightsMedicalrecordstaff"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Patientrights) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // PermissionDate
		&sql.NullString{}, // Permission
		&sql.NullString{}, // PermissionArea
		&sql.NullString{}, // Responsible
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Patientrights) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // Abilitypatientrights_id
		&sql.NullInt64{}, // Insurance_id
		&sql.NullInt64{}, // medicalrecordstaff_id
		&sql.NullInt64{}, // patientrecord_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Patientrights fields.
func (pa *Patientrights) assignValues(values ...interface{}) error {
	if m, n := len(values), len(patientrights.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pa.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field PermissionDate", values[0])
	} else if value.Valid {
		pa.PermissionDate = value.Time
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Permission", values[1])
	} else if value.Valid {
		pa.Permission = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PermissionArea", values[2])
	} else if value.Valid {
		pa.PermissionArea = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Responsible", values[3])
	} else if value.Valid {
		pa.Responsible = value.String
	}
	values = values[4:]
	if len(values) == len(patientrights.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Abilitypatientrights_id", value)
		} else if value.Valid {
			pa.Abilitypatientrights_id = new(int)
			*pa.Abilitypatientrights_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Insurance_id", value)
		} else if value.Valid {
			pa.Insurance_id = new(int)
			*pa.Insurance_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field medicalrecordstaff_id", value)
		} else if value.Valid {
			pa.medicalrecordstaff_id = new(int)
			*pa.medicalrecordstaff_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field patientrecord_id", value)
		} else if value.Valid {
			pa.patientrecord_id = new(int)
			*pa.patientrecord_id = int(value.Int64)
		}
	}
	return nil
}

// QueryEdgesOfPatientrightsAbilitypatientrights queries the EdgesOfPatientrightsAbilitypatientrights edge of the Patientrights.
func (pa *Patientrights) QueryEdgesOfPatientrightsAbilitypatientrights() *AbilitypatientrightsQuery {
	return (&PatientrightsClient{config: pa.config}).QueryEdgesOfPatientrightsAbilitypatientrights(pa)
}

// QueryEdgesOfPatientrightsInsurance queries the EdgesOfPatientrightsInsurance edge of the Patientrights.
func (pa *Patientrights) QueryEdgesOfPatientrightsInsurance() *InsuranceQuery {
	return (&PatientrightsClient{config: pa.config}).QueryEdgesOfPatientrightsInsurance(pa)
}

// QueryEdgesOfPatientrightsPatientrecord queries the EdgesOfPatientrightsPatientrecord edge of the Patientrights.
func (pa *Patientrights) QueryEdgesOfPatientrightsPatientrecord() *PatientrecordQuery {
	return (&PatientrightsClient{config: pa.config}).QueryEdgesOfPatientrightsPatientrecord(pa)
}

// QueryEdgesOfPatientrightsMedicalrecordstaff queries the EdgesOfPatientrightsMedicalrecordstaff edge of the Patientrights.
func (pa *Patientrights) QueryEdgesOfPatientrightsMedicalrecordstaff() *MedicalrecordstaffQuery {
	return (&PatientrightsClient{config: pa.config}).QueryEdgesOfPatientrightsMedicalrecordstaff(pa)
}

// Update returns a builder for updating this Patientrights.
// Note that, you need to call Patientrights.Unwrap() before calling this method, if this Patientrights
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Patientrights) Update() *PatientrightsUpdateOne {
	return (&PatientrightsClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pa *Patientrights) Unwrap() *Patientrights {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Patientrights is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Patientrights) String() string {
	var builder strings.Builder
	builder.WriteString("Patientrights(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", PermissionDate=")
	builder.WriteString(pa.PermissionDate.Format(time.ANSIC))
	builder.WriteString(", Permission=")
	builder.WriteString(pa.Permission)
	builder.WriteString(", PermissionArea=")
	builder.WriteString(pa.PermissionArea)
	builder.WriteString(", Responsible=")
	builder.WriteString(pa.Responsible)
	builder.WriteByte(')')
	return builder.String()
}

// PatientrightsSlice is a parsable slice of Patientrights.
type PatientrightsSlice []*Patientrights

func (pa PatientrightsSlice) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
