// Code generated by entc, DO NOT EDIT.

package abilitypatientrights

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team10/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Operative applies equality check predicate on the "Operative" field. It's identical to OperativeEQ.
func Operative(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperative), v))
	})
}

// MedicalSupplies applies equality check predicate on the "MedicalSupplies" field. It's identical to MedicalSuppliesEQ.
func MedicalSupplies(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicalSupplies), v))
	})
}

// Examine applies equality check predicate on the "Examine" field. It's identical to ExamineEQ.
func Examine(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamine), v))
	})
}

// StayInHospital applies equality check predicate on the "StayInHospital" field. It's identical to StayInHospitalEQ.
func StayInHospital(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStayInHospital), v))
	})
}

// Check applies equality check predicate on the "check" field. It's identical to CheckEQ.
func Check(v string) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheck), v))
	})
}

// OperativeEQ applies the EQ predicate on the "Operative" field.
func OperativeEQ(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperative), v))
	})
}

// OperativeNEQ applies the NEQ predicate on the "Operative" field.
func OperativeNEQ(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperative), v))
	})
}

// OperativeIn applies the In predicate on the "Operative" field.
func OperativeIn(vs ...int) predicate.Abilitypatientrights {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOperative), v...))
	})
}

// OperativeNotIn applies the NotIn predicate on the "Operative" field.
func OperativeNotIn(vs ...int) predicate.Abilitypatientrights {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOperative), v...))
	})
}

// OperativeGT applies the GT predicate on the "Operative" field.
func OperativeGT(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOperative), v))
	})
}

// OperativeGTE applies the GTE predicate on the "Operative" field.
func OperativeGTE(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOperative), v))
	})
}

// OperativeLT applies the LT predicate on the "Operative" field.
func OperativeLT(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOperative), v))
	})
}

// OperativeLTE applies the LTE predicate on the "Operative" field.
func OperativeLTE(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOperative), v))
	})
}

// MedicalSuppliesEQ applies the EQ predicate on the "MedicalSupplies" field.
func MedicalSuppliesEQ(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicalSupplies), v))
	})
}

// MedicalSuppliesNEQ applies the NEQ predicate on the "MedicalSupplies" field.
func MedicalSuppliesNEQ(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMedicalSupplies), v))
	})
}

// MedicalSuppliesIn applies the In predicate on the "MedicalSupplies" field.
func MedicalSuppliesIn(vs ...int) predicate.Abilitypatientrights {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMedicalSupplies), v...))
	})
}

// MedicalSuppliesNotIn applies the NotIn predicate on the "MedicalSupplies" field.
func MedicalSuppliesNotIn(vs ...int) predicate.Abilitypatientrights {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMedicalSupplies), v...))
	})
}

// MedicalSuppliesGT applies the GT predicate on the "MedicalSupplies" field.
func MedicalSuppliesGT(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMedicalSupplies), v))
	})
}

// MedicalSuppliesGTE applies the GTE predicate on the "MedicalSupplies" field.
func MedicalSuppliesGTE(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMedicalSupplies), v))
	})
}

// MedicalSuppliesLT applies the LT predicate on the "MedicalSupplies" field.
func MedicalSuppliesLT(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMedicalSupplies), v))
	})
}

// MedicalSuppliesLTE applies the LTE predicate on the "MedicalSupplies" field.
func MedicalSuppliesLTE(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMedicalSupplies), v))
	})
}

// ExamineEQ applies the EQ predicate on the "Examine" field.
func ExamineEQ(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExamine), v))
	})
}

// ExamineNEQ applies the NEQ predicate on the "Examine" field.
func ExamineNEQ(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExamine), v))
	})
}

// ExamineIn applies the In predicate on the "Examine" field.
func ExamineIn(vs ...int) predicate.Abilitypatientrights {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExamine), v...))
	})
}

// ExamineNotIn applies the NotIn predicate on the "Examine" field.
func ExamineNotIn(vs ...int) predicate.Abilitypatientrights {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExamine), v...))
	})
}

// ExamineGT applies the GT predicate on the "Examine" field.
func ExamineGT(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExamine), v))
	})
}

// ExamineGTE applies the GTE predicate on the "Examine" field.
func ExamineGTE(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExamine), v))
	})
}

// ExamineLT applies the LT predicate on the "Examine" field.
func ExamineLT(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExamine), v))
	})
}

// ExamineLTE applies the LTE predicate on the "Examine" field.
func ExamineLTE(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExamine), v))
	})
}

// StayInHospitalEQ applies the EQ predicate on the "StayInHospital" field.
func StayInHospitalEQ(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStayInHospital), v))
	})
}

// StayInHospitalNEQ applies the NEQ predicate on the "StayInHospital" field.
func StayInHospitalNEQ(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStayInHospital), v))
	})
}

// StayInHospitalIn applies the In predicate on the "StayInHospital" field.
func StayInHospitalIn(vs ...int) predicate.Abilitypatientrights {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStayInHospital), v...))
	})
}

// StayInHospitalNotIn applies the NotIn predicate on the "StayInHospital" field.
func StayInHospitalNotIn(vs ...int) predicate.Abilitypatientrights {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStayInHospital), v...))
	})
}

// StayInHospitalGT applies the GT predicate on the "StayInHospital" field.
func StayInHospitalGT(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStayInHospital), v))
	})
}

// StayInHospitalGTE applies the GTE predicate on the "StayInHospital" field.
func StayInHospitalGTE(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStayInHospital), v))
	})
}

// StayInHospitalLT applies the LT predicate on the "StayInHospital" field.
func StayInHospitalLT(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStayInHospital), v))
	})
}

// StayInHospitalLTE applies the LTE predicate on the "StayInHospital" field.
func StayInHospitalLTE(v int) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStayInHospital), v))
	})
}

// CheckEQ applies the EQ predicate on the "check" field.
func CheckEQ(v string) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheck), v))
	})
}

// CheckNEQ applies the NEQ predicate on the "check" field.
func CheckNEQ(v string) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCheck), v))
	})
}

// CheckIn applies the In predicate on the "check" field.
func CheckIn(vs ...string) predicate.Abilitypatientrights {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCheck), v...))
	})
}

// CheckNotIn applies the NotIn predicate on the "check" field.
func CheckNotIn(vs ...string) predicate.Abilitypatientrights {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCheck), v...))
	})
}

// CheckGT applies the GT predicate on the "check" field.
func CheckGT(v string) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCheck), v))
	})
}

// CheckGTE applies the GTE predicate on the "check" field.
func CheckGTE(v string) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCheck), v))
	})
}

// CheckLT applies the LT predicate on the "check" field.
func CheckLT(v string) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCheck), v))
	})
}

// CheckLTE applies the LTE predicate on the "check" field.
func CheckLTE(v string) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCheck), v))
	})
}

// CheckContains applies the Contains predicate on the "check" field.
func CheckContains(v string) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCheck), v))
	})
}

// CheckHasPrefix applies the HasPrefix predicate on the "check" field.
func CheckHasPrefix(v string) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCheck), v))
	})
}

// CheckHasSuffix applies the HasSuffix predicate on the "check" field.
func CheckHasSuffix(v string) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCheck), v))
	})
}

// CheckEqualFold applies the EqualFold predicate on the "check" field.
func CheckEqualFold(v string) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCheck), v))
	})
}

// CheckContainsFold applies the ContainsFold predicate on the "check" field.
func CheckContainsFold(v string) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCheck), v))
	})
}

// HasEdgesOfAbilitypatientrightsPatientrights applies the HasEdge predicate on the "EdgesOfAbilitypatientrightsPatientrights" edge.
func HasEdgesOfAbilitypatientrightsPatientrights() predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfAbilitypatientrightsPatientrightsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EdgesOfAbilitypatientrightsPatientrightsTable, EdgesOfAbilitypatientrightsPatientrightsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEdgesOfAbilitypatientrightsPatientrightsWith applies the HasEdge predicate on the "EdgesOfAbilitypatientrightsPatientrights" edge with a given conditions (other predicates).
func HasEdgesOfAbilitypatientrightsPatientrightsWith(preds ...predicate.Patientrights) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EdgesOfAbilitypatientrightsPatientrightsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EdgesOfAbilitypatientrightsPatientrightsTable, EdgesOfAbilitypatientrightsPatientrightsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Abilitypatientrights) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Abilitypatientrights) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Abilitypatientrights) predicate.Abilitypatientrights {
	return predicate.Abilitypatientrights(func(s *sql.Selector) {
		p(s.Not())
	})
}
